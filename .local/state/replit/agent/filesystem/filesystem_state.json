{"file_contents":{"src/game/VoidSubdividerRenderer.ts":{"content":"import { VoidSubdivider } from './VoidSubdivider';\nimport { Camera } from './Camera';\n\nexport function renderVoidSubdivider(\n  ctx: CanvasRenderingContext2D,\n  boss: VoidSubdivider,\n  camera: Camera\n): void {\n  ctx.save();\n\n  if (!boss.isFullySpawned) {\n    const alpha = Math.min(boss.spawnAnimation, 1);\n    ctx.globalAlpha = alpha;\n\n    for (let i = boss.segments.length - 1; i >= 0; i--) {\n      const segment = boss.segments[i];\n      const screenPos = camera.worldToScreen(segment.position);\n\n      const gradient = ctx.createRadialGradient(\n        screenPos.x, screenPos.y, 0,\n        screenPos.x, screenPos.y, segment.size / 2\n      );\n      gradient.addColorStop(0, '#7c3aed');\n      gradient.addColorStop(0.5, '#5b21b6');\n      gradient.addColorStop(1, '#1a0a2e');\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(screenPos.x, screenPos.y, segment.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.strokeStyle = '#a78bfa';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n    ctx.restore();\n    return;\n  }\n\n  for (let i = boss.segments.length - 1; i >= 0; i--) {\n    const segment = boss.segments[i];\n    const screenPos = camera.worldToScreen(segment.position);\n    const isHead = i === 0;\n\n    if (isHead) {\n      renderDragonHead(ctx, screenPos, segment, boss);\n    } else {\n      renderBodySegment(ctx, screenPos, segment, i);\n    }\n  }\n\n  if (boss.attackPhase === 'breath' && boss.breathTimer && boss.breathDirection !== undefined) {\n    renderBreathAttack(ctx, camera, boss);\n  }\n\n  for (const tendril of boss.tendrilAttacks) {\n    if (tendril.progress < 0.1) continue;\n    renderVoidTendril(ctx, camera, tendril);\n  }\n\n  renderHealthBar(ctx, camera, boss);\n\n  ctx.restore();\n}\n\nfunction renderDragonHead(\n  ctx: CanvasRenderingContext2D,\n  screenPos: { x: number; y: number },\n  segment: any,\n  boss: VoidSubdivider\n): void {\n  const headSize = segment.size;\n  const jawOpenAmount = boss.attackPhase === 'breath' ? 0.3 : 0;\n  const time = Date.now() * 0.001;\n\n  const bodyGradient = ctx.createRadialGradient(\n    screenPos.x, screenPos.y, 0,\n    screenPos.x, screenPos.y, headSize / 2\n  );\n  bodyGradient.addColorStop(0, '#7c3aed');\n  bodyGradient.addColorStop(0.4, '#5b21b6');\n  bodyGradient.addColorStop(0.8, '#2d1b4e');\n  bodyGradient.addColorStop(1, '#1a0a2e');\n\n  ctx.fillStyle = bodyGradient;\n  ctx.beginPath();\n  ctx.moveTo(screenPos.x + headSize * 0.6, screenPos.y);\n  ctx.lineTo(screenPos.x + headSize * 0.1, screenPos.y - headSize * 0.5);\n  ctx.lineTo(screenPos.x - headSize * 0.6, screenPos.y - headSize * 0.2);\n  ctx.lineTo(screenPos.x - headSize * 0.6, screenPos.y + headSize * 0.2);\n  ctx.lineTo(screenPos.x + headSize * 0.1, screenPos.y + headSize * 0.5);\n  ctx.closePath();\n  ctx.fill();\n\n  const eyeSpacing = headSize * 0.25;\n  const eyeWidth = headSize * 0.03;\n  const eyeLength = headSize * 0.45;\n  const pupilPulse = Math.sin(time * 3) * 0.1 + 0.9;\n\n  [-1, 1].forEach(side => {\n    const eyePairX = side * eyeSpacing;\n    const startY = screenPos.y - headSize * 0.3;\n    const endY = screenPos.y + headSize * 0.15;\n\n    ctx.shadowBlur = 20;\n    ctx.shadowColor = '#c084fc';\n    ctx.strokeStyle = '#c084fc';\n    ctx.lineWidth = eyeWidth * pupilPulse;\n    ctx.lineCap = 'butt';\n\n    ctx.beginPath();\n    ctx.moveTo(screenPos.x + eyePairX, startY);\n    ctx.lineTo(screenPos.x + eyePairX, endY);\n    ctx.stroke();\n\n    ctx.strokeStyle = '#a78bfa';\n    ctx.lineWidth = eyeWidth * 0.4 * pupilPulse;\n    ctx.shadowBlur = 10;\n    ctx.beginPath();\n    ctx.moveTo(screenPos.x + eyePairX, startY);\n    ctx.lineTo(screenPos.x + eyePairX, endY);\n    ctx.stroke();\n  });\n\n  ctx.shadowBlur = 0;\n\n  const mandibleLength = headSize * 0.5;\n  const mandibleWidth = headSize * 0.12;\n\n  [-1, 1].forEach(side => {\n    ctx.save();\n    ctx.translate(screenPos.x + side * headSize * 0.15, screenPos.y + headSize * 0.35);\n    ctx.rotate(side * jawOpenAmount * 0.5);\n\n    const mandibleGradient = ctx.createLinearGradient(0, 0, 0, mandibleLength);\n    mandibleGradient.addColorStop(0, '#5b21b6');\n    mandibleGradient.addColorStop(1, '#2d1b4e');\n    ctx.fillStyle = mandibleGradient;\n\n    ctx.beginPath();\n    ctx.moveTo(-mandibleWidth / 2, 0);\n    ctx.lineTo(-mandibleWidth / 4, mandibleLength * 0.5);\n    ctx.lineTo(0, mandibleLength);\n    ctx.lineTo(mandibleWidth / 4, mandibleLength * 0.5);\n    ctx.lineTo(mandibleWidth / 2, 0);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.strokeStyle = '#7c3aed';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    const bladeCount = 6;\n    for (let i = 0; i < bladeCount; i++) {\n      const bladeY = mandibleLength * 0.15 + (mandibleLength * 0.75 * i) / bladeCount;\n      const bladeLength = 12 - i * 1.5;\n\n      ctx.fillStyle = '#c4b5fd';\n      ctx.beginPath();\n      ctx.moveTo(side * mandibleWidth * 0.3, bladeY);\n      ctx.lineTo(side * (mandibleWidth * 0.3 + bladeLength), bladeY - 2);\n      ctx.lineTo(side * (mandibleWidth * 0.3 + bladeLength), bladeY + 2);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    ctx.restore();\n  });\n\n  const hornCount = 4;\n  for (let j = 0; j < hornCount; j++) {\n    const angle = (j / hornCount) * Math.PI - Math.PI / 2 + Math.PI / 8;\n    const hornLength = headSize * 0.8;\n    const hornBase = headSize * 0.45;\n\n    const baseX = screenPos.x + Math.cos(angle) * hornBase;\n    const baseY = screenPos.y + Math.sin(angle) * hornBase;\n    const tipX = baseX + Math.cos(angle) * hornLength;\n    const tipY = baseY + Math.sin(angle) * hornLength;\n\n    const hornGradient = ctx.createLinearGradient(baseX, baseY, tipX, tipY);\n    hornGradient.addColorStop(0, '#7c3aed');\n    hornGradient.addColorStop(0.5, '#5b21b6');\n    hornGradient.addColorStop(1, '#2d1b4e');\n\n    ctx.strokeStyle = hornGradient;\n    ctx.lineWidth = 8 - j;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(baseX, baseY);\n    ctx.lineTo(tipX, tipY);\n    ctx.stroke();\n\n    ctx.shadowBlur = 10;\n    ctx.shadowColor = '#7c3aed';\n    ctx.fillStyle = '#a78bfa';\n    ctx.beginPath();\n    ctx.arc(tipX, tipY, 3, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  ctx.shadowBlur = 0;\n\n  const smallTendrilCount = 6;\n  for (let i = 0; i < smallTendrilCount; i++) {\n    const baseAngle = (i / smallTendrilCount) * Math.PI * 2;\n    const tendrilLength = headSize * 0.4;\n    const wave = Math.sin(time * 2 + i) * 0.3;\n\n    ctx.strokeStyle = `rgba(124, 58, 237, ${0.6 + wave * 0.2})`;\n    ctx.lineWidth = 3;\n    ctx.lineCap = 'round';\n\n    ctx.beginPath();\n    ctx.moveTo(screenPos.x, screenPos.y);\n\n    for (let seg = 1; seg <= 8; seg++) {\n      const t = seg / 8;\n      const segmentAngle = baseAngle + Math.sin(time * 3 + seg * 0.5 + i) * 0.5;\n      const segmentDist = (headSize / 2) + tendrilLength * t;\n      const x = screenPos.x + Math.cos(segmentAngle) * segmentDist;\n      const y = screenPos.y + Math.sin(segmentAngle) * segmentDist;\n      ctx.lineTo(x, y);\n    }\n\n    ctx.stroke();\n  }\n\n  const glowGradient = ctx.createRadialGradient(\n    screenPos.x, screenPos.y, 0,\n    screenPos.x, screenPos.y, headSize / 2 + 20\n  );\n  glowGradient.addColorStop(0, 'rgba(124, 58, 237, 0)');\n  glowGradient.addColorStop(0.7, 'rgba(124, 58, 237, 0.2)');\n  glowGradient.addColorStop(1, 'rgba(124, 58, 237, 0)');\n\n  ctx.fillStyle = glowGradient;\n  ctx.beginPath();\n  ctx.arc(screenPos.x, screenPos.y, headSize / 2 + 20, 0, Math.PI * 2);\n  ctx.fill();\n}\n\nfunction renderBodySegment(\n  ctx: CanvasRenderingContext2D,\n  screenPos: { x: number; y: number },\n  segment: any,\n  index: number\n): void {\n  const baseGradient = ctx.createRadialGradient(\n    screenPos.x, screenPos.y, 0,\n    screenPos.x, screenPos.y, segment.size / 2\n  );\n  baseGradient.addColorStop(0, '#7c3aed');\n  baseGradient.addColorStop(0.4, '#5b21b6');\n  baseGradient.addColorStop(0.8, '#2d1b4e');\n  baseGradient.addColorStop(1, '#1a0a2e');\n\n  ctx.fillStyle = baseGradient;\n  ctx.beginPath();\n\n  const segmentCount = 8;\n  for (let i = 0; i < segmentCount; i++) {\n    const angle = (i / segmentCount) * Math.PI * 2;\n    const radius = segment.size / 2;\n    const x = screenPos.x + Math.cos(angle) * radius;\n    const y = screenPos.y + Math.sin(angle) * radius;\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  }\n  ctx.closePath();\n  ctx.fill();\n\n  if (index % 2 === 0) {\n    const spikeCount = 6;\n    for (let j = 0; j < spikeCount; j++) {\n      const angle = (j / spikeCount) * Math.PI * 2 + Date.now() * 0.0005 * (index % 2 === 0 ? 1 : -1);\n      const spikeLength = segment.size * 0.4 + Math.sin(Date.now() * 0.003 + j) * segment.size * 0.1;\n\n      const baseX = screenPos.x + Math.cos(angle) * segment.size * 0.38;\n      const baseY = screenPos.y + Math.sin(angle) * segment.size * 0.38;\n      const tipX = baseX + Math.cos(angle) * spikeLength;\n      const tipY = baseY + Math.sin(angle) * spikeLength;\n\n      ctx.strokeStyle = '#a78bfa';\n      ctx.lineWidth = 4;\n      ctx.lineCap = 'butt';\n      ctx.beginPath();\n      ctx.moveTo(baseX, baseY);\n      ctx.lineTo(tipX, tipY);\n      ctx.stroke();\n\n      ctx.fillStyle = '#c4b5fd';\n      ctx.beginPath();\n      ctx.arc(tipX, tipY, 2.5, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  ctx.strokeStyle = '#a78bfa';\n  ctx.lineWidth = 3;\n  ctx.globalAlpha = 0.7;\n  ctx.beginPath();\n  for (let i = 0; i < segmentCount; i++) {\n    const angle = (i / segmentCount) * Math.PI * 2;\n    const radius = segment.size / 2;\n    const x = screenPos.x + Math.cos(angle) * radius;\n    const y = screenPos.y + Math.sin(angle) * radius;\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  }\n  ctx.closePath();\n  ctx.stroke();\n  ctx.globalAlpha = 1;\n\n  const glowGradient = ctx.createRadialGradient(\n    screenPos.x, screenPos.y, 0,\n    screenPos.x, screenPos.y, segment.size / 2 + 15\n  );\n  glowGradient.addColorStop(0, 'rgba(124, 58, 237, 0)');\n  glowGradient.addColorStop(0.7, 'rgba(124, 58, 237, 0.1)');\n  glowGradient.addColorStop(1, 'rgba(124, 58, 237, 0)');\n\n  ctx.fillStyle = glowGradient;\n  ctx.beginPath();\n  ctx.arc(screenPos.x, screenPos.y, segment.size / 2 + 15, 0, Math.PI * 2);\n  ctx.fill();\n}\n\nfunction renderBreathAttack(\n  ctx: CanvasRenderingContext2D,\n  camera: Camera,\n  boss: VoidSubdivider\n): void {\n  const headSegment = boss.segments[0];\n  const screenPos = camera.worldToScreen(headSegment.position);\n\n  const breathLength = 600;\n  const breathWidth = 80;\n  const pulsePhase = Math.sin(Date.now() * 0.01) * 0.2 + 0.8;\n\n  const endX = screenPos.x + Math.cos(boss.breathDirection!) * breathLength;\n  const endY = screenPos.y + Math.sin(boss.breathDirection!) * breathLength;\n\n  const gradient = ctx.createLinearGradient(screenPos.x, screenPos.y, endX, endY);\n  gradient.addColorStop(0, 'rgba(124, 58, 237, 0.8)');\n  gradient.addColorStop(0.3, 'rgba(91, 33, 182, 0.6)');\n  gradient.addColorStop(0.6, 'rgba(49, 0, 98, 0.4)');\n  gradient.addColorStop(1, 'rgba(26, 10, 46, 0)');\n\n  ctx.strokeStyle = gradient;\n  ctx.lineWidth = breathWidth * pulsePhase;\n  ctx.lineCap = 'round';\n  ctx.beginPath();\n  ctx.moveTo(screenPos.x, screenPos.y);\n  ctx.lineTo(endX, endY);\n  ctx.stroke();\n\n  const particleCount = 20;\n  for (let i = 0; i < particleCount; i++) {\n    const progress = (i / particleCount) + (boss.breathTimer! % 0.5) * 2;\n    if (progress > 1) continue;\n\n    const particleX = screenPos.x + Math.cos(boss.breathDirection!) * breathLength * progress;\n    const particleY = screenPos.y + Math.sin(boss.breathDirection!) * breathLength * progress;\n    const offset = (Math.sin(Date.now() * 0.01 + i) * breathWidth * 0.3);\n\n    const perpAngle = boss.breathDirection! + Math.PI / 2;\n    const px = particleX + Math.cos(perpAngle) * offset;\n    const py = particleY + Math.sin(perpAngle) * offset;\n\n    ctx.fillStyle = `rgba(167, 139, 250, ${0.8 * (1 - progress)})`;\n    ctx.beginPath();\n    ctx.arc(px, py, 4, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nfunction renderVoidTendril(\n  ctx: CanvasRenderingContext2D,\n  camera: Camera,\n  tendril: any\n): void {\n  const currentEnd = {\n    x: tendril.startPos.x + (tendril.endPos.x - tendril.startPos.x) * Math.min(tendril.progress, 1),\n    y: tendril.startPos.y + (tendril.endPos.y - tendril.startPos.y) * Math.min(tendril.progress, 1),\n  };\n\n  const screenStart = camera.worldToScreen(tendril.startPos);\n  const screenEnd = camera.worldToScreen(currentEnd);\n\n  const gradient = ctx.createLinearGradient(screenStart.x, screenStart.y, screenEnd.x, screenEnd.y);\n  gradient.addColorStop(0, 'rgba(124, 58, 237, 0.9)');\n  gradient.addColorStop(0.5, 'rgba(91, 33, 182, 0.7)');\n  gradient.addColorStop(1, 'rgba(167, 139, 250, 0.5)');\n\n  ctx.strokeStyle = gradient;\n  ctx.lineWidth = tendril.width;\n  ctx.lineCap = 'round';\n  ctx.beginPath();\n  ctx.moveTo(screenStart.x, screenStart.y);\n  ctx.lineTo(screenEnd.x, screenEnd.y);\n  ctx.stroke();\n\n  ctx.strokeStyle = '#c4b5fd';\n  ctx.lineWidth = 2;\n  ctx.stroke();\n}\n\nfunction renderHealthBar(\n  ctx: CanvasRenderingContext2D,\n  camera: Camera,\n  boss: VoidSubdivider\n): void {\n  const headSegment = boss.segments[0];\n  const headScreenPos = camera.worldToScreen(headSegment.position);\n  const healthBarWidth = 200;\n  const healthBarHeight = 12;\n  const healthBarX = headScreenPos.x - healthBarWidth / 2;\n  const healthBarY = headScreenPos.y - headSegment.size / 2 - 30;\n\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n  ctx.fillRect(healthBarX - 2, healthBarY - 2, healthBarWidth + 4, healthBarHeight + 4);\n\n  const healthPercent = boss.health / boss.maxHealth;\n  const healthBarFillWidth = healthBarWidth * healthPercent;\n\n  const healthGradient = ctx.createLinearGradient(healthBarX, 0, healthBarX + healthBarWidth, 0);\n  healthGradient.addColorStop(0, '#7c3aed');\n  healthGradient.addColorStop(1, '#a78bfa');\n\n  ctx.fillStyle = healthGradient;\n  ctx.fillRect(healthBarX, healthBarY, healthBarFillWidth, healthBarHeight);\n\n  ctx.strokeStyle = '#c4b5fd';\n  ctx.lineWidth = 2;\n  ctx.strokeRect(healthBarX, healthBarY, healthBarWidth, healthBarHeight);\n\n  ctx.fillStyle = '#ffffff';\n  ctx.font = 'bold 14px Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText('VOID SUBDIVIDER', headScreenPos.x, healthBarY - 8);\n\n  ctx.font = '11px Arial';\n  ctx.fillText(`${Math.ceil(boss.health)} / ${boss.maxHealth}`, headScreenPos.x, healthBarY + healthBarHeight + 15);\n}\n","size_bytes":14221},"src/game/BiomeFeatures.ts":{"content":"import { Vector2 } from '../types/game';\nimport { generateId, createVector } from './utils';\nimport { BiomeConfig } from './BiomeSystem';\n\nexport interface BiomeFeature {\n  id: string;\n  type: string;\n  position: Vector2;\n  size: number;\n  rotation: number;\n  data: any;\n}\n\nexport interface IslandFeature extends BiomeFeature {\n  type: 'island';\n  data: {\n    width: number;\n    height: number;\n    shape: 'irregular' | 'circular' | 'elongated';\n    edgeColor: string;\n    surfaceColor: string;\n    isFloating: boolean;\n    stabilityBonus: number;\n  };\n}\n\nexport interface VoidGapFeature extends BiomeFeature {\n  type: 'void-gap';\n  data: {\n    width: number;\n    height: number;\n    depth: number;\n    voidDamage: number;\n    voidPullStrength: number;\n    voidTendrils: Array<{\n      angle: number;\n      length: number;\n      speed: number;\n    }>;\n    hasOminousTendril?: boolean;\n    ominousTendrilAngle?: number;\n    ominousTendrilPulse?: number;\n  };\n}\n\nexport interface RealityTearFeature extends BiomeFeature {\n  type: 'reality-tear';\n  data: {\n    width: number;\n    height: number;\n    pulseSpeed: number;\n    targetPortalId?: string;\n    isActive: boolean;\n    isPortal: boolean;\n    particles: Array<{\n      offset: Vector2;\n      speed: number;\n      angle: number;\n    }>;\n  };\n}\n\nexport interface GlacialSpireFeature extends BiomeFeature {\n  type: 'glacial-spire';\n  data: {\n    height: number;\n    baseWidth: number;\n    segments: number;\n    iceColor: string;\n    shatterTimer: number;\n    shatterCooldown: number;\n    canShatter: boolean;\n    shardCount: number;\n    snowDrift: Array<{\n      offset: Vector2;\n      size: number;\n      angle: number;\n    }>;\n  };\n}\n\nexport interface LavaPillarFeature extends BiomeFeature {\n  type: 'lava-pillar';\n  data: {\n    height: number;\n    width: number;\n    glowIntensity: number;\n    bubblingSpeed: number;\n    eruptionTimer: number;\n    eruptionCooldown: number;\n    isErupting: boolean;\n    eruptionDuration: number;\n    lavaParticles: Array<{\n      offset: Vector2;\n      velocity: Vector2;\n      lifetime: number;\n    }>;\n  };\n}\n\nexport interface ToxicPoolFeature extends BiomeFeature {\n  type: 'toxic-pool';\n  data: {\n    radius: number;\n    damagePerSecond: number;\n    slowFactor: number;\n    bubbles: Array<{\n      offset: Vector2;\n      size: number;\n      speed: number;\n    }>;\n    miasma: Array<{\n      offset: Vector2;\n      radius: number;\n      pulseSpeed: number;\n    }>;\n  };\n}\n\nexport interface CrystalFormationFeature extends BiomeFeature {\n  type: 'crystal-formation';\n  data: {\n    crystals: Array<{\n      offset: Vector2;\n      height: number;\n      width: number;\n      angle: number;\n    }>;\n    glowColor: string;\n    resonanceTimer: number;\n    resonanceCooldown: number;\n    isResonating: boolean;\n    damageAmplification: number;\n  };\n}\n\nexport interface CoralReefFeature extends BiomeFeature {\n  type: 'coral-reef';\n  data: {\n    branches: Array<{\n      offset: Vector2;\n      length: number;\n      angle: number;\n      thickness: number;\n    }>;\n    swaySpeed: number;\n    healingRate: number;\n    healingRadius: number;\n    waterPools: Array<{\n      offset: Vector2;\n      radius: number;\n    }>;\n    fishSchools: Array<{\n      offset: Vector2;\n      count: number;\n      speed: number;\n      angle: number;\n    }>;\n  };\n}\n\nexport interface BloomTreeFeature extends BiomeFeature {\n  type: 'bloom-tree';\n  data: {\n    trunkHeight: number;\n    trunkWidth: number;\n    canopyRadius: number;\n    petalCount: number;\n    glowColor: string;\n    energyRegenRate: number;\n    energyRadius: number;\n    pulseTimer: number;\n    fallingPetals: Array<{\n      offset: Vector2;\n      velocity: Vector2;\n      rotation: number;\n      size: number;\n    }>;\n  };\n}\n\nexport interface GravityAnomalyFeature extends BiomeFeature {\n  type: 'gravity-anomaly';\n  data: {\n    radius: number;\n    strength: number;\n    rotationSpeed: number;\n    pullStrength: number;\n    crushDamage: number;\n    orbitingDebris: Array<{\n      distance: number;\n      angle: number;\n      size: number;\n      speed: number;\n      orbitDirection: number;\n    }>;\n    gravitonResources: Array<{\n      distance: number;\n      angle: number;\n      size: number;\n      orbitSpeed: number;\n    }>;\n  };\n}\n\nexport type AnyBiomeFeature =\n  | IslandFeature\n  | VoidGapFeature\n  | RealityTearFeature\n  | GlacialSpireFeature\n  | LavaPillarFeature\n  | ToxicPoolFeature\n  | CrystalFormationFeature\n  | CoralReefFeature\n  | BloomTreeFeature\n  | GravityAnomalyFeature;\n\nexport class BiomeFeatureGenerator {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed;\n  }\n\n  private seededRandom(x: number, y: number, offset: number = 0): number {\n    const seed = this.seed + x * 73856093 + y * 19349663 + offset * 83492791;\n    const value = Math.sin(seed) * 43758.5453123;\n    return value - Math.floor(value);\n  }\n\n  generateFeaturesForChunk(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    biome: BiomeConfig\n  ): AnyBiomeFeature[] {\n    const features: AnyBiomeFeature[] = [];\n\n    switch (biome.id) {\n      case 'frozen-tundra':\n        features.push(\n          ...this.generateGlacialSpires(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'volcanic-wastes':\n        features.push(\n          ...this.generateLavaPillars(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'toxic-swamp':\n        features.push(\n          ...this.generateToxicPools(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'crystal-caverns':\n        features.push(\n          ...this.generateCrystalFormations(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'void-nebula':\n        features.push(\n          ...this.generateRealityTears(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'coral-depths':\n        features.push(\n          ...this.generateCoralReefs(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'radiant-gardens':\n        features.push(\n          ...this.generateBloomTrees(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n\n      case 'shattered-expanse':\n        features.push(\n          ...this.generateShatteredIslands(\n            chunkX,\n            chunkY,\n            worldX,\n            worldY,\n            chunkSize,\n            biome\n          )\n        );\n        break;\n    }\n\n    return features;\n  }\n\n  private generateShatteredIslands(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    biome: BiomeConfig\n  ): (IslandFeature | VoidGapFeature | GravityAnomalyFeature)[] {\n    const features: (IslandFeature | VoidGapFeature | GravityAnomalyFeature)[] =\n      [];\n\n    const islandCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 5000) * 2) + 1;\n\n    for (let i = 0; i < islandCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 100 + 5000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 100 + 5001) * chunkSize;\n      const width =\n        150 + this.seededRandom(chunkX, chunkY, i * 100 + 5002) * 200;\n      const height =\n        150 + this.seededRandom(chunkX, chunkY, i * 100 + 5003) * 200;\n\n      const shapes: Array<'irregular' | 'circular' | 'elongated'> = [\n        'irregular',\n        'circular',\n        'elongated',\n      ];\n      const shape =\n        shapes[\n          Math.floor(\n            this.seededRandom(chunkX, chunkY, i * 100 + 5004) * shapes.length\n          )\n        ];\n\n      features.push({\n        id: generateId(),\n        type: 'island',\n        position: createVector(x, y),\n        size: Math.max(width, height),\n        rotation:\n          this.seededRandom(chunkX, chunkY, i * 100 + 5005) * Math.PI * 2,\n        data: {\n          width,\n          height,\n          shape,\n          edgeColor: biome.accentColor,\n          surfaceColor: biome.floorColor,\n          isFloating: true,\n          stabilityBonus: 0.3,\n        },\n      });\n    }\n\n    const voidGapCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 5100) * 2) + 1;\n    for (let i = 0; i < voidGapCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 110 + 5100) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 110 + 5101) * chunkSize;\n\n      const tendrilCount = 3 + Math.floor(this.seededRandom(chunkX, chunkY, i * 110 + 5150) * 4);\n      const voidTendrils = [];\n      for (let j = 0; j < tendrilCount; j++) {\n        voidTendrils.push({\n          angle: (j / tendrilCount) * Math.PI * 2 + this.seededRandom(chunkX, chunkY, j * 115 + 5250) * 0.5,\n          length: 60 + this.seededRandom(chunkX, chunkY, j * 115 + 5251) * 100,\n          speed: 0.5 + this.seededRandom(chunkX, chunkY, j * 115 + 5252) * 1.0,\n        });\n      }\n\n      const hasOminousTendril = this.seededRandom(chunkX, chunkY, i * 110 + 5160) > 0.65;\n\n      features.push({\n        id: generateId(),\n        type: 'void-gap',\n        position: createVector(x, y),\n        size: 200,\n        rotation: 0,\n        data: {\n          width: 150 + this.seededRandom(chunkX, chunkY, i * 110 + 5102) * 150,\n          height: 150 + this.seededRandom(chunkX, chunkY, i * 110 + 5103) * 150,\n          depth: 5,\n          voidDamage: 15,\n          voidPullStrength: 0.8,\n          voidTendrils,\n          hasOminousTendril,\n          ominousTendrilAngle: hasOminousTendril ? this.seededRandom(chunkX, chunkY, i * 110 + 5161) * Math.PI * 2 : 0,\n          ominousTendrilPulse: 0,\n        },\n      });\n    }\n\n    if (this.seededRandom(chunkX, chunkY, 5200) < 0.3) {\n      const x = worldX + chunkSize / 2;\n      const y = worldY + chunkSize / 2;\n\n      const debrisCount =\n        8 + Math.floor(this.seededRandom(chunkX, chunkY, 5201) * 10);\n      const orbitingDebris = [];\n\n      for (let i = 0; i < debrisCount; i++) {\n        const orbitDirection = this.seededRandom(chunkX, chunkY, i * 120 + 5214) > 0.5 ? 1 : -1;\n        orbitingDebris.push({\n          distance:\n            100 + this.seededRandom(chunkX, chunkY, i * 120 + 5210) * 150,\n          angle:\n            this.seededRandom(chunkX, chunkY, i * 120 + 5211) * Math.PI * 2,\n          size: 10 + this.seededRandom(chunkX, chunkY, i * 120 + 5212) * 20,\n          speed: 0.5 + this.seededRandom(chunkX, chunkY, i * 120 + 5213) * 1.5,\n          orbitDirection,\n        });\n      }\n\n      const resourceCount = 3 + Math.floor(this.seededRandom(chunkX, chunkY, 5220) * 5);\n      const gravitonResources = [];\n\n      for (let i = 0; i < resourceCount; i++) {\n        gravitonResources.push({\n          distance: 110 + this.seededRandom(chunkX, chunkY, i * 125 + 5225) * 180,\n          angle: this.seededRandom(chunkX, chunkY, i * 125 + 5226) * Math.PI * 2,\n          size: 15 + this.seededRandom(chunkX, chunkY, i * 125 + 5227) * 10,\n          orbitSpeed: 0.3 + this.seededRandom(chunkX, chunkY, i * 125 + 5228) * 0.8,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'gravity-anomaly',\n        position: createVector(x, y),\n        size: 100,\n        rotation: 0,\n        data: {\n          radius: 80,\n          strength: 1.5,\n          rotationSpeed: 0.02,\n          pullStrength: 1.2,\n          crushDamage: 25,\n          orbitingDebris,\n          gravitonResources,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateRealityTears(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    _biome: BiomeConfig\n  ): RealityTearFeature[] {\n    const features: RealityTearFeature[] = [];\n\n    if (this.seededRandom(chunkX, chunkY, 6000) < 0.4) {\n      const x = worldX + this.seededRandom(chunkX, chunkY, 6001) * chunkSize;\n      const y = worldY + this.seededRandom(chunkX, chunkY, 6002) * chunkSize;\n      const width = 80 + this.seededRandom(chunkX, chunkY, 6003) * 120;\n      const height = 150 + this.seededRandom(chunkX, chunkY, 6004) * 200;\n\n      const particleCount =\n        15 + Math.floor(this.seededRandom(chunkX, chunkY, 6005) * 20);\n      const particles = [];\n\n      for (let i = 0; i < particleCount; i++) {\n        particles.push({\n          offset: createVector(\n            (this.seededRandom(chunkX, chunkY, i * 130 + 6010) - 0.5) * width,\n            (this.seededRandom(chunkX, chunkY, i * 130 + 6011) - 0.5) * height\n          ),\n          speed: 0.5 + this.seededRandom(chunkX, chunkY, i * 130 + 6012) * 2,\n          angle:\n            this.seededRandom(chunkX, chunkY, i * 130 + 6013) * Math.PI * 2,\n        });\n      }\n\n      const isPortal = this.seededRandom(chunkX, chunkY, 6025) < 0.5;\n      features.push({\n        id: generateId(),\n        type: 'reality-tear',\n        position: createVector(x, y),\n        size: Math.max(width, height),\n        rotation: this.seededRandom(chunkX, chunkY, 6020) * Math.PI * 2,\n        data: {\n          width,\n          height,\n          pulseSpeed: 0.02 + this.seededRandom(chunkX, chunkY, 6021) * 0.03,\n          isActive: true,\n          isPortal,\n          particles,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateGlacialSpires(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    biome: BiomeConfig\n  ): GlacialSpireFeature[] {\n    const features: GlacialSpireFeature[] = [];\n    const spireCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 1000) * 2) + 1;\n\n    for (let i = 0; i < spireCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 10 + 1000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 10 + 1001) * chunkSize;\n\n      const snowDriftCount = 2 + Math.floor(this.seededRandom(chunkX, chunkY, i * 10 + 1010) * 3);\n      const snowDrift = [];\n      for (let j = 0; j < snowDriftCount; j++) {\n        const driftAngle = this.seededRandom(chunkX, chunkY, j * 15 + 1100) * Math.PI * 2;\n        const driftDist = 40 + this.seededRandom(chunkX, chunkY, j * 15 + 1101) * 60;\n        snowDrift.push({\n          offset: createVector(\n            Math.cos(driftAngle) * driftDist,\n            Math.sin(driftAngle) * driftDist\n          ),\n          size: 20 + this.seededRandom(chunkX, chunkY, j * 15 + 1102) * 40,\n          angle: this.seededRandom(chunkX, chunkY, j * 15 + 1103) * Math.PI * 2,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'glacial-spire',\n        position: createVector(x, y),\n        size: 100,\n        rotation:\n          this.seededRandom(chunkX, chunkY, i * 10 + 1002) * Math.PI * 2,\n        data: {\n          height: 120 + this.seededRandom(chunkX, chunkY, i * 10 + 1003) * 180,\n          baseWidth: 60 + this.seededRandom(chunkX, chunkY, i * 10 + 1004) * 80,\n          segments:\n            5 +\n            Math.floor(this.seededRandom(chunkX, chunkY, i * 10 + 1005) * 4),\n          iceColor: biome.accentColor,\n          shatterTimer: 0,\n          shatterCooldown: 10,\n          canShatter: true,\n          shardCount: 8,\n          snowDrift,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateLavaPillars(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    _biome: BiomeConfig\n  ): LavaPillarFeature[] {\n    const features: LavaPillarFeature[] = [];\n    const pillarCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 2000) * 2) + 1;\n\n    for (let i = 0; i < pillarCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 20 + 2000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 20 + 2001) * chunkSize;\n\n      features.push({\n        id: generateId(),\n        type: 'lava-pillar',\n        position: createVector(x, y),\n        size: 80,\n        rotation: 0,\n        data: {\n          height: 100 + this.seededRandom(chunkX, chunkY, i * 20 + 2002) * 150,\n          width: 50 + this.seededRandom(chunkX, chunkY, i * 20 + 2003) * 50,\n          glowIntensity:\n            20 + this.seededRandom(chunkX, chunkY, i * 20 + 2004) * 20,\n          bubblingSpeed:\n            0.03 + this.seededRandom(chunkX, chunkY, i * 20 + 2005) * 0.02,\n          eruptionTimer: this.seededRandom(chunkX, chunkY, i * 20 + 2006) * 5,\n          eruptionCooldown:\n            5 + this.seededRandom(chunkX, chunkY, i * 20 + 2007) * 3,\n          isErupting: false,\n          eruptionDuration: 1.5,\n          lavaParticles: [],\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateToxicPools(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    _biome: BiomeConfig\n  ): ToxicPoolFeature[] {\n    const features: ToxicPoolFeature[] = [];\n    const poolCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 3000) * 2) + 1;\n\n    for (let i = 0; i < poolCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 30 + 3000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 30 + 3001) * chunkSize;\n      const radius =\n        60 + this.seededRandom(chunkX, chunkY, i * 30 + 3002) * 100;\n\n      const bubbleCount =\n        5 + Math.floor(this.seededRandom(chunkX, chunkY, i * 30 + 3003) * 6);\n      const bubbles = [];\n\n      for (let j = 0; j < bubbleCount; j++) {\n        const angle =\n          this.seededRandom(chunkX, chunkY, j * 40 + 3100) * Math.PI * 2;\n        const dist =\n          this.seededRandom(chunkX, chunkY, j * 40 + 3101) * radius * 0.8;\n\n        bubbles.push({\n          offset: createVector(Math.cos(angle) * dist, Math.sin(angle) * dist),\n          size: 5 + this.seededRandom(chunkX, chunkY, j * 40 + 3102) * 15,\n          speed: 0.5 + this.seededRandom(chunkX, chunkY, j * 40 + 3103) * 1.5,\n        });\n      }\n\n      const miasmaCount = 2 + Math.floor(this.seededRandom(chunkX, chunkY, i * 30 + 3050) * 3);\n      const miasma = [];\n      for (let j = 0; j < miasmaCount; j++) {\n        const miasmaAngle = this.seededRandom(chunkX, chunkY, j * 45 + 3200) * Math.PI * 2;\n        const miasmaDist = this.seededRandom(chunkX, chunkY, j * 45 + 3201) * radius * 0.5;\n        miasma.push({\n          offset: createVector(Math.cos(miasmaAngle) * miasmaDist, Math.sin(miasmaAngle) * miasmaDist),\n          radius: 30 + this.seededRandom(chunkX, chunkY, j * 45 + 3202) * 50,\n          pulseSpeed: 0.5 + this.seededRandom(chunkX, chunkY, j * 45 + 3203) * 1.0,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'toxic-pool',\n        position: createVector(x, y),\n        size: radius * 2,\n        rotation: 0,\n        data: {\n          radius,\n          damagePerSecond: 8,\n          slowFactor: 0.6,\n          bubbles,\n          miasma,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateCrystalFormations(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    biome: BiomeConfig\n  ): CrystalFormationFeature[] {\n    const features: CrystalFormationFeature[] = [];\n    const formationCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 4000) * 2) + 1;\n\n    for (let i = 0; i < formationCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 50 + 4000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 50 + 4001) * chunkSize;\n\n      const crystalCount =\n        4 + Math.floor(this.seededRandom(chunkX, chunkY, i * 50 + 4002) * 5);\n      const crystals = [];\n\n      for (let j = 0; j < crystalCount; j++) {\n        const angle =\n          this.seededRandom(chunkX, chunkY, j * 60 + 4100) * Math.PI * 2;\n        const dist = this.seededRandom(chunkX, chunkY, j * 60 + 4101) * 80;\n\n        crystals.push({\n          offset: createVector(Math.cos(angle) * dist, Math.sin(angle) * dist),\n          height: 60 + this.seededRandom(chunkX, chunkY, j * 60 + 4102) * 120,\n          width: 20 + this.seededRandom(chunkX, chunkY, j * 60 + 4103) * 40,\n          angle:\n            (this.seededRandom(chunkX, chunkY, j * 60 + 4104) * Math.PI) / 6 -\n            Math.PI / 12,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'crystal-formation',\n        position: createVector(x, y),\n        size: 160,\n        rotation: 0,\n        data: {\n          crystals,\n          glowColor: biome.accentColor,\n          resonanceTimer: 0,\n          resonanceCooldown: 8,\n          isResonating: false,\n          damageAmplification: 1.5,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateCoralReefs(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    _biome: BiomeConfig\n  ): CoralReefFeature[] {\n    const features: CoralReefFeature[] = [];\n    const reefCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 7000) * 2) + 1;\n\n    for (let i = 0; i < reefCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 70 + 7000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 70 + 7001) * chunkSize;\n\n      const branchCount =\n        4 + Math.floor(this.seededRandom(chunkX, chunkY, i * 70 + 7002) * 6);\n      const branches = [];\n\n      for (let j = 0; j < branchCount; j++) {\n        const baseAngle = (j / branchCount) * Math.PI * 2;\n\n        branches.push({\n          offset: createVector(0, 0),\n          length: 40 + this.seededRandom(chunkX, chunkY, j * 80 + 7101) * 80,\n          angle:\n            baseAngle +\n            (this.seededRandom(chunkX, chunkY, j * 80 + 7102) - 0.5) * 0.5,\n          thickness: 8 + this.seededRandom(chunkX, chunkY, j * 80 + 7103) * 12,\n        });\n      }\n\n      const waterPoolCount = 1 + Math.floor(this.seededRandom(chunkX, chunkY, i * 70 + 7050) * 2);\n      const waterPools = [];\n      for (let j = 0; j < waterPoolCount; j++) {\n        const poolAngle = this.seededRandom(chunkX, chunkY, j * 85 + 7150) * Math.PI * 2;\n        const poolDist = this.seededRandom(chunkX, chunkY, j * 85 + 7151) * 150;\n        waterPools.push({\n          offset: createVector(\n            Math.cos(poolAngle) * poolDist,\n            Math.sin(poolAngle) * poolDist\n          ),\n          radius: 80 + this.seededRandom(chunkX, chunkY, j * 85 + 7152) * 120,\n        });\n      }\n\n      const fishSchoolCount = 1 + Math.floor(this.seededRandom(chunkX, chunkY, i * 70 + 7060) * 2);\n      const fishSchools = [];\n      for (let j = 0; j < fishSchoolCount; j++) {\n        const schoolAngle = this.seededRandom(chunkX, chunkY, j * 90 + 7200) * Math.PI * 2;\n        const schoolDist = this.seededRandom(chunkX, chunkY, j * 90 + 7201) * 120;\n        fishSchools.push({\n          offset: createVector(\n            Math.cos(schoolAngle) * schoolDist,\n            Math.sin(schoolAngle) * schoolDist\n          ),\n          count: 3 + Math.floor(this.seededRandom(chunkX, chunkY, j * 90 + 7202) * 3),\n          speed: 0.5 + this.seededRandom(chunkX, chunkY, j * 90 + 7203) * 1.0,\n          angle: this.seededRandom(chunkX, chunkY, j * 90 + 7204) * Math.PI * 2,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'coral-reef',\n        position: createVector(x, y),\n        size: 120,\n        rotation:\n          this.seededRandom(chunkX, chunkY, i * 70 + 7003) * Math.PI * 2,\n        data: {\n          branches,\n          swaySpeed:\n            0.015 + this.seededRandom(chunkX, chunkY, i * 70 + 7004) * 0.01,\n          healingRate: 2,\n          healingRadius: 100,\n          waterPools,\n          fishSchools,\n        },\n      });\n    }\n\n    return features;\n  }\n\n  private generateBloomTrees(\n    chunkX: number,\n    chunkY: number,\n    worldX: number,\n    worldY: number,\n    chunkSize: number,\n    _biome: BiomeConfig\n  ): BloomTreeFeature[] {\n    const features: BloomTreeFeature[] = [];\n    const treeCount =\n      Math.floor(this.seededRandom(chunkX, chunkY, 8000) * 2) + 1;\n\n    for (let i = 0; i < treeCount; i++) {\n      const x =\n        worldX + this.seededRandom(chunkX, chunkY, i * 90 + 8000) * chunkSize;\n      const y =\n        worldY + this.seededRandom(chunkX, chunkY, i * 90 + 8001) * chunkSize;\n\n      const fallingPetalCount = 3 + Math.floor(this.seededRandom(chunkX, chunkY, i * 90 + 8010) * 5);\n      const fallingPetals = [];\n      for (let j = 0; j < fallingPetalCount; j++) {\n        const petalX = (this.seededRandom(chunkX, chunkY, j * 95 + 8100) - 0.5) * 200;\n        const petalY = -this.seededRandom(chunkX, chunkY, j * 95 + 8101) * 100;\n        fallingPetals.push({\n          offset: createVector(petalX, petalY),\n          velocity: createVector(\n            (this.seededRandom(chunkX, chunkY, j * 95 + 8102) - 0.5) * 0.5,\n            0.5 + this.seededRandom(chunkX, chunkY, j * 95 + 8103) * 0.5\n          ),\n          rotation: this.seededRandom(chunkX, chunkY, j * 95 + 8104) * Math.PI * 2,\n          size: 5 + this.seededRandom(chunkX, chunkY, j * 95 + 8105) * 10,\n        });\n      }\n\n      features.push({\n        id: generateId(),\n        type: 'bloom-tree',\n        position: createVector(x, y),\n        size: 150,\n        rotation: 0,\n        data: {\n          trunkHeight:\n            80 + this.seededRandom(chunkX, chunkY, i * 90 + 8002) * 80,\n          trunkWidth:\n            20 + this.seededRandom(chunkX, chunkY, i * 90 + 8003) * 20,\n          canopyRadius:\n            60 + this.seededRandom(chunkX, chunkY, i * 90 + 8004) * 60,\n          petalCount:\n            8 +\n            Math.floor(this.seededRandom(chunkX, chunkY, i * 90 + 8005) * 8),\n          glowColor: '#fde047',\n          energyRegenRate: 0.5,\n          energyRadius: 120,\n          pulseTimer: 0,\n          fallingPetals,\n        },\n      });\n    }\n\n    return features;\n  }\n}\n","size_bytes":26515},"src/game/WeaponCrateSystem.ts":{"content":"import { Weapon, WeaponType } from '../types/game';\nimport { generateId, getRandomAdjective } from './utils';\nimport { WeaponPerk, getRandomPerks, applyPerkToWeapon } from './WeaponPerks';\nimport { GrapplingHookPerk, getRandomGrapplingPerks, applyGrapplingPerkToWeapon, DEFAULT_GRAPPLING_STATS } from './GrapplingHookPerks';\nimport { WEAPON_DEFINITIONS } from './WeaponDefinitions';\n\nexport interface WeaponCrate {\n  id: string;\n  weapon: Weapon;\n  perks: (WeaponPerk | GrapplingHookPerk)[];\n}\n\nconst MELEE_WEAPON_TYPES: WeaponType[] = [\n  'void_blade',\n  'crimson_scythe',\n  'titan_hammer',\n  'flowing_glaive',\n  'shadow_daggers',\n  'berserker_axe',\n  'guardian_blade',\n];\n\nexport class WeaponCrateSystem {\n  generateWeaponCrate(): WeaponCrate {\n    const weaponTypes = Object.keys(WEAPON_DEFINITIONS) as WeaponType[];\n    const randomType =\n      weaponTypes[Math.floor(Math.random() * weaponTypes.length)];\n\n    const baseWeapon = WEAPON_DEFINITIONS[randomType];\n\n    const perkCount = this.rollPerkCount();\n\n    let weapon: Weapon = {\n      ...baseWeapon,\n      id: generateId(),\n      perks: [],\n    };\n\n    let perks: (WeaponPerk | GrapplingHookPerk)[];\n\n    if (randomType === 'grappling_hook') {\n      const grapplingPerks = getRandomGrapplingPerks(perkCount);\n      perks = grapplingPerks;\n\n      let stats = weapon.grapplingStats || { ...DEFAULT_GRAPPLING_STATS };\n      grapplingPerks.forEach((perk) => {\n        stats = applyGrapplingPerkToWeapon(stats, perk);\n      });\n      weapon.grapplingStats = stats;\n      weapon.maxRange = stats.maxRange;\n      weapon.fireRate = stats.cooldown;\n    } else if (MELEE_WEAPON_TYPES.includes(randomType)) {\n      const meleePerks = getRandomPerks(perkCount, 'melee');\n      perks = meleePerks;\n      meleePerks.forEach((perk) => {\n        weapon = applyPerkToWeapon(weapon, perk);\n      });\n    } else {\n      const weaponPerks = getRandomPerks(perkCount, 'ranged');\n      perks = weaponPerks;\n      weaponPerks.forEach((perk) => {\n        weapon = applyPerkToWeapon(weapon, perk);\n      });\n    }\n\n    weapon.perks = perks;\n\n    //const perkNames = perks.map(p => p.name).join(' + ');\n    const adj = getRandomAdjective();\n    // 2. Only rename if a valid adjective was successfully fetched\n    console.log(adj);\n    weapon.name = `${adj} ${weapon.name}`;\n\n    return {\n      id: generateId(),\n      weapon,\n      perks,\n    };\n  }\n\n  private rollPerkCount(): number {\n    const roll = Math.random();\n\n    if (roll < 0.15) return 1;\n    if (roll < 0.35) return 2;\n    if (roll < 0.6) return 3;\n    if (roll < 0.85) return 4;\n    return 5;\n  }\n\n  getCrateCost(): number {\n    return 1;\n  }\n}\n","size_bytes":2643},"replit.md":{"content":"# MechaRyan Game\n\n## Overview\nMechaRyan is a top-down action survival game built with React, TypeScript, and Vite. Players control a mech character navigating through various biomes, fighting enemies, collecting resources, crafting weapons, and upgrading their equipment.\n\n## Project Structure\n- **Frontend**: React + TypeScript + Vite\n- **Styling**: Tailwind CSS\n- **Icons**: Lucide React\n- **State Management**: React hooks\n- **Build Tool**: Vite\n\n## Tech Stack\n- React 18.3.1\n- TypeScript 5.5.3\n- Vite 5.4.2\n- Tailwind CSS 3.4.1\n- Supabase JS (for potential future backend integration)\n\n## Key Features\n- Real-time game engine with canvas rendering\n- Multiplayer support with smooth position interpolation and PvP toggle\n- Weapon system with perks and upgrades\n- Advanced melee combat system with visual effects and movement mechanics\n- Randomizable melee weapon Forms system (all Forms can roll on any melee weapon)\n- Melee weapon Forms with player movement (dash, lunge effects)\n- Projectile deflection mechanics for melee weapons\n- Crafting and inventory management\n- Multiple biomes with unique features and clustered resource spawning\n- Wave-based enemy system with 8 unique miniboss encounters\n- Miniboss system with phase-based behaviors, unique attacks, and guaranteed loot drops\n- Admin mode for testing\n- Optimized touch controls for mobile devices\n- Resource gathering and trading\n\n## Development\nThe project is configured to run on Replit with:\n- Development server on port 5000\n- Host binding to 0.0.0.0 for Replit proxy\n- HMR configured for the Replit environment\n\n## Scripts\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run lint` - Run ESLint\n- `npm run typecheck` - Type check without emitting\n\n## Deployment\nConfigured for Replit Autoscale deployment:\n- Build command: `npm run build`\n- Run command: `npm run preview`\n- Deployment type: Autoscale (stateless web application)\n\n## Game Controls\n- **WASD/Arrow Keys**: Move character\n- **Mouse**: Aim and shoot\n- **Space**: Dash\n- **I**: Open inventory\n- **C**: Open crafting menu\n- **F**: Interact with objects\n- **1-9**: Switch weapons\n\n## Current State\n- Project successfully set up in Replit environment\n- All dependencies installed\n- Development server running on port 5000\n- Game fully functional with all systems operational\n- Deployment configuration complete\n\n## Recent Changes\n- October 29, 2025: UI & Drone Balance Overhaul\n  - **UI Simplification**: Removed score display, condensed health/dash into single compact card, moved currency to Resources inventory tab\n  - **Drone Size & Spacing Fixes**: Reduced drone sizes from 10-14 to 6-8 units, increased orbit radius from 50-75 to 80-115 units, increased hover offset from 40 to 80 units to prevent player overlap\n  - **Drone Visual Enhancement**: Enhanced all 15 drone types with multiple colors, overlapping geometric shapes, and unique layered patterns for better visual distinction\n  - **Drone Balance**: Nerfed all drone weapon damage across the board (assault 15→5, plasma 25→8, cryo 12→4, explosive 30→10, tesla 15→6, sniper 40→12, laser 30→10, void 20→7, swarm 8→3, etc.)\n  - **Drone Active Abilities**: Fully implemented gameplay-focused active abilities for all drones:\n    - Shield: Emergency shield bubble (blocks all damage for 3s on takeDamage)\n    - Medic: Creates healing pool (150 radius, 15 HP/sec, 6s duration)\n    - Sniper: Tactical mode (slow movement, 3x damage/range, 6s duration)\n    - Cryo: Ice Nova (freezes all enemies in 300 radius for 3s on dash)\n    - EMP: EMP Blast (stuns all enemies in 350 radius for 4s on weapon swap)\n    - Swarm: Deploys 20 mini-drones to attack enemies\n  - **Note**: Some advanced rendering (healing pools, swarm visuals, frozen/stunned enemy effects) implemented but need visual polish\n\n- October 29, 2025: Drone Visual Overhaul & Effect System\n  - **Visual Rendering System**: Completely redesigned drone visuals with new DroneRenderer class\n    - Drones now render as floating geometric shapes: triangles (assault), circles (shield/scout), squares (repair), diamonds (sniper/laser), hexagons (gravity/tesla/void), and stars (cryo/emp/swarm)\n    - Added orbit/spin/hover animations with smooth interpolation\n    - Implemented glow effects for each drone type matching their colors\n  - **Health System Removal**: Removed HP system from drones - they're now purely visual/effect-based companions\n  - **Attack Capability Clarification**: Distinguished 10 attack drones (assault, plasma, sniper, laser, explosive, tesla, void, cryo, emp, swarm) from 5 support-only drones (shield, repair, scout, gravity, medic)\n  - **Passive Effects Implementation**: Created passive effects system in GameEngine\n    - Repair/Medic drones: HP regeneration over time (2 HP/sec and 3 HP/sec respectively)\n    - Shield drone: 20% damage absorption calculated from max health\n    - Effects apply continuously while drones are equipped\n  - **Architecture**: Integrated DroneRenderer into GameCanvas rendering pipeline, removed obsolete applyDroneSpecialAbilities method\n\n- October 29, 2025: Melee Perk System Fix & Drone Inventory UI\n  - **Unified Weapon Perk System**: Merged all weapon perks into a single system with `weaponCategory` field ('melee' or 'ranged')\n  - **Category-Aware Perk Application**: Modified WeaponCrateSystem to detect melee weapon types and apply only category-appropriate perks\n  - **Melee Weapon Exclusivity**: Ensured melee weapons (void_blade, crimson_scythe, titan_hammer, flowing_glaive, shadow_daggers, berserker_axe, guardian_blade) can ONLY roll melee-specific perks\n  - **Drone Inventory Display**: Added comprehensive drone section to inventory UI (press 'I' key) showing:\n    - Equipped drones in left panel with empty slots\n    - Stowed drones in right panel with equip functionality\n    - DroneCard component displaying stats, passive/active effects, descriptions\n    - Equip/unequip/delete handlers integrated with GameEngine state management\n\n- October 29, 2025: Drone System & Miniboss AI Improvements\n  - **Drone Inventory UI**: Added dedicated drone section to inventory screen with equip/unequip/delete functionality matching weapon inventory patterns\n  - **Drone Crafting Fix**: Fixed drone crafting to properly route drones to inventory instead of consumables tab using DroneType check\n  - **Miniboss AI Overhaul**: Completely redesigned miniboss movement AI with strategic positioning:\n    - Kiting behavior at close range (strafe sideways while backing away)\n    - Circling behavior at optimal attack range (orbit around player)\n    - Pursuit behavior at far range (chase player)\n    - Optimal range calculation per miniboss type for balanced encounters\n    - Telegraph slowdown and dash cancellation for fair telegraphed attacks\n  - **Melee Weapon Perks Expansion**: Added 15+ new melee-specific perks including:\n    - Riposte Master (counterattack on taking damage)\n    - Sweeping Fury, Precision Striker, Reaper Spin (swing angle modifiers)\n    - Finishing Blow, Crushing Blow (special combo/execution perks)\n    - Dance of Blades, Master's Technique (combo count modifiers)\n    - Whirling Dervish, Lunging Strike (movement-based perks)\n    - Steel Tempest, Blade Echo, Vorpal Edge (legendary effects)\n  - **Drone Effects Enhancement**: Enhanced all 15 drone types with detailed passive and active effects:\n    - Assault Drone: +15% player damage passive, burst fire active\n    - Shield Drone: 20% damage absorption passive, emergency shield bubble active\n    - Repair/Medic Drones: HP regeneration passives, instant heal actives\n    - Scout Drone: Detection range passive, enemy marking active\n    - Plasma Drone: Piercing passive, overcharge active\n    - Tesla Drone: Chain lightning passive, tesla storm active\n    - And more unique effects for all drone types with balanced cooldowns\n\n- October 28, 2025: Miniboss System Implementation\n  - **8 Unique Minibosses**: Implemented biome-specific miniboss encounters (Angulodon, Cryostag Vanguard, Pyroclast Behemoth, Mirelurker Matron, Prism Guardian, Null Siren, Solstice Warden, Rift Revenant)\n  - **Biome-Feature Spawning**: Minibosses spawn based on biome features (e.g., Angulodon only near coral reefs, Cryostag at glacial spires)\n  - **Phase-Based Behavior**: Each miniboss has 2-3 phases that change their attack patterns as health decreases\n  - **Unique Attack Patterns**: 4+ unique attacks per miniboss with telegraphs and cooldowns\n  - **Special Mechanics**: Implemented unique mechanics like Angulodon's fin/submerged state, whirlpool attacks, Cryostag's armor system, Pyroclast's shield, and orbital weapons\n  - **Guaranteed Loot**: Minibosses drop guaranteed singularity cores plus biome-specific resources and optional weapons\n  - **Spawn Management**: Wave-based spawn conditions with per-feature cooldowns to prevent spam\n  - **Integration**: Fully integrated into GameEngine with spawn checking, update loops, and death handling\n\n- October 28, 2025: Multiplayer Sync & UI Overhaul\n  - **Position Synchronization Fix**: Implemented immediate position sync messages (`PlayerPositionSync`) for spawning, respawning, and teleporting events to prevent position mismatch between host and remote player views\n  - **Death Detection Fix**: Added centralized `checkPlayerDeath()` method called after all damage sources (environmental hazards, projectiles, enemy collisions) to prevent negative health survival bug\n  - **Destiny 2-Style Inventory UI**: Complete redesign with hover-based stowed weapon display and weapon swapping via slot selection\n  - **Melee Weapon Stats**: Added range stat to all weapon cards, stance (Form) display, and description text for melee weapons\n\n- October 28, 2025: PvP and Melee Combat Overhaul\n  - **PvP Toggle System**: Added multiplayer PvP toggle allowing players to damage each other when enabled\n  - **Projectile PvP System**: Implemented playerId tracking on projectiles to enable fair cross-player damage\n  - **Melee Visual Improvements**: \n    - Removed sword visual rendering for cleaner aesthetic\n    - Added crosshair indicator showing melee weapon range\n    - Made swipe trails thinner (lineWidth reduced from 20 to 6) with enhanced particle effects\n  - **Melee Combat Redesign**:\n    - Increased all swing durations by 2.5x for more deliberate, tactical gameplay\n    - Added player movement mechanics to Forms (dash forward, lunge effects)\n    - Made Forms randomizable - any melee weapon can roll any Form as a perk\n  - **World Generation Improvements**:\n    - Enhanced pearl spawning to cluster near coral reef features (95% spawn rate, 20-70 unit radius)\n    - Improved cryo kelp spawning near glacial spires (95% spawn rate, 30-90 unit radius)\n\n- October 28, 2025: Multiplayer and Melee Combat Expansion\n  - Fixed multiplayer position desync with smooth interpolation system\n  - Optimized touch controls with ref-based event handlers\n  - Added visual melee weapon rendering (sword models, swipe animations, particle trails)\n  - Implemented Forms system for melee combos (7 unique Forms)\n  - Added 6 new unique melee weapons (Crimson Scythe, Titan Hammer, Flowing Glaive, Shadow Daggers, Berserker Axe, Guardian Blade)\n  - Added 10 new melee weapon perks including legendary Projectile Deflection\n  - Implemented functional projectile deflection that reverses enemy projectiles during sword swings\n  \n- October 27, 2025: Initial Replit setup\n  - Configured Vite for Replit environment (port 5000, host 0.0.0.0)\n  - Updated .gitignore with standard Node.js patterns\n  - Set up development workflow\n  - Configured deployment settings\n  - Verified game functionality\n","size_bytes":11694},"src/game/MeleeWeaponRenderer.ts":{"content":"import { Player, Weapon } from '../types/game';\nimport { Camera } from './Camera';\n\nexport interface MeleeSwipeTrail {\n  positions: { x: number; y: number; alpha: number }[];\n  color: string;\n  lifetime: number;\n  maxLifetime: number;\n}\n\nexport class MeleeWeaponRenderer {\n  private swipeTrails: MeleeSwipeTrail[] = [];\n\n  drawMeleeWeapon(\n    ctx: CanvasRenderingContext2D,\n    player: Player,\n    weapon: Weapon,\n    camera: Camera,\n    isLocalPlayer: boolean = true\n  ): void {\n    if (!weapon.meleeStats) return;\n\n    const screenPos = camera.worldToScreen(player.position);\n    const angle = player.rotation;\n    const isSwinging = weapon.isSwinging || false;\n    const swingTimer = weapon.swingTimer || 0;\n    const swingDuration = weapon.meleeStats.swingDuration;\n    const range = weapon.meleeStats.range;\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    if (isSwinging && swingTimer > 0) {\n      const swingProgress = 1 - swingTimer / swingDuration;\n      const swingAngle = weapon.meleeStats.swingAngle * (Math.PI / 180);\n      const startAngle = angle - swingAngle / 2;\n      const currentSwingAngle = startAngle + swingAngle * swingProgress;\n\n      this.drawSwipe(ctx, weapon, range, startAngle, currentSwingAngle, swingAngle, swingProgress);\n    } else {\n      this.drawCrosshair(ctx, weapon, range, angle);\n    }\n\n    ctx.restore();\n  }\n\n  private drawCrosshair(\n    ctx: CanvasRenderingContext2D,\n    weapon: Weapon,\n    range: number,\n    angle: number\n  ): void {\n    ctx.save();\n    ctx.rotate(angle);\n\n    const centerX = range * 0.7;\n    const size = 10;\n    \n    // Draw geometric diamond shape\n    ctx.strokeStyle = weapon.color + '80';\n    ctx.lineWidth = 2;\n    \n    // Outer diamond\n    ctx.beginPath();\n    ctx.moveTo(centerX, -size);\n    ctx.lineTo(centerX + size, 0);\n    ctx.lineTo(centerX, size);\n    ctx.lineTo(centerX - size, 0);\n    ctx.closePath();\n    ctx.stroke();\n    \n    // Inner square\n    const innerSize = size * 0.4;\n    ctx.beginPath();\n    ctx.rect(centerX - innerSize, -innerSize, innerSize * 2, innerSize * 2);\n    ctx.stroke();\n    \n    // Corner markers\n    const markerDist = size * 1.4;\n    const markerSize = 3;\n    ctx.lineWidth = 2;\n    \n    // Top-right corner\n    ctx.beginPath();\n    ctx.moveTo(centerX + markerDist, -markerDist);\n    ctx.lineTo(centerX + markerDist, -markerDist + markerSize);\n    ctx.moveTo(centerX + markerDist, -markerDist);\n    ctx.lineTo(centerX + markerDist - markerSize, -markerDist);\n    ctx.stroke();\n    \n    // Top-left corner\n    ctx.beginPath();\n    ctx.moveTo(centerX - markerDist, -markerDist);\n    ctx.lineTo(centerX - markerDist, -markerDist + markerSize);\n    ctx.moveTo(centerX - markerDist, -markerDist);\n    ctx.lineTo(centerX - markerDist + markerSize, -markerDist);\n    ctx.stroke();\n    \n    // Bottom-right corner\n    ctx.beginPath();\n    ctx.moveTo(centerX + markerDist, markerDist);\n    ctx.lineTo(centerX + markerDist, markerDist - markerSize);\n    ctx.moveTo(centerX + markerDist, markerDist);\n    ctx.lineTo(centerX + markerDist - markerSize, markerDist);\n    ctx.stroke();\n    \n    // Bottom-left corner\n    ctx.beginPath();\n    ctx.moveTo(centerX - markerDist, markerDist);\n    ctx.lineTo(centerX - markerDist, markerDist - markerSize);\n    ctx.moveTo(centerX - markerDist, markerDist);\n    ctx.lineTo(centerX - markerDist + markerSize, markerDist);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private drawSwipe(\n    ctx: CanvasRenderingContext2D,\n    weapon: Weapon,\n    range: number,\n    startAngle: number,\n    currentAngle: number,\n    totalSwingAngle: number,\n    progress: number\n  ): void {\n    const trailRadius = range * 0.75;\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(0, 0, trailRadius, startAngle, currentAngle, false);\n    \n    const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, trailRadius);\n    gradient.addColorStop(0, 'transparent');\n    gradient.addColorStop(0.8, weapon.color + '30');\n    gradient.addColorStop(1, weapon.color + '60');\n    \n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 6;\n    ctx.lineCap = 'round';\n    ctx.shadowColor = weapon.color;\n    ctx.shadowBlur = 15;\n    ctx.stroke();\n\n    const steps = Math.ceil(totalSwingAngle * 15);\n    for (let i = 0; i <= steps * progress; i++) {\n      const a = startAngle + (totalSwingAngle * progress * (i / steps));\n      const particleAlpha = Math.floor((1 - i / steps) * 180).toString(16).padStart(2, '0');\n      const x = Math.cos(a) * trailRadius;\n      const y = Math.sin(a) * trailRadius;\n      \n      const size = 2 + Math.random() * 2;\n      ctx.fillStyle = weapon.color + particleAlpha;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n      \n      if (Math.random() < 0.3) {\n        ctx.fillStyle = this.lightenColor(weapon.color, 60) + particleAlpha;\n        ctx.beginPath();\n        ctx.arc(x + (Math.random() - 0.5) * 10, y + (Math.random() - 0.5) * 10, size * 0.5, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  private lightenColor(color: string, percent: number): string {\n    const num = parseInt(color.replace('#', ''), 16);\n    const amt = Math.round(2.55 * percent);\n    const R = Math.min(255, (num >> 16) + amt);\n    const G = Math.min(255, ((num >> 8) & 0x00ff) + amt);\n    const B = Math.min(255, (num & 0x0000ff) + amt);\n    return `#${((1 << 24) + (R << 16) + (G << 8) + B).toString(16).slice(1)}`;\n  }\n\n  drawSwipeTrails(ctx: CanvasRenderingContext2D, camera: Camera): void {\n    this.swipeTrails = this.swipeTrails.filter(trail => trail.lifetime > 0);\n\n    this.swipeTrails.forEach(trail => {\n      const alpha = trail.lifetime / trail.maxLifetime;\n      \n      ctx.save();\n      ctx.globalAlpha = alpha;\n      ctx.strokeStyle = trail.color;\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n\n      if (trail.positions.length > 1) {\n        ctx.beginPath();\n        const firstPos = camera.worldToScreen(trail.positions[0]);\n        ctx.moveTo(firstPos.x, firstPos.y);\n\n        for (let i = 1; i < trail.positions.length; i++) {\n          const pos = camera.worldToScreen(trail.positions[i]);\n          ctx.lineTo(pos.x, pos.y);\n        }\n\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    });\n  }\n\n  updateSwipeTrails(deltaTime: number): void {\n    this.swipeTrails.forEach(trail => {\n      trail.lifetime -= deltaTime;\n    });\n  }\n\n  addSwipeTrail(startPos: { x: number; y: number }, endPos: { x: number; y: number }, color: string): void {\n    const positions: { x: number; y: number; alpha: number }[] = [];\n    const steps = 10;\n\n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps;\n      positions.push({\n        x: startPos.x + (endPos.x - startPos.x) * t,\n        y: startPos.y + (endPos.y - startPos.y) * t,\n        alpha: 1 - t * 0.5,\n      });\n    }\n\n    this.swipeTrails.push({\n      positions,\n      color,\n      lifetime: 0.3,\n      maxLifetime: 0.3,\n    });\n  }\n\n  clearTrails(): void {\n    this.swipeTrails = [];\n  }\n}\n","size_bytes":7002},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":81},"src/game/CollisionSystem.ts":{"content":"import { Vector2, Entity, Projectile } from '../types/game';\nimport { Obstacle } from './Environments';\nimport { vectorAdd, vectorScale, vectorNormalize, vectorSubtract } from './utils';\n\nexport interface AABB {\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n}\n\nexport function getEntityAABB(entity: Entity): AABB {\n  const halfSize = entity.size / 2;\n  return {\n    minX: entity.position.x - halfSize,\n    maxX: entity.position.x + halfSize,\n    minY: entity.position.y - halfSize,\n    maxY: entity.position.y + halfSize,\n  };\n}\n\nexport function getObstacleAABB(obstacle: Obstacle): AABB {\n  if (obstacle.shape === 'circle') {\n    const radius = obstacle.size.x / 2;\n    return {\n      minX: obstacle.position.x - radius,\n      maxX: obstacle.position.x + radius,\n      minY: obstacle.position.y - radius,\n      maxY: obstacle.position.y + radius,\n    };\n  }\n\n  const halfWidth = obstacle.size.x / 2;\n  const halfHeight = obstacle.size.y / 2;\n\n  if (obstacle.rotation === 0) {\n    return {\n      minX: obstacle.position.x - halfWidth,\n      maxX: obstacle.position.x + halfWidth,\n      minY: obstacle.position.y - halfHeight,\n      maxY: obstacle.position.y + halfHeight,\n    };\n  }\n\n  const cos = Math.cos(obstacle.rotation);\n  const sin = Math.sin(obstacle.rotation);\n  const corners = [\n    { x: -halfWidth, y: -halfHeight },\n    { x: halfWidth, y: -halfHeight },\n    { x: -halfWidth, y: halfHeight },\n    { x: halfWidth, y: halfHeight },\n  ];\n\n  const rotatedCorners = corners.map((c) => ({\n    x: obstacle.position.x + c.x * cos - c.y * sin,\n    y: obstacle.position.y + c.x * sin + c.y * cos,\n  }));\n\n  return {\n    minX: Math.min(...rotatedCorners.map((c) => c.x)),\n    maxX: Math.max(...rotatedCorners.map((c) => c.x)),\n    minY: Math.min(...rotatedCorners.map((c) => c.y)),\n    maxY: Math.max(...rotatedCorners.map((c) => c.y)),\n  };\n}\n\nexport function checkAABBCollision(a: AABB, b: AABB): boolean {\n  return a.minX < b.maxX && a.maxX > b.minX && a.minY < b.maxY && a.maxY > b.minY;\n}\n\nexport function checkCircleRectCollision(\n  circlePos: Vector2,\n  radius: number,\n  rectPos: Vector2,\n  rectSize: Vector2,\n  rectRotation: number\n): boolean {\n  const localCircle = {\n    x: circlePos.x - rectPos.x,\n    y: circlePos.y - rectPos.y,\n  };\n\n  const cos = Math.cos(-rectRotation);\n  const sin = Math.sin(-rectRotation);\n  const rotatedCircle = {\n    x: localCircle.x * cos - localCircle.y * sin,\n    y: localCircle.x * sin + localCircle.y * cos,\n  };\n\n  const halfWidth = rectSize.x / 2;\n  const halfHeight = rectSize.y / 2;\n\n  const closestX = Math.max(-halfWidth, Math.min(halfWidth, rotatedCircle.x));\n  const closestY = Math.max(-halfHeight, Math.min(halfHeight, rotatedCircle.y));\n\n  const distX = rotatedCircle.x - closestX;\n  const distY = rotatedCircle.y - closestY;\n\n  return distX * distX + distY * distY < radius * radius;\n}\n\nexport function checkCircleCircleCollision(\n  pos1: Vector2,\n  radius1: number,\n  pos2: Vector2,\n  radius2: number\n): boolean {\n  const dx = pos1.x - pos2.x;\n  const dy = pos1.y - pos2.y;\n  const distSq = dx * dx + dy * dy;\n  const radSum = radius1 + radius2;\n  return distSq < radSum * radSum;\n}\n\nexport function checkEntityObstacleCollision(\n  entity: Entity,\n  obstacle: Obstacle\n): boolean {\n  const entityRadius = entity.size / 2;\n\n  if (obstacle.shape === 'circle') {\n    return checkCircleCircleCollision(\n      entity.position,\n      entityRadius,\n      obstacle.position,\n      obstacle.size.x / 2\n    );\n  }\n\n  return checkCircleRectCollision(\n    entity.position,\n    entityRadius,\n    obstacle.position,\n    obstacle.size,\n    obstacle.rotation\n  );\n}\n\nexport function resolveEntityObstacleCollision(\n  entity: Entity,\n  obstacle: Obstacle\n): void {\n  const entityRadius = entity.size / 2;\n\n  if (obstacle.shape === 'circle') {\n    const obstacleRadius = obstacle.size.x / 2;\n    const direction = vectorNormalize(\n      vectorSubtract(entity.position, obstacle.position)\n    );\n    const targetDist = entityRadius + obstacleRadius;\n    entity.position = vectorAdd(\n      obstacle.position,\n      vectorScale(direction, targetDist)\n    );\n  } else {\n    const localPos = {\n      x: entity.position.x - obstacle.position.x,\n      y: entity.position.y - obstacle.position.y,\n    };\n\n    const cos = Math.cos(-obstacle.rotation);\n    const sin = Math.sin(-obstacle.rotation);\n    const rotatedPos = {\n      x: localPos.x * cos - localPos.y * sin,\n      y: localPos.x * sin + localPos.y * cos,\n    };\n\n    const halfWidth = obstacle.size.x / 2;\n    const halfHeight = obstacle.size.y / 2;\n\n    const closestX = Math.max(-halfWidth, Math.min(halfWidth, rotatedPos.x));\n    const closestY = Math.max(-halfHeight, Math.min(halfHeight, rotatedPos.y));\n\n    const dx = rotatedPos.x - closestX;\n    const dy = rotatedPos.y - closestY;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n\n    if (dist < entityRadius && dist > 0) {\n      const pushX = (dx / dist) * (entityRadius - dist);\n      const pushY = (dy / dist) * (entityRadius - dist);\n\n      const worldPushX = pushX * cos + pushY * sin;\n      const worldPushY = -pushX * sin + pushY * cos;\n\n      entity.position.x += worldPushX;\n      entity.position.y += worldPushY;\n    }\n  }\n}\n\nexport function checkProjectileObstacleCollision(\n  projectile: Projectile,\n  obstacle: Obstacle\n): boolean {\n  const projectileRadius = projectile.size / 2;\n\n  if (obstacle.shape === 'circle') {\n    return checkCircleCircleCollision(\n      projectile.position,\n      projectileRadius,\n      obstacle.position,\n      obstacle.size.x / 2\n    );\n  }\n\n  return checkCircleRectCollision(\n    projectile.position,\n    projectileRadius,\n    obstacle.position,\n    obstacle.size,\n    obstacle.rotation\n  );\n}\n\nexport function calculateRicochetVelocity(\n  velocity: Vector2,\n  obstacle: Obstacle,\n  projectilePos: Vector2\n): Vector2 {\n  if (obstacle.shape === 'circle') {\n    const normal = vectorNormalize(\n      vectorSubtract(projectilePos, obstacle.position)\n    );\n    const dot = velocity.x * normal.x + velocity.y * normal.y;\n    return {\n      x: velocity.x - 2 * dot * normal.x,\n      y: velocity.y - 2 * dot * normal.y,\n    };\n  }\n\n  const localPos = {\n    x: projectilePos.x - obstacle.position.x,\n    y: projectilePos.y - obstacle.position.y,\n  };\n\n  const cos = Math.cos(-obstacle.rotation);\n  const sin = Math.sin(-obstacle.rotation);\n  const rotatedPos = {\n    x: localPos.x * cos - localPos.y * sin,\n    y: localPos.x * sin + localPos.y * cos,\n  };\n\n  const halfWidth = obstacle.size.x / 2;\n  const halfHeight = obstacle.size.y / 2;\n\n  const dx = Math.abs(rotatedPos.x) - halfWidth;\n  const dy = Math.abs(rotatedPos.y) - halfHeight;\n\n  let normal: Vector2;\n  if (dx > dy) {\n    normal = { x: rotatedPos.x > 0 ? 1 : -1, y: 0 };\n  } else {\n    normal = { x: 0, y: rotatedPos.y > 0 ? 1 : -1 };\n  }\n\n  const worldNormal = {\n    x: normal.x * cos + normal.y * sin,\n    y: -normal.x * sin + normal.y * cos,\n  };\n\n  const dot = velocity.x * worldNormal.x + velocity.y * worldNormal.y;\n  return {\n    x: velocity.x - 2 * dot * worldNormal.x,\n    y: velocity.y - 2 * dot * worldNormal.y,\n  };\n}\n","size_bytes":7096},"src/components/GameCanvas.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { GameState, Particle, Enemy, Chest, WeaponDrop, ResourceDrop, Drone } from '../types/game';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from '../game/constants';\nimport { Camera } from '../game/Camera';\nimport { ResourceNode, Portal, ExtractionPoint } from '../game/WorldGeneration';\nimport { Obstacle } from '../game/Environments';\nimport { GameEngine } from '../game/GameEngine';\nimport { BiomeParticle } from '../game/BiomeSystem';\nimport { formatResourceName } from '../game/utils';\nimport { AnyBiomeFeature } from '../game/BiomeFeatures';\nimport { BiomeFeatureRenderer } from '../game/BiomeFeatureRenderer';\nimport { ResourceIconRenderer } from '../game/ResourceIconRenderer';\nimport { renderVoidSubdivider } from '../game/VoidSubdividerRenderer';\nimport { renderMiniboss } from '../game/MinibossRenderer';\nimport { DroneRenderer } from '../game/DroneRenderer';\n\ninterface GameCanvasProps {\n  gameState: GameState;\n  camera: Camera;\n  obstacles: Obstacle[];\n  resourceNodes: ResourceNode[];\n  portals: Portal[];\n  extractionPoints: ExtractionPoint[];\n  chests: Chest[];\n  biomeFeatures: AnyBiomeFeature[];\n  gameEngineRef: React.RefObject<GameEngine | null>;\n}\n\n\nexport default function GameCanvas({\n  gameState,\n  camera,\n  obstacles,\n  resourceNodes,\n  portals,\n  extractionPoints,\n  chests,\n  biomeFeatures,\n  gameEngineRef\n}: GameCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const featureRendererRef = useRef<BiomeFeatureRenderer>(new BiomeFeatureRenderer());\n  const droneRendererRef = useRef<DroneRenderer>(new DroneRenderer());\n  const lastFrameTimeRef = useRef<number>(performance.now());\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const getMouseWorldPos = (e: MouseEvent) => {\n      const engine = gameEngineRef.current;\n      if (!engine || !canvas) return null;\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n      const mouseX = (e.clientX - rect.left) * scaleX;\n      const mouseY = (e.clientY - rect.top) * scaleY;\n      return engine.getCamera().screenToWorld({ x: mouseX, y: mouseY });\n    };\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const worldPos = getMouseWorldPos(e);\n      if (worldPos) gameEngineRef.current?.setMousePosition(worldPos);\n    };\n    const handleMouseDown = (e: MouseEvent) => {\n      const worldPos = getMouseWorldPos(e);\n      if (worldPos) {\n        gameEngineRef.current?.setMousePosition(worldPos);\n        gameEngineRef.current?.setMouseDown(true);\n      }\n    };\n    const handleMouseUp = (e: MouseEvent) => {\n      const worldPos = getMouseWorldPos(e);\n      if (worldPos) {\n        gameEngineRef.current?.setMousePosition(worldPos);\n        gameEngineRef.current?.setMouseDown(false);\n      }\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [gameEngineRef]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const engine = gameEngineRef.current;\n    if (!engine) return;\n\n    const now = performance.now();\n    const deltaTime = (now - lastFrameTimeRef.current) / 1000;\n    lastFrameTimeRef.current = now;\n\n    featureRendererRef.current.update(deltaTime);\n\n    const biomeManager = engine.getBiomeManager();\n    const displayColors = biomeManager.getDisplayColors();\n    const currentBiome = biomeManager.getCurrentBiome();\n    const envParticles = engine.getEnvironmentalParticles();\n\n    ctx.fillStyle = displayColors.backgroundColor;\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    const floorGradient = ctx.createRadialGradient(\n      CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2, 0,\n      CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2, CANVAS_WIDTH\n    );\n    floorGradient.addColorStop(0, displayColors.floorColor);\n    floorGradient.addColorStop(1, displayColors.backgroundColor);\n    ctx.fillStyle = floorGradient;\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    if (currentBiome.environmentalEffects.fog) {\n      const fog = currentBiome.environmentalEffects.fog;\n      ctx.fillStyle = fog.color;\n      ctx.globalAlpha = fog.density;\n      ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.globalAlpha = 1.0;\n    }\n\n    drawGrid(ctx, camera, displayColors.gridColor);\n\n    biomeFeatures.forEach(feature => {\n      featureRendererRef.current.renderFeature(ctx, feature, camera);\n    });\n\n    drawOminousTendrilInteract(ctx, gameEngineRef, camera, gameState);\n\n    drawObstacles(ctx, obstacles, camera, currentBiome);\n    drawResourceNodes(ctx, resourceNodes, camera, gameState, currentBiome);\n    drawChests(ctx, chests, camera, gameState);\n    drawWeaponDrops(ctx, gameState.weaponDrops, camera, gameState);\n    drawPortals(ctx, portals, camera, currentBiome, gameState);\n    drawExtractionPoints(ctx, extractionPoints, camera, currentBiome);\n    drawEnvironmentalParticles(ctx, envParticles, camera);\n\n    const activeWeapon = gameState.player.equippedWeapons[gameState.player.activeWeaponIndex];\n    if (activeWeapon?.firingMode === 'beam' && activeWeapon.isBeaming && !activeWeapon.beamOverheated) {\n      drawBeamLaser(ctx, gameState.player, activeWeapon, camera, obstacles);\n    }\n\n    if (activeWeapon?.type === 'railgun' && (activeWeapon.railgunBeamTimer || 0) > 0) {\n      drawRailgunBeam(ctx, gameState.player, activeWeapon, camera, obstacles);\n    }\n\n    gameState.particles.forEach(particle => drawParticle(ctx, particle, camera));\n    gameState.currencyDrops.forEach(drop => drawCurrency(ctx, drop, camera));\n    gameState.resourceDrops.forEach(drop => drawResourceDrop(ctx, drop, camera));\n    gameState.projectiles.forEach(projectile => {\n      const screenPos = camera.worldToScreen(projectile.position);\n      if (!camera.isInView(projectile.position)) return;\n\n      if (projectile.isChainLightning && projectile.chainLightningTarget) {\n        const targetScreenPos = camera.worldToScreen(projectile.chainLightningTarget);\n        ctx.save();\n        ctx.strokeStyle = '#a78bfa';\n        ctx.lineWidth = 3;\n        ctx.shadowBlur = 15;\n        ctx.shadowColor = '#8b5cf6';\n\n        ctx.beginPath();\n        ctx.moveTo(screenPos.x, screenPos.y);\n\n        const segments = 8;\n        const dx = (targetScreenPos.x - screenPos.x) / segments;\n        const dy = (targetScreenPos.y - screenPos.y) / segments;\n        const jitter = 15;\n\n        for (let i = 1; i <= segments; i++) {\n          const x = screenPos.x + dx * i + (Math.random() - 0.5) * jitter;\n          const y = screenPos.y + dy * i + (Math.random() - 0.5) * jitter;\n          ctx.lineTo(x, y);\n        }\n\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      ctx.save();\n\n      if (projectile.weaponType === 'laser') {\n        const angle = Math.atan2(projectile.velocity.y, projectile.velocity.x);\n        const beamLength = projectile.size * 4;\n        const beamWidth = projectile.size / 2;\n\n        ctx.translate(screenPos.x, screenPos.y);\n        ctx.rotate(angle);\n\n        const gradient = ctx.createLinearGradient(-beamLength / 2, 0, beamLength / 2, 0);\n        gradient.addColorStop(0, projectile.color + '00');\n        gradient.addColorStop(0.3, projectile.color);\n        gradient.addColorStop(0.7, projectile.color);\n        gradient.addColorStop(1, projectile.color + '00');\n\n        ctx.fillStyle = gradient;\n        ctx.shadowBlur = 25;\n        ctx.shadowColor = projectile.color;\n\n        ctx.fillRect(-beamLength / 2, -beamWidth, beamLength, beamWidth * 2);\n\n        ctx.fillStyle = '#ffffff';\n        ctx.shadowBlur = 15;\n        ctx.fillRect(-beamLength / 3, -beamWidth / 2, beamLength * 0.66, beamWidth);\n\n      } else {\n        ctx.fillStyle = projectile.color;\n\n        if (projectile.isChainLightning) {\n          ctx.shadowBlur = 25;\n          ctx.shadowColor = '#8b5cf6';\n        } else if (projectile.isCharged && projectile.chargeLevel) {\n          const glowSize = 20 + (projectile.chargeLevel * 15);\n          ctx.shadowBlur = glowSize;\n        } else if (projectile.homing) {\n          ctx.shadowBlur = 20;\n        } else if (projectile.explosive) {\n          ctx.shadowBlur = 18;\n        } else {\n          ctx.shadowBlur = 15;\n        }\n\n        ctx.shadowColor = projectile.color;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, projectile.size / 2, 0, Math.PI * 2);\n        ctx.fill();\n\n        if (projectile.homing) {\n          ctx.strokeStyle = projectile.color;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    });\n\n    const modifierSystem = engine.getModifierSystem();\n\n    gameState.enemies.forEach(enemy => {\n      drawEnemy(ctx, enemy, camera);\n      if (modifierSystem.isModifiedEnemy(enemy)) {\n        drawModifiedEnemyVisuals(ctx, enemy, camera, modifierSystem);\n        drawModifierTags(ctx, enemy, camera);\n      }\n    });\n\n    gameState.drones.forEach(drone => {\n      drawDrone(ctx, drone, camera);\n    });\n\n    const voidBoss = engine.getVoidSubdivider();\n    if (voidBoss) {\n      renderVoidSubdivider(ctx, voidBoss, camera);\n    }\n\n    drawGrapplingHook(ctx, gameState.player, camera);\n    \n    const meleeRenderer = engine.getMeleeWeaponRenderer();\n    if (activeWeapon?.meleeStats) {\n      meleeRenderer.drawMeleeWeapon(ctx, gameState.player, activeWeapon, camera, true);\n    }\n    \n    drawPlayer(ctx, gameState.player, camera);\n    \n    gameState.remotePlayers?.forEach((remotePlayer) => {\n      const remoteActiveWeapon = remotePlayer.player.equippedWeapons[remotePlayer.player.activeWeaponIndex];\n      if (remoteActiveWeapon?.meleeStats) {\n        meleeRenderer.drawMeleeWeapon(ctx, remotePlayer.player, remoteActiveWeapon, camera, false);\n      }\n      drawRemotePlayer(ctx, remotePlayer.player, camera, remotePlayer.peerId.substring(0, 8));\n    });\n    \n    drawDamageNumbers(ctx, gameState.damageNumbers, camera);\n\n  }, [gameState, camera, obstacles, resourceNodes, portals, extractionPoints, chests, biomeFeatures, gameEngineRef]);\n\n  const drawOminousTendrilInteract = (ctx: CanvasRenderingContext2D, engineRef: React.RefObject<any>, camera: Camera, gameState: GameState) => {\n    if (!engineRef.current) return;\n\n    const activeOminous = engineRef.current.getActiveOminousTendril();\n    if (!activeOminous || !activeOminous.canInteract) return;\n\n    const biomeFeatures = engineRef.current.getBiomeFeatures();\n    const feature = biomeFeatures.find((f: any) => f.id === activeOminous.featureId);\n    if (!feature || feature.type !== 'void-gap' || !feature.data.hasOminousTendril) return;\n\n    const tendrilAngle = feature.data.ominousTendrilAngle;\n    if (tendrilAngle === undefined) return;\n\n    const ominousLength = Math.max(feature.data.width, feature.data.height) * 0.8;\n    const tipWorldX = feature.position.x + Math.cos(tendrilAngle) * ominousLength;\n    const tipWorldY = feature.position.y + Math.sin(tendrilAngle) * ominousLength;\n\n    const screenPos = camera.worldToScreen({ x: tipWorldX, y: tipWorldY });\n    const distance = Math.sqrt(\n      Math.pow(gameState.player.position.x - tipWorldX, 2) +\n      Math.pow(gameState.player.position.y - tipWorldY, 2)\n    );\n\n    if (distance < 150) {\n      const alpha = Math.max(0, 1 - (distance - 50) / 100);\n      if (alpha > 0) {\n        ctx.save();\n        ctx.fillStyle = `rgba(167, 139, 250, ${alpha})`;\n        ctx.font = 'italic 12px monospace';\n        ctx.textAlign = 'center';\n        ctx.shadowColor = '#000';\n        ctx.shadowBlur = 5;\n        ctx.fillText('This plane deserves to be divided [F]', screenPos.x, screenPos.y - 25);\n        ctx.restore();\n      }\n    }\n  };\n\n  const drawGrapplingHook = (ctx: CanvasRenderingContext2D, player: typeof gameState.player, camera: Camera) => {\n    if (!player.isGrappling || !player.grappleTarget) return;\n\n    const playerScreenPos = camera.worldToScreen(player.position);\n    const targetScreenPos = camera.worldToScreen(player.grappleTarget);\n\n    ctx.save();\n    ctx.strokeStyle = '#00ffff';\n    ctx.lineWidth = 3;\n    ctx.shadowBlur = 10;\n    ctx.shadowColor = '#00ffff';\n    ctx.setLineDash([5, 5]);\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(targetScreenPos.x, targetScreenPos.y);\n    ctx.stroke();\n    ctx.setLineDash([]);\n\n    ctx.fillStyle = '#00ffff';\n    ctx.shadowBlur = 15;\n    ctx.beginPath();\n    ctx.arc(targetScreenPos.x, targetScreenPos.y, 6, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  const drawDamageNumbers = (ctx: CanvasRenderingContext2D, damageNumbers: typeof gameState.damageNumbers, camera: Camera) => {\n    damageNumbers.forEach(dn => {\n      if (!camera.isInView(dn.position)) return;\n\n      const screenPos = camera.worldToScreen(dn.position);\n      const alpha = (dn.lifetime / dn.maxLifetime) * 0.6;\n\n      ctx.save();\n      ctx.globalAlpha = alpha;\n      ctx.fillStyle = dn.color;\n      ctx.font = '11px monospace';\n      ctx.textAlign = 'center';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.lineWidth = 2;\n      ctx.strokeText(dn.text, screenPos.x, screenPos.y);\n      ctx.fillText(dn.text, screenPos.x, screenPos.y);\n      ctx.restore();\n    });\n  };\n\n  const drawGrid = (ctx: CanvasRenderingContext2D, camera: Camera, gridColor: string) => {\n    ctx.strokeStyle = gridColor;\n    ctx.lineWidth = 1;\n\n    const bounds = camera.getVisibleBounds();\n    const gridSize = 40;\n\n    const startX = Math.floor(bounds.minX / gridSize) * gridSize;\n    const startY = Math.floor(bounds.minY / gridSize) * gridSize;\n    const endX = Math.ceil(bounds.maxX / gridSize) * gridSize;\n    const endY = Math.ceil(bounds.maxY / gridSize) * gridSize;\n\n    for (let x = startX; x <= endX; x += gridSize) {\n      const screenStart = camera.worldToScreen({ x, y: bounds.minY });\n      const screenEnd = camera.worldToScreen({ x, y: bounds.maxY });\n      ctx.beginPath();\n      ctx.moveTo(screenStart.x, screenStart.y);\n      ctx.lineTo(screenEnd.x, screenEnd.y);\n      ctx.stroke();\n    }\n\n    for (let y = startY; y <= endY; y += gridSize) {\n      const screenStart = camera.worldToScreen({ x: bounds.minX, y });\n      const screenEnd = camera.worldToScreen({ x: bounds.maxX, y });\n      ctx.beginPath();\n      ctx.moveTo(screenStart.x, screenStart.y);\n      ctx.lineTo(screenEnd.x, screenEnd.y);\n      ctx.stroke();\n    }\n  };\n\n  const drawObstacles = (ctx: CanvasRenderingContext2D, obstacles: Obstacle[], camera: Camera, biome: any) => {\n    obstacles.forEach(obstacle => {\n      const maxSize = Math.max(obstacle.size.x, obstacle.size.y);\n      if (!camera.isInView(obstacle.position, maxSize)) return;\n\n      const screenPos = camera.worldToScreen(obstacle.position);\n      const pulse = Math.sin(Date.now() / 400 + screenPos.x * 0.1) * 4 + 6;\n      const obstacleColor = obstacle.color;\n\n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y);\n      ctx.rotate(obstacle.rotation);\n\n      ctx.fillStyle = obstacleColor;\n      ctx.shadowBlur = pulse;\n      ctx.shadowColor = obstacleColor;\n\n      if (obstacle.shape === 'circle') {\n        ctx.beginPath();\n        ctx.arc(0, 0, obstacle.size.x / 2, 0, Math.PI * 2);\n        ctx.fill();\n      } else {\n        ctx.fillRect(-obstacle.size.x / 2, -obstacle.size.y / 2, obstacle.size.x, obstacle.size.y);\n      }\n\n      ctx.strokeStyle = `${obstacleColor}80`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      ctx.restore();\n    });\n  };\n\n  const drawResourceNodes = (ctx: CanvasRenderingContext2D, nodes: ResourceNode[], camera: Camera, gameState: GameState, biome: any) => {\n    nodes.forEach(node => {\n      if (!camera.isInView(node.position, node.size)) return;\n\n      const screenPos = camera.worldToScreen(node.position);\n      const healthPercent = node.health / node.maxHealth;\n      const pulse = Math.sin(Date.now() / 350 + screenPos.y * 0.1) * 5 + 15;\n      const resourceColor = node.color;\n      const bobOffset = Math.sin(node.bobPhase + Date.now() / 1000) * 5;\n\n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y + bobOffset);\n\n      const shapeRadius = node.size * 0.85;\n      const colorWithAlpha = resourceColor.includes('rgb')\n        ? resourceColor.replace(')', ', 0.15)').replace('rgb', 'rgba')\n        : resourceColor + '26';\n      ctx.strokeStyle = colorWithAlpha;\n      ctx.lineWidth = 2;\n      ctx.shadowBlur = pulse * 0.6;\n      ctx.shadowColor = resourceColor;\n\n      if (node.shape === 'crystal') {\n        const sides = 6;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'geode') {\n        const sides = 8;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2 + Math.PI / 8;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'kelp') {\n        const sides = 5;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'heart') {\n        const sides = 7;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'root') {\n        ctx.beginPath();\n        ctx.arc(0, 0, shapeRadius, 0, Math.PI * 2);\n        ctx.stroke();\n      } else if (node.shape === 'pearl') {\n        ctx.beginPath();\n        ctx.arc(0, 0, shapeRadius, 0, Math.PI * 2);\n        ctx.stroke();\n      } else if (node.shape === 'bloom') {\n        const sides = 8;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'shard') {\n        const sides = 4;\n        ctx.beginPath();\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2 + Math.PI / 4;\n          const x = Math.cos(angle) * shapeRadius;\n          const y = Math.sin(angle) * shapeRadius;\n          if (i === 0) ctx.moveTo(x, y);\n          else ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n      } else if (node.shape === 'graviton') {\n        const ringCount = 3;\n        for (let i = 0; i < ringCount; i++) {\n          const ringPulse = Math.sin(Date.now() / 400 + i * 0.5) * 0.2 + 0.8;\n          const radius = shapeRadius * (0.5 + i * 0.25) * ringPulse;\n          ctx.globalAlpha = 0.8 - i * 0.2;\n          ctx.beginPath();\n          ctx.arc(0, 0, radius, 0, Math.PI * 2);\n          ctx.stroke();\n        }\n        ctx.globalAlpha = 1;\n      } else {\n        ctx.beginPath();\n        ctx.arc(0, 0, shapeRadius, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n\n      ctx.shadowBlur = 0;\n      ResourceIconRenderer.renderIcon(ctx, node.resourceType, 0, 0, node.size * 0.35);\n\n      ctx.restore();\n\n      const playerPos = gameState.player.position;\n      const distance = Math.sqrt(Math.pow(playerPos.x - node.position.x, 2) + Math.pow(playerPos.y - node.position.y, 2));\n      \n      if (distance < 150) {\n          const alpha = Math.max(0, 1 - (distance - 50) / 100);\n          if (alpha > 0) {\n              ctx.save();\n              ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n              ctx.font = 'bold 14px monospace';\n              ctx.textAlign = 'center';\n              ctx.shadowColor = '#000';\n              ctx.shadowBlur = 5;\n              ctx.fillText(`${formatResourceName(node.resourceType)} [F]`, screenPos.x, screenPos.y - node.size - 20);\n              ctx.restore();\n          }\n      }\n    });\n  };\n\n  const drawWeaponDrops = (ctx: CanvasRenderingContext2D, drops: WeaponDrop[], camera: Camera, gameState: GameState) => {\n    drops.forEach(drop => {\n      if (!camera.isInView(drop.position, drop.size * 2)) return;\n\n      const screenPos = camera.worldToScreen(drop.position);\n      const bobOffset = Math.sin(drop.bobPhase) * 8;\n      const pulse = Math.sin(Date.now() / 300) * 5 + 15;\n\n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y + bobOffset);\n      ctx.rotate(drop.rotation);\n\n      ctx.fillStyle = drop.weapon.color;\n      ctx.strokeStyle = '#ffffff';\n      ctx.shadowColor = drop.weapon.color;\n      ctx.shadowBlur = pulse;\n      ctx.lineWidth = 3;\n\n      ctx.beginPath();\n      ctx.moveTo(drop.size / 2, 0);\n      ctx.lineTo(0, -drop.size / 3);\n      ctx.lineTo(-drop.size / 2, 0);\n      ctx.lineTo(0, drop.size / 3);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 10px monospace';\n      ctx.textAlign = 'center';\n      ctx.fillText(drop.weapon.type.toUpperCase(), 0, 3);\n\n      ctx.restore();\n\n      const playerPos = gameState.player.position;\n      const distance = Math.sqrt(Math.pow(playerPos.x - drop.position.x, 2) + Math.pow(playerPos.y - drop.position.y, 2));\n\n      if (distance < drop.size * 3) {\n        const alpha = Math.max(0, 1 - (distance - drop.size) / (drop.size * 2));\n        if (alpha > 0) {\n          ctx.save();\n          ctx.fillStyle = `rgba(0, 0, 0, ${alpha * 0.8})`;\n\n          const tooltipWidth = 220;\n          const tooltipHeight = 70 + (drop.weaponPerks.length * 18);\n          const tooltipX = screenPos.x - tooltipWidth / 2;\n          const tooltipY = screenPos.y - drop.size - tooltipHeight - 20;\n\n          ctx.fillRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight);\n\n          ctx.strokeStyle = drop.weapon.color;\n          ctx.lineWidth = 2;\n          ctx.strokeRect(tooltipX, tooltipY, tooltipWidth, tooltipHeight);\n\n          ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n          ctx.font = 'bold 14px monospace';\n          ctx.textAlign = 'center';\n          ctx.fillText(drop.weapon.name, screenPos.x, tooltipY + 20);\n\n          ctx.font = '11px monospace';\n          ctx.fillStyle = `rgba(200, 200, 200, ${alpha})`;\n          ctx.fillText(`${drop.weapon.type} | DMG: ${Math.floor(drop.weapon.damage)} | FR: ${drop.weapon.fireRate.toFixed(2)}`, screenPos.x, tooltipY + 38);\n\n          let yOffset = tooltipY + 58;\n          drop.weaponPerks.forEach((perk) => {\n            const rarityColors: Record<string, string> = {\n              'common': '#9ca3af',\n              'rare': '#3b82f6',\n              'epic': '#a855f7',\n              'legendary': '#f59e0b'\n            };\n            ctx.fillStyle = `rgba(${hexToRgb(rarityColors[perk.rarity])}, ${alpha})`;\n            ctx.font = '10px monospace';\n            ctx.textAlign = 'left';\n            ctx.fillText(`• ${perk.name}`, tooltipX + 10, yOffset);\n            yOffset += 18;\n          });\n\n          ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n          ctx.font = 'bold 12px monospace';\n          ctx.textAlign = 'center';\n          ctx.fillText('[F] Pick Up', screenPos.x, tooltipY + tooltipHeight - 10);\n          ctx.restore();\n        }\n      }\n    });\n  };\n\n  const hexToRgb = (hex: string): string => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!result) return '255, 255, 255';\n    return `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`;\n  };\n\n  const drawChests = (ctx: CanvasRenderingContext2D, chests: Chest[], camera: Camera, gameState: GameState) => {\n    chests.forEach(chest => {\n      if (chest.isOpen || !camera.isInView(chest.position, chest.size * 2)) return;\n\n      const screenPos = camera.worldToScreen(chest.position);\n      \n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y);\n      ctx.rotate(chest.rotation);\n\n      if (chest.type === 'timed') {\n        ctx.fillStyle = '#fde047';\n        ctx.strokeStyle = '#facc15';\n        ctx.shadowColor = '#fde047';\n        ctx.shadowBlur = 20;\n        ctx.lineWidth = 3;\n\n        ctx.beginPath();\n        ctx.moveTo(0, -chest.size / 2);\n        ctx.lineTo(chest.size / 2, 0);\n        ctx.lineTo(0, chest.size / 2);\n        ctx.lineTo(-chest.size / 2, 0);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n      } else if (chest.type === 'locked') {\n        ctx.fillStyle = '#6366f1';\n        ctx.strokeStyle = '#4f46e5';\n        ctx.shadowColor = '#6366f1';\n        ctx.shadowBlur = 15;\n        ctx.lineWidth = 3;\n        ctx.fillRect(-chest.size / 2, -chest.size / 2, chest.size, chest.size);\n        ctx.strokeRect(-chest.size / 2, -chest.size / 2, chest.size, chest.size);\n\n        ctx.fillStyle = '#fbbf24';\n        ctx.strokeStyle = '#d97706';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(0, -chest.size / 6, chest.size / 6, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillRect(-chest.size / 12, -chest.size / 6, chest.size / 6, chest.size / 3);\n        ctx.strokeRect(-chest.size / 12, -chest.size / 6, chest.size / 6, chest.size / 3);\n      } else {\n        ctx.fillStyle = '#a3a3a3';\n        ctx.strokeStyle = '#737373';\n        ctx.lineWidth = 2;\n        ctx.fillRect(-chest.size / 2, -chest.size / 2, chest.size, chest.size);\n        ctx.strokeRect(-chest.size / 2, -chest.size / 2, chest.size, chest.size);\n      }\n      ctx.restore();\n\n      // Draw UI elements\n      if (chest.type === 'timed' && chest.radius) {\n        ctx.save();\n        ctx.strokeStyle = 'rgba(253, 224, 71, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, chest.radius, 0, Math.PI * 2);\n        ctx.stroke();\n\n        const progress = (chest.timer || 0) / (chest.maxTime || 5);\n        if (progress > 0) {\n          ctx.strokeStyle = '#fde047';\n          ctx.lineWidth = 4;\n          ctx.beginPath();\n          ctx.arc(screenPos.x, screenPos.y, chest.radius, -Math.PI / 2, -Math.PI / 2 + Math.PI * 2 * progress);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n\n      const playerPos = gameState.player.position;\n      const distance = Math.sqrt(Math.pow(playerPos.x - chest.position.x, 2) + Math.pow(playerPos.y - chest.position.y, 2));\n      if ((chest.type === 'regular' || chest.type === 'locked') && distance < chest.size * 2) {\n        const alpha = Math.max(0, 1 - (distance - chest.size) / chest.size);\n        if (alpha > 0) {\n            ctx.save();\n            ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n            ctx.font = 'bold 16px monospace';\n            ctx.textAlign = 'center';\n            if (chest.type === 'locked') {\n              const keyCount = gameState.player.resources.crateKey || 0;\n              if (keyCount > 0) {\n                ctx.fillText(`[F] Unlock (Keys: ${keyCount})`, screenPos.x, screenPos.y - chest.size - 15);\n              } else {\n                ctx.fillStyle = `rgba(255, 100, 100, ${alpha})`;\n                ctx.fillText('Locked (Need Key)', screenPos.x, screenPos.y - chest.size - 15);\n              }\n            } else {\n              ctx.fillText('[F] Open', screenPos.x, screenPos.y - chest.size - 15);\n            }\n            ctx.restore();\n        }\n      }\n    });\n  };\n\n  const drawPortals = (ctx: CanvasRenderingContext2D, portals: Portal[], camera: Camera, biome: any, gameState: GameState) => {\n    const time = Date.now();\n\n    portals.forEach(portal => {\n      if (!camera.isInView(portal.position, portal.size * 2)) return;\n\n      const screenPos = camera.worldToScreen(portal.position);\n      const portalColor = portal.color || biome.accentColor;\n\n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y);\n\n      // Glowing core\n      const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, portal.size / 2);\n      gradient.addColorStop(0, `${portalColor}ff`);\n      gradient.addColorStop(0.5, `${portalColor}80`);\n      gradient.addColorStop(1, `${portalColor}00`);\n      \n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(0, 0, portal.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Swirling accretion disk\n      const rings = 5;\n      for (let i = 0; i < rings; i++) {\n        ctx.save();\n        const rotation = (time / (2000 + i * 500)) * (i % 2 === 0 ? 1 : -1);\n        ctx.rotate(rotation);\n        ctx.strokeStyle = portalColor;\n        ctx.lineWidth = 1 + (i * 0.5);\n        ctx.globalAlpha = 0.2 + (i / rings) * 0.5;\n        ctx.beginPath();\n        ctx.arc(0, 0, portal.size / 2 + i * 4, 0, Math.PI * 1.5);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      // In-flowing particles\n      const particleCount = 30;\n      for (let i = 0; i < particleCount; i++) {\n        const angle = (i / particleCount) * Math.PI * 2 * 5 + (time / 2000);\n        const maxDist = portal.size * 1.5;\n        const dist = maxDist - ((time / 10 + i * 50) % maxDist);\n        const alpha = (dist / maxDist);\n        const size = 1 + alpha * 2;\n\n        const x = Math.cos(angle) * dist;\n        const y = Math.sin(angle) * dist;\n\n        ctx.fillStyle = portalColor;\n        ctx.globalAlpha = alpha * 0.8;\n        ctx.beginPath();\n        ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      ctx.restore();\n\n      // Interaction hint\n      const playerPos = gameState.player.position;\n      const distance = Math.sqrt(Math.pow(playerPos.x - portal.position.x, 2) + Math.pow(playerPos.y - portal.position.y, 2));\n      if (distance < portal.size + gameState.player.size) {\n          const alpha = Math.max(0, 1 - (distance - portal.size) / gameState.player.size);\n          if (alpha > 0) {\n              ctx.save();\n              ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n              ctx.font = 'bold 16px monospace';\n              ctx.textAlign = 'center';\n              ctx.shadowColor = '#000';\n              ctx.shadowBlur = 5;\n              ctx.fillText('[E] Enter', screenPos.x, screenPos.y - portal.size - 15);\n              ctx.restore();\n          }\n      }\n    });\n  };\n\n  const drawExtractionPoints = (ctx: CanvasRenderingContext2D, points: ExtractionPoint[], camera: Camera, biome: any) => {\n    points.forEach(point => {\n      if (!camera.isInView(point.position, point.size)) return;\n\n      const screenPos = camera.worldToScreen(point.position);\n      const pulse = Math.sin(Date.now() / 500) * 10 + 20;\n      const extractionColor = biome.theme.secondaryColor;\n\n      ctx.save();\n      ctx.strokeStyle = extractionColor;\n      ctx.lineWidth = 4;\n      ctx.shadowBlur = pulse;\n      ctx.shadowColor = extractionColor;\n\n      ctx.beginPath();\n      ctx.arc(screenPos.x, screenPos.y, point.size / 2, 0, Math.PI * 2);\n      ctx.stroke();\n\n      ctx.fillStyle = `${extractionColor}1a`;\n      ctx.fill();\n\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 14px monospace';\n      ctx.textAlign = 'center';\n      ctx.fillText('EXTRACT [E]', screenPos.x, screenPos.y + 5);\n\n      ctx.restore();\n    });\n  };\n\n  const drawPlayer = (ctx: CanvasRenderingContext2D, player: typeof gameState.player, camera: Camera) => {\n    const screenPos = camera.worldToScreen(player.position);\n\n    const activeWeapon = player.equippedWeapons[player.activeWeaponIndex];\n    if (activeWeapon && activeWeapon.firingMode === 'charge' && activeWeapon.isCharging && activeWeapon.currentCharge) {\n      const chargePercent = activeWeapon.currentCharge / (activeWeapon.chargeTime || 2.0);\n      const meterRadius = player.size;\n      const meterStartAngle = Math.PI * 0.7;\n      const meterEndAngle = Math.PI * 1.3;\n      const chargeAngle = meterStartAngle + (meterEndAngle - meterStartAngle) * chargePercent;\n\n      ctx.save();\n      ctx.translate(screenPos.x, screenPos.y);\n      ctx.rotate(player.rotation);\n\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n      ctx.lineWidth = 4;\n      ctx.beginPath();\n      ctx.arc(0, 0, meterRadius, meterStartAngle, meterEndAngle);\n      ctx.stroke();\n\n      const chargeColor = chargePercent > 0.95 ? '#f59e0b' : '#fde047';\n      ctx.strokeStyle = chargeColor;\n      ctx.shadowBlur = 10;\n      ctx.shadowColor = chargeColor;\n      ctx.lineWidth = 4;\n      ctx.lineCap = 'round';\n      ctx.beginPath();\n      ctx.arc(0, 0, meterRadius, meterStartAngle, chargeAngle);\n      ctx.stroke();\n\n      ctx.restore();\n    }\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(player.rotation);\n\n    if (player.isDashing) {\n      ctx.shadowBlur = 30;\n      ctx.shadowColor = '#00ffff';\n    }\n\n    ctx.fillStyle = '#00ffff';\n    ctx.beginPath();\n    ctx.moveTo(player.size / 2, 0);\n    ctx.lineTo(-player.size / 2, -player.size / 3);\n    ctx.lineTo(-player.size / 3, 0);\n    ctx.lineTo(-player.size / 2, player.size / 3);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.strokeStyle = '#00ffffdd';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    const eyeOffset = player.size / 4;\n    ctx.fillStyle = '#ffffff';\n    ctx.beginPath();\n    ctx.arc(eyeOffset, 0, 3, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n\n    const healthBarWidth = player.size * 1.5;\n    const healthBarHeight = 4;\n    const healthPercent = player.health / player.maxHealth;\n\n    ctx.fillStyle = '#ff0000';\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - player.size / 2 - 10,\n      healthBarWidth,\n      healthBarHeight\n    );\n\n    ctx.fillStyle = '#00ff00';\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - player.size / 2 - 10,\n      healthBarWidth * healthPercent,\n      healthBarHeight\n    );\n  };\n\n  const drawRemotePlayer = (ctx: CanvasRenderingContext2D, player: typeof gameState.player, camera: Camera, playerLabel: string) => {\n    const screenPos = camera.worldToScreen(player.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(player.rotation);\n\n    if (player.isDashing) {\n      ctx.shadowBlur = 30;\n      ctx.shadowColor = '#ff00ff';\n    }\n\n    ctx.fillStyle = '#ff00ff';\n    ctx.beginPath();\n    ctx.moveTo(player.size / 2, 0);\n    ctx.lineTo(-player.size / 2, -player.size / 3);\n    ctx.lineTo(-player.size / 3, 0);\n    ctx.lineTo(-player.size / 2, player.size / 3);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.strokeStyle = '#ff00ffdd';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    const eyeOffset = player.size / 4;\n    ctx.fillStyle = '#ffffff';\n    ctx.beginPath();\n    ctx.arc(eyeOffset, 0, 3, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n\n    const healthBarWidth = player.size * 1.5;\n    const healthBarHeight = 4;\n    const healthPercent = player.health / player.maxHealth;\n\n    ctx.fillStyle = '#ff0000';\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - player.size / 2 - 10,\n      healthBarWidth,\n      healthBarHeight\n    );\n\n    ctx.fillStyle = '#00ff00';\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - player.size / 2 - 10,\n      healthBarWidth * healthPercent,\n      healthBarHeight\n    );\n\n    ctx.fillStyle = '#ff00ff';\n    ctx.font = '10px monospace';\n    ctx.textAlign = 'center';\n    ctx.fillText(playerLabel, screenPos.x, screenPos.y - player.size / 2 - 18);\n  };\n\n  const drawEnemy = (ctx: CanvasRenderingContext2D, enemy: Enemy, camera: Camera) => {\n    if (!camera.isInView(enemy.position, 500)) return;\n\n    if (enemy.type === 'miniboss') {\n      renderMiniboss(ctx, enemy, camera);\n      return;\n    }\n\n    const screenPos = camera.worldToScreen(enemy.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(enemy.rotation);\n\n    ctx.fillStyle = enemy.color;\n    ctx.shadowBlur = enemy.type === 'boss' ? 20 : 10;\n    ctx.shadowColor = enemy.color;\n\n    if (enemy.type === 'grunt') {\n      ctx.fillRect(-enemy.size / 2, -enemy.size / 2, enemy.size, enemy.size);\n    } else if (enemy.type === 'speedy') {\n      ctx.beginPath();\n      ctx.moveTo(enemy.size / 2, 0);\n      ctx.lineTo(-enemy.size / 2, -enemy.size / 2);\n      ctx.lineTo(-enemy.size / 2, enemy.size / 2);\n      ctx.closePath();\n      ctx.fill();\n    } else if (enemy.type === 'tank') {\n      ctx.beginPath();\n      ctx.arc(0, 0, enemy.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.fillRect(-enemy.size / 3, -2, enemy.size / 1.5, 4);\n    } else if (enemy.type === 'sniper') {\n      ctx.fillRect(-enemy.size / 2, -enemy.size / 3, enemy.size, enemy.size / 1.5);\n      ctx.fillRect(enemy.size / 3, -2, enemy.size / 2, 4);\n    } else if (enemy.type === 'artillery') {\n      ctx.beginPath();\n      ctx.arc(0, 0, enemy.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.fillRect(-enemy.size / 4, -enemy.size / 2, enemy.size / 2, enemy.size);\n      ctx.fillRect(enemy.size / 4, -3, enemy.size / 1.5, 6);\n    } else if (enemy.type === 'burst') {\n      ctx.beginPath();\n      for (let i = 0; i < 5; i++) {\n        const angle = (i * Math.PI * 2) / 5;\n        const x = Math.cos(angle) * enemy.size / 2;\n        const y = Math.sin(angle) * enemy.size / 2;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.closePath();\n      ctx.fill();\n    } else if (enemy.type === 'dasher') {\n      ctx.fillRect(-enemy.size / 2, -enemy.size / 2, enemy.size, enemy.size);\n      if (enemy.isDashing) {\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(-enemy.size / 2, -enemy.size / 2, enemy.size, enemy.size);\n      }\n    } else if (enemy.type === 'weaver') {\n      ctx.beginPath();\n      for (let i = 0; i < 6; i++) {\n        const angle = (i * Math.PI * 2) / 6;\n        const x = Math.cos(angle) * enemy.size / 2;\n        const y = Math.sin(angle) * enemy.size / 2;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.closePath();\n      ctx.fill();\n    } else if (enemy.type === 'laser') {\n      ctx.beginPath();\n      ctx.arc(0, 0, enemy.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.fillStyle = '#a78bfa';\n      ctx.fillRect(-enemy.size / 4, -enemy.size / 2, enemy.size / 2, enemy.size);\n\n      for (let i = 0; i < 3; i++) {\n        const offset = (i - 1) * enemy.size / 3;\n        ctx.fillRect(enemy.size / 3, offset - 1, enemy.size / 4, 2);\n      }\n    } else if (enemy.type === 'boss') {\n      ctx.beginPath();\n      ctx.arc(0, 0, enemy.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.fillStyle = '#8b0000';\n      ctx.beginPath();\n      ctx.arc(0, 0, enemy.size / 3, 0, Math.PI * 2);\n      ctx.fill();\n\n      for (let i = 0; i < 8; i++) {\n        const angle = (i * Math.PI * 2) / 8;\n        ctx.save();\n        ctx.rotate(angle);\n        ctx.fillStyle = enemy.color;\n        ctx.fillRect(enemy.size / 3, -3, enemy.size / 4, 6);\n        ctx.restore();\n      }\n    } else if (enemy.type === 'orbiter') {\n      ctx.beginPath();\n      ctx.moveTo(enemy.size / 2, 0);\n      ctx.lineTo(-enemy.size / 2, -enemy.size / 2);\n      ctx.lineTo(-enemy.size / 2, enemy.size / 2);\n      ctx.closePath();\n      ctx.fill();\n\n      for (let i = 0; i < 5; i++) {\n        const angle = (i / 5) * Math.PI * 2 + ((enemy as any).orbitalAngle || 0);\n        const orbitRadius = enemy.size * 0.8;\n        const orbitX = Math.cos(angle) * orbitRadius;\n        const orbitY = Math.sin(angle) * orbitRadius;\n        ctx.beginPath();\n        ctx.arc(orbitX, orbitY, enemy.size * 0.15, 0, Math.PI * 2);\n        ctx.fillStyle = '#38bdf8';\n        ctx.fill();\n      }\n    } else if (enemy.type === 'fragmenter') {\n      ctx.beginPath();\n      for (let i = 0; i < 5; i++) {\n        const angle = (i * Math.PI * 2) / 5;\n        const x = Math.cos(angle) * enemy.size / 2;\n        const y = Math.sin(angle) * enemy.size / 2;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.strokeStyle = '#ffffff';\n      ctx.lineWidth = 2;\n      for (let i = 0; i < 4; i++) {\n        const angle = (i / 4) * Math.PI * 2;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * enemy.size * 0.35, Math.sin(angle) * enemy.size * 0.35);\n        ctx.stroke();\n      }\n    } else if (enemy.type === 'pulsar') {\n      ctx.beginPath();\n      for (let i = 0; i < 6; i++) {\n        const angle = (i * Math.PI * 2) / 6;\n        const x = Math.cos(angle) * enemy.size / 2;\n        const y = Math.sin(angle) * enemy.size / 2;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.closePath();\n      ctx.fill();\n\n      const pulsePhase = (enemy as any).pulseTimer || 0;\n      for (let i = 0; i < 3; i++) {\n        const pulseRadius = enemy.size * (0.6 + i * 0.2 + (pulsePhase % 1) * 0.3);\n        ctx.beginPath();\n        ctx.arc(0, 0, pulseRadius, 0, Math.PI * 2);\n        ctx.strokeStyle = enemy.color;\n        ctx.globalAlpha = 0.3 - (i * 0.1);\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.globalAlpha = 1.0;\n      }\n    } else if (enemy.type === 'spiraler') {\n      ctx.beginPath();\n      ctx.moveTo(enemy.size / 2, 0);\n      ctx.lineTo(-enemy.size / 2, -enemy.size / 2);\n      ctx.lineTo(-enemy.size / 2, enemy.size / 2);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.strokeStyle = enemy.color;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      const spiralPoints = 20;\n      for (let i = 0; i < spiralPoints; i++) {\n        const t = i / spiralPoints;\n        const angle = t * Math.PI * 4 + ((enemy as any).spiralPhase || 0);\n        const radius = enemy.size * 0.3 * (1 - t * 0.8);\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.stroke();\n    } else if (enemy.type === 'replicator') {\n      ctx.fillRect(-enemy.size / 2, -enemy.size / 2, enemy.size, enemy.size);\n\n      ctx.strokeStyle = '#ffffff';\n      ctx.lineWidth = 2;\n      const offset = enemy.size * 0.15;\n      ctx.strokeRect(-enemy.size / 2 + offset, -enemy.size / 2 + offset, enemy.size * 0.7, enemy.size * 0.7);\n      ctx.strokeRect(-enemy.size / 2 - offset, -enemy.size / 2 - offset, enemy.size * 0.3, enemy.size * 0.3);\n    } else if (enemy.type === 'vortex') {\n      ctx.beginPath();\n      for (let i = 0; i < 6; i++) {\n        const angle = (i * Math.PI * 2) / 6;\n        const x = Math.cos(angle) * enemy.size / 2;\n        const y = Math.sin(angle) * enemy.size / 2;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      ctx.closePath();\n      ctx.fill();\n\n      const time = Date.now() / 1000;\n      for (let i = 0; i < 3; i++) {\n        const spiralAngle = time * 2 + (i / 3) * Math.PI * 2;\n        const spiralRadius = enemy.size * 0.5;\n        ctx.beginPath();\n        for (let j = 0; j < 15; j++) {\n          const t = j / 15;\n          const angle = spiralAngle + t * Math.PI * 2;\n          const r = spiralRadius * (1 - t * 0.5);\n          const x = Math.cos(angle) * r;\n          const y = Math.sin(angle) * r;\n          if (j === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n        }\n        ctx.strokeStyle = '#8b5cf6';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n    } else if (enemy.type === 'miniboss') {\n      if (enemy.minibossSubtype === 'angulodon') {\n        if (enemy.segments && enemy.segments.length > 0) {\n          for (let i = enemy.segments.length - 1; i >= 0; i--) {\n            const segment = enemy.segments[i];\n            const segmentScreenPos = camera.worldToScreen(segment.position);\n            \n            ctx.save();\n            ctx.translate(segmentScreenPos.x, segmentScreenPos.y);\n            \n            const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, segment.size / 2);\n            gradient.addColorStop(0, enemy.secondaryColor || '#06b6d4');\n            gradient.addColorStop(0.5, enemy.color);\n            gradient.addColorStop(1, '#064e5e');\n            ctx.fillStyle = gradient;\n            \n            ctx.beginPath();\n            ctx.ellipse(0, 0, segment.size / 2, segment.size / 2.5, 0, 0, Math.PI * 2);\n            ctx.fill();\n            \n            if (i === 0) {\n              const jawOpenAmount = (enemy.jaws && enemy.jaws.isOpen) ? 0.4 : 0.1;\n              \n              ctx.fillStyle = '#0e7490';\n              ctx.beginPath();\n              ctx.moveTo(segment.size * 0.4, -jawOpenAmount * segment.size * 0.3);\n              ctx.lineTo(segment.size * 0.5, -jawOpenAmount * segment.size * 0.5);\n              ctx.lineTo(segment.size * 0.6, -jawOpenAmount * segment.size * 0.3);\n              ctx.closePath();\n              ctx.fill();\n              \n              ctx.beginPath();\n              ctx.moveTo(segment.size * 0.4, jawOpenAmount * segment.size * 0.3);\n              ctx.lineTo(segment.size * 0.5, jawOpenAmount * segment.size * 0.5);\n              ctx.lineTo(segment.size * 0.6, jawOpenAmount * segment.size * 0.3);\n              ctx.closePath();\n              ctx.fill();\n              \n              for (let j = 0; j < 6; j++) {\n                ctx.fillStyle = '#ffffff';\n                const toothY = (j % 2 === 0 ? -1 : 1) * (0.25 + (j / 12)) * segment.size;\n                ctx.fillRect(segment.size * 0.45 + j * 3, toothY - 2, 2, 6);\n              }\n              \n              ctx.fillStyle = '#22d3ee';\n              ctx.shadowBlur = 5;\n              ctx.shadowColor = '#22d3ee';\n              ctx.beginPath();\n              ctx.arc(-segment.size * 0.25, -segment.size * 0.15, 3, 0, Math.PI * 2);\n              ctx.fill();\n              ctx.beginPath();\n              ctx.arc(-segment.size * 0.25, segment.size * 0.15, 3, 0, Math.PI * 2);\n              ctx.fill();\n              ctx.shadowBlur = 0;\n            }\n            \n            if (i === enemy.segments.length - 1) {\n              ctx.fillStyle = '#0891b2';\n              ctx.beginPath();\n              ctx.moveTo(-segment.size * 0.4, 0);\n              ctx.lineTo(-segment.size * 0.6, -segment.size * 0.4);\n              ctx.lineTo(-segment.size * 0.5, 0);\n              ctx.lineTo(-segment.size * 0.6, segment.size * 0.4);\n              ctx.closePath();\n              ctx.fill();\n            }\n            \n            ctx.strokeStyle = '#06b6d4';\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.ellipse(0, 0, segment.size / 2, segment.size / 2.5, 0, 0, Math.PI * 2);\n            ctx.stroke();\n            \n            ctx.restore();\n          }\n        } else {\n          ctx.beginPath();\n          ctx.ellipse(0, 0, enemy.size / 2, enemy.size / 3, 0, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        \n        if (enemy.whirlpoolAngle !== undefined && enemy.pullRadius) {\n          const whirlpoolScreenPos = camera.worldToScreen(enemy.position);\n          ctx.save();\n          ctx.strokeStyle = '#3b82f6';\n          ctx.lineWidth = 2;\n          ctx.globalAlpha = 0.4;\n          for (let i = 0; i < 3; i++) {\n            ctx.beginPath();\n            ctx.arc(whirlpoolScreenPos.x, whirlpoolScreenPos.y, enemy.pullRadius * (0.5 + i * 0.25), 0, Math.PI * 2);\n            ctx.stroke();\n          }\n          ctx.globalAlpha = 1.0;\n          ctx.restore();\n        }\n      } else if (enemy.minibossSubtype === 'cryostag_vanguard') {\n        const bodyGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, enemy.size / 2);\n        bodyGradient.addColorStop(0, '#93c5fd');\n        bodyGradient.addColorStop(0.5, '#60a5fa');\n        bodyGradient.addColorStop(1, '#2563eb');\n        ctx.fillStyle = bodyGradient;\n        \n        ctx.beginPath();\n        ctx.ellipse(0, 0, enemy.size / 2, enemy.size / 2.5, 0, 0, Math.PI * 2);\n        ctx.fill();\n        \n        ctx.strokeStyle = '#93c5fd';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        const antlerCount = 2;\n        for (let side = -1; side <= 1; side += 2) {\n          for (let i = 0; i < antlerCount; i++) {\n            const antlerAngle = (i / antlerCount) * 0.5 - 0.25;\n            ctx.strokeStyle = '#7dd3fc';\n            ctx.lineWidth = 3;\n            ctx.lineCap = 'round';\n            \n            const baseX = side * enemy.size * 0.2;\n            const baseY = -enemy.size * 0.35;\n            const tipX = baseX + side * enemy.size * 0.4 * Math.cos(antlerAngle);\n            const tipY = baseY - enemy.size * 0.5 * Math.abs(Math.sin(antlerAngle));\n            \n            ctx.beginPath();\n            ctx.moveTo(baseX, baseY);\n            ctx.lineTo(tipX, tipY);\n            ctx.stroke();\n            \n            ctx.fillStyle = '#bfdbfe';\n            ctx.beginPath();\n            ctx.arc(tipX, tipY, 3, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        }\n        \n        ctx.fillStyle = '#dbeafe';\n        ctx.shadowBlur = 6;\n        ctx.shadowColor = '#60a5fa';\n        ctx.beginPath();\n        ctx.arc(-enemy.size * 0.15, -enemy.size * 0.1, 4, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.beginPath();\n        ctx.arc(enemy.size * 0.15, -enemy.size * 0.1, 4, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n        \n        if (enemy.orbitalCannons && enemy.orbitalCannons.length > 0) {\n          enemy.orbitalCannons.forEach((cannon: any) => {\n            const cannonScreenPos = camera.worldToScreen(cannon.position);\n            ctx.save();\n            ctx.shadowBlur = 8;\n            ctx.shadowColor = '#3b82f6';\n            ctx.fillStyle = '#3b82f6';\n            ctx.strokeStyle = '#60a5fa';\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(cannonScreenPos.x, cannonScreenPos.y, 8, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore();\n          });\n        }\n        \n        if (enemy.shieldActive) {\n          ctx.strokeStyle = '#60a5fa';\n          ctx.lineWidth = 3;\n          ctx.globalAlpha = 0.6;\n          ctx.beginPath();\n          ctx.arc(0, 0, enemy.size * 0.7, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.globalAlpha = 1.0;\n        }\n      } else {\n        ctx.beginPath();\n        ctx.arc(0, 0, enemy.size / 2, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    ctx.restore();\n\n    const isLargeBoss = enemy.type === 'boss' || enemy.type === 'miniboss';\n    const healthBarWidth = isLargeBoss ? enemy.size * 1.5 : enemy.size * 1.2;\n    const healthBarHeight = isLargeBoss ? 5 : 3;\n    const healthPercent = enemy.health / enemy.maxHealth;\n\n    ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - enemy.size / 2 - (isLargeBoss ? 12 : 8),\n      healthBarWidth,\n      healthBarHeight\n    );\n\n    ctx.fillStyle = enemy.color;\n    ctx.fillRect(\n      screenPos.x - healthBarWidth / 2,\n      screenPos.y - enemy.size / 2 - (isLargeBoss ? 12 : 8),\n      healthBarWidth * healthPercent,\n      healthBarHeight\n    );\n\n    if (enemy.type === 'boss') {\n      ctx.save();\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 12px monospace';\n      ctx.textAlign = 'center';\n      ctx.fillText('BOSS', screenPos.x, screenPos.y - enemy.size / 2 - 20);\n      ctx.restore();\n    }\n  };\n\n  const drawDrone = (ctx: CanvasRenderingContext2D, drone: Drone, camera: Camera) => {\n    if (!camera.isInView(drone.position, 100)) return;\n    droneRendererRef.current.renderDrone(ctx, drone, camera);\n  };\n\n  const drawModifierTags = (ctx: CanvasRenderingContext2D, enemy: any, camera: Camera) => {\n    if (!enemy.modifiers || enemy.modifiers.length === 0) return;\n\n    const screenPos = camera.worldToScreen(enemy.position);\n    const modifierColors: Record<string, string> = {\n      shield: '#60a5fa',\n      phase: '#a78bfa',\n      mirror: '#38bdf8',\n      absorb: '#fbbf24',\n      split: '#f87171',\n      temporal: '#60a5fa',\n      reactive: '#ef4444',\n      volatile: '#ff6600',\n      anchored: '#8b5cf6',\n      blink: '#06b6d4',\n      enrage: '#dc2626',\n      teleport: '#a855f7'\n    };\n\n    const modifierNames: Record<string, string> = {\n      shield: 'SHIELD',\n      phase: 'PHASE',\n      mirror: 'MIRROR',\n      absorb: 'ABSORB',\n      split: 'SPLIT',\n      temporal: 'TEMPORAL',\n      reactive: 'REACTIVE',\n      volatile: 'VOLATILE',\n      anchored: 'ANCHOR',\n      blink: 'BLINK',\n      enrage: 'ENRAGE',\n      teleport: 'TELEPORT'\n    };\n\n    ctx.save();\n    ctx.font = 'bold 9px monospace';\n    ctx.textAlign = 'center';\n\n    const tagSpacing = 12;\n    const startY = screenPos.y - enemy.size / 2 - 18;\n\n    enemy.modifiers.forEach((modifier: string, index: number) => {\n      const tagY = startY - (index * tagSpacing);\n      const color = modifierColors[modifier] || '#ffffff';\n      const name = modifierNames[modifier] || modifier.toUpperCase();\n\n      ctx.shadowBlur = 4;\n      ctx.shadowColor = color;\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n      const textWidth = ctx.measureText(name).width;\n      ctx.fillRect(screenPos.x - textWidth / 2 - 3, tagY - 8, textWidth + 6, 10);\n\n      ctx.shadowBlur = 8;\n      ctx.shadowColor = color;\n      ctx.fillStyle = color;\n      ctx.fillText(name, screenPos.x, tagY);\n    });\n\n    ctx.restore();\n  };\n\n\n  const drawModifiedEnemyVisuals = (ctx: CanvasRenderingContext2D, enemy: any, camera: Camera, modifierSystem: any) => {\n    const screenPos = camera.worldToScreen(enemy.position);\n\n    if (enemy.modifiers && enemy.modifiers.includes('absorb') && enemy.absorbedDamage && enemy.absorbedDamage > 0) {\n      const absorbLimit = 200;\n      const absorbPercent = Math.min(enemy.absorbedDamage / absorbLimit, 1);\n      const ringRadius = enemy.size / 2 + 5;\n\n      ctx.save();\n      ctx.strokeStyle = `rgba(251, 191, 36, ${0.3 + absorbPercent * 0.5})`;\n      ctx.lineWidth = 4;\n      ctx.shadowBlur = 10 + absorbPercent * 10;\n      ctx.shadowColor = '#fbbf24';\n\n      ctx.beginPath();\n      ctx.arc(screenPos.x, screenPos.y, ringRadius, 0, Math.PI * 2 * absorbPercent);\n      ctx.stroke();\n\n      if (absorbPercent >= 0.9) {\n        ctx.shadowBlur = 20;\n        ctx.fillStyle = `rgba(239, 68, 68, ${Math.sin(Date.now() / 100) * 0.3 + 0.4})`;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, ringRadius + 3, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n\n    const shields = modifierSystem.getShields(enemy);\n    shields.forEach((shield: any) => {\n      const shieldX = enemy.position.x + Math.cos(shield.angle) * (enemy.size + 10);\n      const shieldY = enemy.position.y + Math.sin(shield.angle) * (enemy.size + 10);\n      const shieldScreenPos = camera.worldToScreen({ x: shieldX, y: shieldY });\n\n      ctx.save();\n      ctx.shadowBlur = 10;\n      ctx.shadowColor = '#60a5fa';\n      ctx.fillStyle = `rgba(96, 165, 250, ${shield.health / shield.maxHealth * 0.5})`;\n      ctx.strokeStyle = '#60a5fa';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(shieldScreenPos.x, shieldScreenPos.y, shield.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.stroke();\n      ctx.restore();\n    });\n\n    if (enemy.isPhased) {\n      ctx.save();\n      ctx.globalAlpha = 0.4;\n      ctx.shadowBlur = 20;\n      ctx.shadowColor = '#a78bfa';\n      ctx.restore();\n    }\n\n    if (enemy.modifiers && enemy.modifiers.includes('mirror') && enemy.mirrorCharges && enemy.mirrorCharges > 0) {\n      const chargeSpacing = 8;\n      const startX = screenPos.x - ((enemy.mirrorCharges - 1) * chargeSpacing) / 2;\n      const chargeY = screenPos.y + enemy.size / 2 + 10;\n\n      ctx.save();\n      for (let i = 0; i < enemy.mirrorCharges; i++) {\n        ctx.fillStyle = '#38bdf8';\n        ctx.shadowBlur = 4;\n        ctx.shadowColor = '#38bdf8';\n        ctx.beginPath();\n        ctx.arc(startX + i * chargeSpacing, chargeY, 3, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.restore();\n    }\n\n    if (enemy.isEnraged) {\n      const pulseSize = Math.sin(Date.now() / 100) * 3 + enemy.size / 2 + 8;\n      ctx.save();\n      ctx.strokeStyle = 'rgba(220, 38, 38, 0.6)';\n      ctx.lineWidth = 3;\n      ctx.shadowBlur = 15;\n      ctx.shadowColor = '#dc2626';\n      ctx.beginPath();\n      ctx.arc(screenPos.x, screenPos.y, pulseSize, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    if (enemy.modifiers && enemy.modifiers.length > 0) {\n      const modifierColors: Record<string, string> = {\n        shield: '#60a5fa',\n        phase: '#a78bfa',\n        mirror: '#38bdf8',\n        absorb: '#fbbf24',\n        split: '#f87171',\n        temporal: '#60a5fa',\n        reactive: '#ef4444',\n        volatile: '#ff6600',\n        anchored: '#8b5cf6',\n        blink: '#06b6d4',\n        enrage: '#dc2626',\n        teleport: '#a855f7'\n      };\n\n      const time = Date.now() / 1000;\n      const particleCount = 3 + enemy.modifiers.length;\n\n      for (let i = 0; i < particleCount; i++) {\n        const angle = (time * 2 + i * (Math.PI * 2 / particleCount)) % (Math.PI * 2);\n        const radius = enemy.size / 2 + 12 + Math.sin(time * 3 + i) * 3;\n        const particleX = enemy.position.x + Math.cos(angle) * radius;\n        const particleY = enemy.position.y + Math.sin(angle) * radius;\n        const particleScreenPos = camera.worldToScreen({ x: particleX, y: particleY });\n\n        const modifierIndex = i % enemy.modifiers.length;\n        const color = modifierColors[enemy.modifiers[modifierIndex]] || '#ffffff';\n\n        ctx.save();\n        ctx.shadowBlur = 8;\n        ctx.shadowColor = color;\n        ctx.fillStyle = color;\n        ctx.globalAlpha = 0.6 + Math.sin(time * 4 + i) * 0.2;\n        ctx.beginPath();\n        ctx.arc(particleScreenPos.x, particleScreenPos.y, 2.5, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n      }\n\n      const trailCount = 2;\n      for (let i = 0; i < trailCount; i++) {\n        const angle = (time * 1.5 + i * Math.PI) % (Math.PI * 2);\n        const radius = enemy.size / 2 + 8;\n        const trailX = enemy.position.x + Math.cos(angle) * radius;\n        const trailY = enemy.position.y + Math.sin(angle) * radius;\n        const trailScreenPos = camera.worldToScreen({ x: trailX, y: trailY });\n\n        const modifierIndex = i % enemy.modifiers.length;\n        const color = modifierColors[enemy.modifiers[modifierIndex]] || '#ffffff';\n\n        ctx.save();\n        ctx.shadowBlur = 6;\n        ctx.shadowColor = color;\n        ctx.fillStyle = color;\n        ctx.globalAlpha = 0.3;\n        ctx.beginPath();\n        ctx.arc(trailScreenPos.x, trailScreenPos.y, 3, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  };\n\n  const drawParticle = (ctx: CanvasRenderingContext2D, particle: Particle, camera: Camera) => {\n    if (!camera.isInView(particle.position)) return;\n\n    const screenPos = camera.worldToScreen(particle.position);\n    const alpha = particle.lifetime / particle.maxLifetime;\n    ctx.save();\n    ctx.fillStyle = particle.color;\n    ctx.globalAlpha = alpha;\n    ctx.beginPath();\n    ctx.arc(screenPos.x, screenPos.y, particle.size / 2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n  };\n\n  const drawCurrency = (ctx: CanvasRenderingContext2D, drop: typeof gameState.currencyDrops[0], camera: Camera) => {\n    if (!camera.isInView(drop.position)) return;\n\n    const screenPos = camera.worldToScreen(drop.position);\n    ctx.save();\n    ctx.fillStyle = '#ffff00';\n    ctx.shadowBlur = 15;\n    ctx.shadowColor = '#ffff00';\n    ctx.beginPath();\n    ctx.arc(screenPos.x, screenPos.y, 6, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.strokeStyle = '#ffaa00';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctx.restore();\n  };\n\n  const drawResourceDrop = (ctx: CanvasRenderingContext2D, drop: ResourceDrop, camera: Camera) => {\n    if (!camera.isInView(drop.position, drop.size * 2)) return;\n\n    const screenPos = camera.worldToScreen(drop.position);\n    const bobOffset = Math.sin(drop.bobPhase) * 6;\n    const pulse = Math.sin(Date.now() / 300) * 0.15 + 0.85;\n    const distToPlayer = Math.sqrt(\n      Math.pow(gameState.player.position.x - drop.position.x, 2) +\n      Math.pow(gameState.player.position.y - drop.position.y, 2)\n    );\n    const isNearby = distToPlayer < drop.size * 2;\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y + bobOffset);\n\n    ctx.strokeStyle = 'rgba(255, 215, 0, 0.3)';\n    ctx.lineWidth = 2;\n    ctx.shadowBlur = 10 * pulse;\n    ctx.shadowColor = '#ffd700';\n    ctx.beginPath();\n    ctx.arc(0, 0, drop.size, 0, Math.PI * 2);\n    ctx.stroke();\n\n    ctx.shadowBlur = 0;\n    ResourceIconRenderer.renderIcon(ctx, drop.resourceType, 0, 0, drop.size * 0.8);\n\n    if (drop.amount > 1) {\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 12px monospace';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 3;\n      ctx.strokeText(`x${drop.amount}`, 10, 10);\n      ctx.fillText(`x${drop.amount}`, 10, 10);\n    }\n\n    ctx.restore();\n\n    if (isNearby) {\n      const resourceName = formatResourceName(drop.resourceType);\n      ctx.save();\n      ctx.font = 'bold 14px monospace';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 4;\n      ctx.strokeText(resourceName, screenPos.x, screenPos.y - drop.size - 20);\n      ctx.fillStyle = '#ffd700';\n      ctx.fillText(resourceName, screenPos.x, screenPos.y - drop.size - 20);\n\n      ctx.font = 'bold 12px monospace';\n      ctx.strokeText('[F] Collect', screenPos.x, screenPos.y - drop.size - 35);\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText('[F] Collect', screenPos.x, screenPos.y - drop.size - 35);\n\n      ctx.restore();\n    }\n  };\n\n  const drawBeamLaser = (ctx: CanvasRenderingContext2D, player: typeof gameState.player, weapon: typeof gameState.player.equippedWeapons[0], camera: Camera, obstacles: Obstacle[]) => {\n    const playerScreenPos = camera.worldToScreen(player.position);\n    const angle = player.rotation;\n    const beamLength = weapon.maxRange || 480;\n\n    let endX = player.position.x + Math.cos(angle) * beamLength;\n    let endY = player.position.y + Math.sin(angle) * beamLength;\n    let actualBeamLength = beamLength;\n\n    for (const obstacle of obstacles) {\n      const dx = endX - player.position.x;\n      const dy = endY - player.position.y;\n      const lineLength = Math.sqrt(dx * dx + dy * dy);\n      const steps = Math.ceil(lineLength / 5);\n\n      for (let i = 0; i <= steps; i++) {\n        const t = i / steps;\n        const checkX = player.position.x + dx * t;\n        const checkY = player.position.y + dy * t;\n\n        let collides = false;\n        if (obstacle.shape === 'circle') {\n          const distToObstacle = Math.sqrt(\n            Math.pow(checkX - obstacle.position.x, 2) +\n            Math.pow(checkY - obstacle.position.y, 2)\n          );\n          collides = distToObstacle < obstacle.size.x / 2;\n        } else {\n          const halfWidth = obstacle.size.x / 2;\n          const halfHeight = obstacle.size.y / 2;\n          collides = checkX >= obstacle.position.x - halfWidth &&\n                    checkX <= obstacle.position.x + halfWidth &&\n                    checkY >= obstacle.position.y - halfHeight &&\n                    checkY <= obstacle.position.y + halfHeight;\n        }\n\n        if (collides) {\n          const distToCollision = Math.sqrt(\n            Math.pow(checkX - player.position.x, 2) +\n            Math.pow(checkY - player.position.y, 2)\n          );\n          if (distToCollision < actualBeamLength) {\n            actualBeamLength = distToCollision;\n            endX = checkX;\n            endY = checkY;\n          }\n          break;\n        }\n      }\n    }\n\n    const endScreenPos = camera.worldToScreen({ x: endX, y: endY });\n\n    ctx.save();\n    ctx.shadowBlur = 20;\n    ctx.shadowColor = weapon.color;\n    ctx.strokeStyle = weapon.color;\n    ctx.lineWidth = weapon.projectileSize * 2;\n    ctx.lineCap = 'round';\n    ctx.globalAlpha = 0.6;\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(endScreenPos.x, endScreenPos.y);\n    ctx.stroke();\n\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = weapon.projectileSize;\n    ctx.globalAlpha = 0.9;\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(endScreenPos.x, endScreenPos.y);\n    ctx.stroke();\n\n    ctx.restore();\n  };\n\n  const drawRailgunBeam = (ctx: CanvasRenderingContext2D, player: typeof gameState.player, weapon: typeof gameState.player.equippedWeapons[0], camera: Camera, obstacles: Obstacle[]) => {\n    const playerScreenPos = camera.worldToScreen(player.position);\n    const angle = player.rotation;\n    const beamLength = weapon.maxRange || 700;\n\n    let endX = player.position.x + Math.cos(angle) * beamLength;\n    let endY = player.position.y + Math.sin(angle) * beamLength;\n    let actualBeamLength = beamLength;\n\n    for (const obstacle of obstacles) {\n      const dx = endX - player.position.x;\n      const dy = endY - player.position.y;\n      const lineLength = Math.sqrt(dx * dx + dy * dy);\n      const steps = Math.ceil(lineLength / 5);\n\n      for (let i = 0; i <= steps; i++) {\n        const t = i / steps;\n        const checkX = player.position.x + dx * t;\n        const checkY = player.position.y + dy * t;\n\n        let collides = false;\n        if (obstacle.shape === 'circle') {\n          const distToObstacle = Math.sqrt(\n            Math.pow(checkX - obstacle.position.x, 2) +\n            Math.pow(checkY - obstacle.position.y, 2)\n          );\n          collides = distToObstacle < obstacle.size.x / 2;\n        } else {\n          const halfWidth = obstacle.size.x / 2;\n          const halfHeight = obstacle.size.y / 2;\n          collides = checkX >= obstacle.position.x - halfWidth &&\n                    checkX <= obstacle.position.x + halfWidth &&\n                    checkY >= obstacle.position.y - halfHeight &&\n                    checkY <= obstacle.position.y + halfHeight;\n        }\n\n        if (collides) {\n          const distToCollision = Math.sqrt(\n            Math.pow(checkX - player.position.x, 2) +\n            Math.pow(checkY - player.position.y, 2)\n          );\n          if (distToCollision < actualBeamLength) {\n            actualBeamLength = distToCollision;\n            endX = checkX;\n            endY = checkY;\n          }\n          break;\n        }\n      }\n    }\n\n    const endScreenPos = camera.worldToScreen({ x: endX, y: endY });\n\n    ctx.save();\n    ctx.shadowBlur = 30;\n    ctx.shadowColor = weapon.color;\n    ctx.strokeStyle = weapon.color;\n    ctx.lineWidth = weapon.projectileSize * 3;\n    ctx.lineCap = 'round';\n    ctx.globalAlpha = 0.7;\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(endScreenPos.x, endScreenPos.y);\n    ctx.stroke();\n\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = weapon.projectileSize * 1.5;\n    ctx.globalAlpha = 1.0;\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(endScreenPos.x, endScreenPos.y);\n    ctx.stroke();\n\n    ctx.strokeStyle = weapon.color;\n    ctx.lineWidth = weapon.projectileSize * 0.5;\n    ctx.globalAlpha = 1.0;\n    ctx.beginPath();\n    ctx.moveTo(playerScreenPos.x, playerScreenPos.y);\n    ctx.lineTo(endScreenPos.x, endScreenPos.y);\n    ctx.stroke();\n\n    ctx.restore();\n  };\n\n  const drawEnvironmentalParticles = (ctx: CanvasRenderingContext2D, particles: BiomeParticle[], camera: Camera) => {\n    particles.forEach(particle => {\n      const screenPos = camera.worldToScreen(particle.position);\n      const alpha = (particle.lifetime / particle.maxLifetime) * particle.opacity;\n\n      ctx.save();\n      ctx.globalAlpha = alpha;\n\n      if (particle.type === 'snow' || particle.type === 'dust') {\n        ctx.fillStyle = particle.color;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, particle.size / 2, 0, Math.PI * 2);\n        ctx.fill();\n      } else if (particle.type === 'ember') {\n        ctx.fillStyle = particle.color;\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = particle.color;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, particle.size / 2, 0, Math.PI * 2);\n        ctx.fill();\n      } else if (particle.type === 'spore') {\n        ctx.fillStyle = particle.color;\n        ctx.strokeStyle = particle.color;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, particle.size / 2, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n      } else if (particle.type === 'spark') {\n        ctx.strokeStyle = particle.color;\n        ctx.shadowBlur = 8;\n        ctx.shadowColor = particle.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(screenPos.x - particle.size, screenPos.y);\n        ctx.lineTo(screenPos.x + particle.size, screenPos.y);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(screenPos.x, screenPos.y - particle.size);\n        ctx.lineTo(screenPos.x, screenPos.y + particle.size);\n        ctx.stroke();\n      } else if (particle.type === 'bubble') {\n        ctx.strokeStyle = particle.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(screenPos.x, screenPos.y, particle.size / 2, 0, Math.PI * 2);\n        ctx.stroke();\n      } else if (particle.type === 'leaf') {\n        ctx.fillStyle = particle.color;\n        ctx.beginPath();\n        ctx.ellipse(screenPos.x, screenPos.y, particle.size / 2, particle.size, Math.PI / 4, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      ctx.restore();\n    });\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={CANVAS_WIDTH}\n      height={CANVAS_HEIGHT}\n      className=\"border-2 border-cyan-500/30 rounded-lg shadow-2xl shadow-cyan-500/20\"\n    />\n  );\n}\n","size_bytes":70657},"src/game/WeaponUpgradeManager.ts":{"content":"import { Weapon } from '../types/game';\n\n/**\n * This class is a placeholder for a potential future upgrade system.\n * The previous implementation was based on obsolete static trees and has been disabled\n * to resolve critical errors and remove legacy code.\n */\nexport class WeaponUpgradeManager {\n  /**\n   * This method is deprecated. It previously returned a list of all possible upgrades for a weapon.\n   * @returns An empty array.\n   */\n  getAllUpgrades(weapon: Weapon): any[] {\n    console.warn('WeaponUpgradeManager.getAllUpgrades is deprecated.');\n    return [];\n  }\n\n  /**\n   * This method is deprecated. It previously checked if an upgrade could be purchased.\n   * @returns Always returns `false`.\n   */\n  canPurchaseUpgrade(weapon: Weapon, upgradeId: string): boolean {\n    console.warn('WeaponUpgradeManager.canPurchaseUpgrade is deprecated.');\n    return false;\n  }\n\n  /**\n   * This method is deprecated. It previously applied an upgrade to a weapon.\n   * @returns The original, unmodified weapon.\n   */\n  purchaseUpgrade(weapon: Weapon, upgradeId: string): Weapon {\n    console.warn('WeaponUpgradeManager.purchaseUpgrade is deprecated.');\n    return weapon;\n  }\n}\n","size_bytes":1176},"src/components/CraftingMenu.tsx":{"content":"import React, { useState } from 'react';\nimport { X, Package } from 'lucide-react';\nimport { Player, Consumable, DroneType } from '../types/game';\nimport { CraftingSystem } from '../game/CraftingSystem';\nimport ResourceIcon from './ResourceIcon';\nimport PatternVisualizer from './PatternVisualizer';\nimport { PlayerInventory } from '../game/PlayerInventory';\n\ninterface CraftingMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  player: Player;\n  craftingSystem: CraftingSystem;\n  inventory: PlayerInventory;\n  onUseConsumable: (consumableId: string) => void;\n}\n\ntype ResourceType = keyof Player['resources'];\n\nconst RESOURCE_NAMES: Record<string, string> = {\n  energy: 'Energy',\n  coreDust: 'Core Dust',\n  flux: 'Flux',\n  geoShards: 'Geo Shards',\n  alloyFragments: 'Alloy Fragments',\n  singularityCore: 'Singularity Core',\n  cryoKelp: 'Cryo Kelp',\n  obsidianHeart: 'Obsidian Heart',\n  gloomRoot: 'Gloom Root',\n  resonantCrystal: 'Resonant Crystal',\n  voidEssence: 'Void Essence',\n  bioluminescentPearl: 'Bioluminescent Pearl',\n  sunpetalBloom: 'Sunpetal Bloom',\n  aetheriumShard: 'Aetherium Shard',\n  gravitonEssence: 'Graviton Essence',\n  crateKey: 'Crate Key',\n};\n\nconst RESOURCE_COLORS: Record<string, string> = {\n  energy: 'bg-blue-500',\n  coreDust: 'bg-purple-500',\n  flux: 'bg-cyan-500',\n  geoShards: 'bg-amber-600',\n  alloyFragments: 'bg-gray-500',\n  singularityCore: 'bg-pink-500',\n  cryoKelp: 'bg-teal-400',\n  obsidianHeart: 'bg-red-900',\n  gloomRoot: 'bg-indigo-700',\n  resonantCrystal: 'bg-violet-400',\n  voidEssence: 'bg-purple-900',\n  bioluminescentPearl: 'bg-blue-300',\n  sunpetalBloom: 'bg-yellow-400',\n  aetheriumShard: 'bg-sky-400',\n  gravitonEssence: 'bg-fuchsia-600',\n  crateKey: 'bg-yellow-500',\n};\n\nexport default function CraftingMenu({\n  isOpen,\n  onClose,\n  player,\n  craftingSystem,\n  inventory,\n  onUseConsumable,\n}: CraftingMenuProps) {\n  const [craftingGrid, setCraftingGrid] = useState<(string[] | null)[][]>([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ]);\n  const [draggedResource, setDraggedResource] = useState<string | null>(null);\n\n  if (!isOpen) return null;\n\n  const discoveredRecipes = craftingSystem.getDiscoveredRecipes();\n\n  const handleDragStart = (resource: string) => {\n    setDraggedResource(resource);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (row: number, col: number) => {\n    if (draggedResource) {\n      const newGrid = craftingGrid.map((r) => [...r]);\n      const currentCell = newGrid[row][col];\n      if (currentCell === null) {\n        newGrid[row][col] = [draggedResource];\n      } else {\n        newGrid[row][col] = [...currentCell, draggedResource];\n      }\n      setCraftingGrid(newGrid);\n      setDraggedResource(null);\n    }\n  };\n\n  const handleClearSlot = (row: number, col: number) => {\n    const newGrid = craftingGrid.map((r) => [...r]);\n    newGrid[row][col] = null;\n    setCraftingGrid(newGrid);\n  };\n\n  const handleRemoveFromSlot = (row: number, col: number, index: number) => {\n    const newGrid = craftingGrid.map((r) => [...r]);\n    const currentCell = newGrid[row][col];\n    if (currentCell) {\n      const updated = currentCell.filter((_, i) => i !== index);\n      newGrid[row][col] = updated.length > 0 ? updated : null;\n      setCraftingGrid(newGrid);\n    }\n  };\n\n  const handleCraft = () => {\n    const result = craftingSystem.craftFromGrid(player, craftingGrid);\n    if (result) {\n      if (typeof result === 'string') {\n        inventory.addDrone(result as DroneType);\n      } else if (result.stackable) {\n        const existingStack = player.consumables.find(\n          (c) => c.name === result.name && c.stackable\n        );\n        if (existingStack) {\n          existingStack.quantity = (existingStack.quantity || 1) + (result.quantity || 1);\n        } else {\n          player.consumables.push(result);\n        }\n      } else {\n        player.consumables.push({ ...result, id: `${result.id}_${Date.now()}` });\n      }\n      setCraftingGrid([\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n      ]);\n    }\n  };\n\n  const handleFillPattern = (recipeId: string) => {\n    const pattern = craftingSystem.getRecipePattern(recipeId);\n    if (pattern) {\n      setCraftingGrid(pattern.map(row => row.map(cell => cell ? [...cell] : null)));\n    }\n  };\n\n  const handleCraftRecipe = (recipeId: string) => {\n    const result = craftingSystem.craftItem(player, recipeId);\n    if (result) {\n      if (typeof result === 'string') {\n        inventory.addDrone(result as DroneType);\n      } else if (result.stackable) {\n        const existingStack = player.consumables.find(\n          (c) => c.name === result.name && c.stackable\n        );\n        if (existingStack) {\n          existingStack.quantity = (existingStack.quantity || 1) + (result.quantity || 1);\n        } else {\n          player.consumables.push(result);\n        }\n      } else {\n        player.consumables.push({ ...result, id: `${result.id}_${Date.now()}` });\n      }\n    }\n  };\n\n  const availableResources = Object.entries(player.resources).filter(\n    ([_, amount]) => amount > 0\n  );\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\n      <div className=\"bg-gray-900 border-4 border-cyan-500 rounded-lg p-6 max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <Package className=\"text-cyan-400\" size={32} />\n            <h2 className=\"text-3xl font-bold text-cyan-400\">Crafting Station</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors\"\n          >\n            <X size={32} />\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-1\">\n            <h3 className=\"text-xl font-bold text-white mb-3\">Resources</h3>\n            <div className=\"bg-gray-800 rounded-lg p-4 space-y-2 max-h-96 overflow-y-auto\">\n              {availableResources.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">No resources available</p>\n              ) : (\n                availableResources.map(([resource, amount]) => (\n                  <div\n                    key={resource}\n                    draggable\n                    onDragStart={() => handleDragStart(resource)}\n                    className=\"bg-gray-700 rounded p-3 flex items-center justify-between cursor-move hover:bg-gray-600 transition-colors\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <ResourceIcon resourceType={resource} size={24} />\n                      <span className=\"text-white font-medium\">\n                        {RESOURCE_NAMES[resource] || resource}\n                      </span>\n                    </div>\n                    <span className=\"text-cyan-400 font-bold\">{amount}</span>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <h3 className=\"text-xl font-bold text-white mb-3\">Crafting Grid (3x3)</h3>\n            <div className=\"bg-gray-800 rounded-lg p-4\">\n              <div className=\"grid grid-cols-3 gap-2 mb-4\">\n                {craftingGrid.map((row, rowIndex) =>\n                  row.map((cell, colIndex) => (\n                    <div\n                      key={`${rowIndex}-${colIndex}`}\n                      onDragOver={handleDragOver}\n                      onDrop={() => handleDrop(rowIndex, colIndex)}\n                      className=\"aspect-square bg-gray-700 rounded border-2 border-gray-600 hover:border-cyan-500 transition-colors flex flex-wrap items-center justify-center p-1 relative gap-1\"\n                    >\n                      {cell && cell.length > 0 ? (\n                        <>\n                          <div className=\"flex flex-wrap gap-1 items-center justify-center\">\n                            {cell.map((resource, idx) => (\n                              <div\n                                key={idx}\n                                className=\"relative group\"\n                                onClick={() => handleRemoveFromSlot(rowIndex, colIndex, idx)}\n                              >\n                                <div className=\"cursor-pointer hover:opacity-75 transition-opacity\">\n                                  <ResourceIcon resourceType={resource} size={cell.length === 1 ? 32 : 20} />\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                          <button\n                            onClick={() => handleClearSlot(rowIndex, colIndex)}\n                            className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                          >\n                            ×\n                          </button>\n                        </>\n                      ) : (\n                        <span className=\"text-gray-600 text-xs\">Drop</span>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n              <button\n                onClick={handleCraft}\n                className=\"w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 rounded transition-colors\"\n              >\n                Craft\n              </button>\n            </div>\n\n            <div className=\"mt-6\">\n              <h3 className=\"text-xl font-bold text-white mb-3\">Consumables</h3>\n              <div className=\"bg-gray-800 rounded-lg p-4 space-y-2 max-h-64 overflow-y-auto\">\n                {player.consumables.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-4\">\n                    No consumables crafted yet\n                  </p>\n                ) : (\n                  player.consumables.map((consumable, index) => (\n                    <div\n                      key={`${consumable.name}-${index}`}\n                      className=\"bg-gray-700 rounded p-3 flex items-center justify-between\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <p className=\"text-white font-medium\">{consumable.name}</p>\n                          {consumable.stackable && consumable.quantity && consumable.quantity > 1 && (\n                            <span className=\"bg-cyan-600 text-white text-xs px-2 py-0.5 rounded-full font-bold\">\n                              x{consumable.quantity}\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-gray-400 text-sm\">{consumable.description}</p>\n                      </div>\n                      <button\n                        onClick={() => onUseConsumable(consumable.id)}\n                        className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded font-medium transition-colors\"\n                      >\n                        Use\n                      </button>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <h3 className=\"text-xl font-bold text-white mb-3\">Discovered Recipes</h3>\n            <div className=\"bg-gray-800 rounded-lg p-4 space-y-3 max-h-[600px] overflow-y-auto\">\n              {discoveredRecipes.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">\n                  No recipes discovered yet. Collect resources to discover recipes!\n                </p>\n              ) : (\n                discoveredRecipes.map((recipe) => {\n                  const canCraft = craftingSystem.canCraft(player, recipe.id);\n                  return (\n                    <div\n                      key={recipe.id}\n                      className=\"bg-gray-700 rounded p-4 border-2 border-gray-600\"\n                    >\n                      <h4 className=\"text-white font-bold mb-2\">{recipe.name}</h4>\n                      <p className=\"text-gray-400 text-sm mb-3\">{recipe.description}</p>\n                      <div className=\"mb-3\">\n                        <p className=\"text-cyan-400 text-sm font-semibold mb-1\">\n                          Ingredients:\n                        </p>\n                        {recipe.ingredients.map((ingredient) => (\n                          <div\n                            key={ingredient.resource}\n                            className=\"text-sm text-gray-300 flex items-center justify-between gap-2\"\n                          >\n                            <div className=\"flex items-center gap-2\">\n                              <ResourceIcon resourceType={ingredient.resource} size={16} />\n                              <span>{RESOURCE_NAMES[ingredient.resource]}</span>\n                            </div>\n                            <span>\n                              {player.resources[ingredient.resource as ResourceType]}/\n                              {ingredient.amount}\n                            </span>\n                          </div>\n                        ))}\n                        {recipe.gridPattern && (\n                          <div className=\"mt-2\">\n                            <p className=\"text-cyan-400 text-xs font-semibold mb-1\">Pattern:</p>\n                            <PatternVisualizer pattern={recipe.gridPattern} size={60} />\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"space-y-2\">\n                        <button\n                          onClick={() => handleFillPattern(recipe.id)}\n                          className=\"w-full py-2 rounded font-medium transition-colors bg-blue-600 hover:bg-blue-700 text-white text-sm\"\n                        >\n                          Fill Pattern\n                        </button>\n                        <button\n                          onClick={() => handleCraftRecipe(recipe.id)}\n                          disabled={!canCraft}\n                          className={`w-full py-2 rounded font-medium transition-colors ${\n                            canCraft\n                              ? 'bg-cyan-600 hover:bg-cyan-700 text-white'\n                              : 'bg-gray-600 text-gray-400 cursor-not-allowed'\n                          }`}\n                        >\n                          {canCraft ? 'Craft' : 'Insufficient Resources'}\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14992},"eslint.config.js":{"content":"import js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);\n","size_bytes":739},"src/game/Environments.ts":{"content":"import { Vector2 } from '../types/game';\n\nexport interface Obstacle {\n  id: string;\n  position: Vector2;\n  size: Vector2;\n  rotation: number;\n  color: string;\n  shape: 'rectangle' | 'circle';\n  orbitData?: {\n    centerX: number;\n    centerY: number;\n    distance: number;\n    angle: number;\n    speed: number;\n    direction: number;\n  };\n}\n\nexport interface Environment {\n  id: string;\n  name: string;\n  backgroundColor: string;\n  gridColor: string;\n  accentColor: string;\n  particleColor: string;\n  obstacles: Obstacle[];\n  theme: {\n    primaryColor: string;\n    secondaryColor: string;\n    dangerColor: string;\n  };\n}\n\nconst createObstacles = (pattern: 'sparse' | 'moderate' | 'dense' | 'corridor' | 'arena'): Obstacle[] => {\n  const obstacles: Obstacle[] = [];\n  let id = 0;\n\n  switch (pattern) {\n    case 'sparse':\n      obstacles.push(\n        { id: `obs-${id++}`, position: { x: 300, y: 200 }, size: { x: 60, y: 60 }, rotation: 0, color: '#4a5568', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 900, y: 600 }, size: { x: 60, y: 60 }, rotation: 0, color: '#4a5568', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 600, y: 400 }, size: { x: 45, y: 45 }, rotation: 0, color: '#4a5568', shape: 'circle' }\n      );\n      break;\n\n    case 'moderate':\n      obstacles.push(\n        { id: `obs-${id++}`, position: { x: 250, y: 150 }, size: { x: 80, y: 40 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 950, y: 150 }, size: { x: 80, y: 40 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 250, y: 650 }, size: { x: 80, y: 40 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 950, y: 650 }, size: { x: 80, y: 40 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 600, y: 400 }, size: { x: 70, y: 70 }, rotation: 0.785, color: '#2d3748', shape: 'rectangle' }\n      );\n      break;\n\n    case 'dense':\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 2; j++) {\n          obstacles.push({\n            id: `obs-${id++}`,\n            position: { x: 300 + i * 300, y: 250 + j * 300 },\n            size: { x: 60, y: 60 },\n            rotation: Math.random() * Math.PI,\n            color: '#1a202c',\n            shape: 'rectangle'\n          });\n        }\n      }\n      break;\n\n    case 'corridor':\n      obstacles.push(\n        { id: `obs-${id++}`, position: { x: 400, y: 200 }, size: { x: 30, y: 200 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 800, y: 200 }, size: { x: 30, y: 200 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 400, y: 600 }, size: { x: 30, y: 200 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 800, y: 600 }, size: { x: 30, y: 200 }, rotation: 0, color: '#2d3748', shape: 'rectangle' }\n      );\n      break;\n\n    case 'arena':\n      obstacles.push(\n        { id: `obs-${id++}`, position: { x: 200, y: 400 }, size: { x: 100, y: 20 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 1000, y: 400 }, size: { x: 100, y: 20 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 600, y: 200 }, size: { x: 20, y: 100 }, rotation: 0, color: '#2d3748', shape: 'rectangle' },\n        { id: `obs-${id++}`, position: { x: 600, y: 600 }, size: { x: 20, y: 100 }, rotation: 0, color: '#2d3748', shape: 'rectangle' }\n      );\n      break;\n  }\n\n  return obstacles;\n};\n\nexport const ENVIRONMENTS: Environment[] = [\n  {\n    id: 'void-station',\n    name: 'Void Station',\n    backgroundColor: '#0a0e1a',\n    gridColor: '#1e293b33',\n    accentColor: '#38bdf8',\n    particleColor: '#60a5fa',\n    obstacles: createObstacles('sparse'),\n    theme: {\n      primaryColor: '#38bdf8',\n      secondaryColor: '#818cf8',\n      dangerColor: '#ef4444'\n    }\n  },\n  {\n    id: 'neon-city',\n    name: 'Neon City',\n    backgroundColor: '#1a0a1f',\n    gridColor: '#db277733',\n    accentColor: '#db2777',\n    particleColor: '#ec4899',\n    obstacles: createObstacles('moderate'),\n    theme: {\n      primaryColor: '#db2777',\n      secondaryColor: '#f472b6',\n      dangerColor: '#f97316'\n    }\n  },\n  {\n    id: 'toxic-waste',\n    name: 'Toxic Waste',\n    backgroundColor: '#0f1a0a',\n    gridColor: '#84cc1633',\n    accentColor: '#84cc16',\n    particleColor: '#a3e635',\n    obstacles: createObstacles('dense'),\n    theme: {\n      primaryColor: '#84cc16',\n      secondaryColor: '#bef264',\n      dangerColor: '#dc2626'\n    }\n  },\n  {\n    id: 'inferno-core',\n    name: 'Inferno Core',\n    backgroundColor: '#1f0a0a',\n    gridColor: '#f9731633',\n    accentColor: '#f97316',\n    particleColor: '#fb923c',\n    obstacles: createObstacles('corridor'),\n    theme: {\n      primaryColor: '#f97316',\n      secondaryColor: '#fdba74',\n      dangerColor: '#dc2626'\n    }\n  },\n  {\n    id: 'crystal-mines',\n    name: 'Crystal Mines',\n    backgroundColor: '#0a1a1f',\n    gridColor: '#06b6d433',\n    accentColor: '#06b6d4',\n    particleColor: '#22d3ee',\n    obstacles: createObstacles('arena'),\n    theme: {\n      primaryColor: '#06b6d4',\n      secondaryColor: '#67e8f9',\n      dangerColor: '#e11d48'\n    }\n  }\n];\n\nexport const getEnvironmentForWave = (wave: number): Environment => {\n  const index = Math.floor((wave - 1) / 5) % ENVIRONMENTS.length;\n  return ENVIRONMENTS[index];\n};\n","size_bytes":5539},"src/components/ResourceIcon.tsx":{"content":"import React from 'react';\n\ninterface ResourceIconProps {\n  resourceType: string;\n  size?: number;\n}\n\nexport default function ResourceIcon({ resourceType, size = 24 }: ResourceIconProps) {\n  const renderIcon = () => {\n    switch (resourceType) {\n      case 'energy':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M13 2L3 14h8l-1 8 10-12h-8l1-8z\" fill=\"#3b82f6\" stroke=\"#1e40af\" strokeWidth=\"2\"/>\n          </svg>\n        );\n\n      case 'coreDust':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"8\" cy=\"8\" r=\"2\" fill=\"#a855f7\"/>\n            <circle cx=\"16\" cy=\"10\" r=\"1.5\" fill=\"#9333ea\"/>\n            <circle cx=\"12\" cy=\"14\" r=\"2.5\" fill=\"#c084fc\"/>\n            <circle cx=\"18\" cy=\"16\" r=\"1.5\" fill=\"#a855f7\"/>\n            <circle cx=\"10\" cy=\"18\" r=\"2\" fill=\"#9333ea\"/>\n          </svg>\n        );\n\n      case 'flux':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 2L2 8v8l10 6 10-6V8l-10-6z\" fill=\"#06b6d4\" stroke=\"#0891b2\" strokeWidth=\"2\"/>\n            <path d=\"M12 8L7 11v6l5 3 5-3v-6l-5-3z\" fill=\"#67e8f9\"/>\n          </svg>\n        );\n\n      case 'geoShards':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 3L15 9L21 12L15 15L12 21L9 15L3 12L9 9z\" fill=\"#d97706\" stroke=\"#92400e\" strokeWidth=\"2\"/>\n            <path d=\"M12 8L14 12L12 16L10 12z\" fill=\"#fbbf24\"/>\n          </svg>\n        );\n\n      case 'alloyFragments':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <rect x=\"4\" y=\"6\" width=\"6\" height=\"8\" fill=\"#6b7280\" stroke=\"#374151\" strokeWidth=\"2\"/>\n            <rect x=\"11\" y=\"10\" width=\"6\" height=\"6\" fill=\"#9ca3af\" stroke=\"#4b5563\" strokeWidth=\"2\"/>\n            <rect x=\"8\" y=\"14\" width=\"5\" height=\"6\" fill=\"#6b7280\" stroke=\"#374151\" strokeWidth=\"2\"/>\n          </svg>\n        );\n\n      case 'singularityCore':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#ec4899\" stroke=\"#be185d\" strokeWidth=\"2\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"4\" fill=\"#f9a8d4\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"#fce7f3\"/>\n          </svg>\n        );\n\n      case 'cryoKelp':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 2C10 6 8 10 8 14c0 2 1 4 4 6 3-2 4-4 4-6 0-4-2-8-4-12z\" fill=\"#2dd4bf\" stroke=\"#0f766e\" strokeWidth=\"2\"/>\n            <path d=\"M10 8c-2 2-3 4-3 6 0 1.5 0.5 2.5 2 3.5M14 8c2 2 3 4 3 6 0 1.5-0.5 2.5-2 3.5\" stroke=\"#99f6e4\" strokeWidth=\"1.5\"/>\n          </svg>\n        );\n\n      case 'obsidianHeart':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 21l-1.5-1.4C5.4 15.4 2 12.3 2 8.5 2 5.4 4.4 3 7.5 3c1.7 0 3.4.9 4.5 2.3C13.1 3.9 14.8 3 16.5 3 19.6 3 22 5.4 22 8.5c0 3.8-3.4 6.9-8.5 11.1L12 21z\" fill=\"#7f1d1d\" stroke=\"#450a0a\" strokeWidth=\"2\"/>\n            <path d=\"M12 7c-1-1.5-2-2-3.5-2C7 5 6 6 6 7.5c0 2.5 2 4.5 6 8 4-3.5 6-5.5 6-8C18 6 17 5 15.5 5 14 5 13 5.5 12 7z\" fill=\"#991b1b\"/>\n          </svg>\n        );\n\n      case 'gloomRoot':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 2v8M12 10c-2 0-4 2-4 4v6M12 10c2 0 4 2 4 4v6M8 16c-2 0-3 1-3 2v2M16 16c2 0 3 1 3 2v2\" stroke=\"#4338ca\" strokeWidth=\"2\" fill=\"none\"/>\n            <circle cx=\"12\" cy=\"2\" r=\"2\" fill=\"#6366f1\"/>\n            <circle cx=\"8\" cy=\"14\" r=\"1.5\" fill=\"#4338ca\"/>\n            <circle cx=\"16\" cy=\"14\" r=\"1.5\" fill=\"#4338ca\"/>\n          </svg>\n        );\n\n      case 'resonantCrystal':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 2L6 8l6 6 6-6-6-6z\" fill=\"#c084fc\" stroke=\"#7e22ce\" strokeWidth=\"2\"/>\n            <path d=\"M6 8l6 6v8l-6-6V8z\" fill=\"#a855f7\" stroke=\"#7e22ce\" strokeWidth=\"2\"/>\n            <path d=\"M18 8l-6 6v8l6-6V8z\" fill=\"#d8b4fe\" stroke=\"#7e22ce\" strokeWidth=\"2\"/>\n          </svg>\n        );\n\n      case 'voidEssence':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"12\" cy=\"12\" r=\"9\" fill=\"#581c87\" stroke=\"#3b0764\" strokeWidth=\"2\"/>\n            <path d=\"M12 6c-3 0-5 2-5 5 0 1.5 0.7 3 2 4M12 6c3 0 5 2 5 5 0 1.5-0.7 3-2 4\" stroke=\"#a78bfa\" strokeWidth=\"1.5\" fill=\"none\"/>\n            <circle cx=\"9\" cy=\"10\" r=\"1.5\" fill=\"#a78bfa\"/>\n            <circle cx=\"15\" cy=\"10\" r=\"1.5\" fill=\"#a78bfa\"/>\n          </svg>\n        );\n\n      case 'bioluminescentPearl':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"12\" cy=\"12\" r=\"7\" fill=\"#7dd3fc\" stroke=\"#0369a1\" strokeWidth=\"2\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"4\" fill=\"#bae6fd\"/>\n            <circle cx=\"10\" cy=\"10\" r=\"2\" fill=\"#e0f2fe\"/>\n          </svg>\n        );\n\n      case 'sunpetalBloom':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"#fbbf24\"/>\n            <path d=\"M12 5v3M12 16v3M5 12h3M16 12h3M7.75 7.75l2.12 2.12M14.13 14.13l2.12 2.12M7.75 16.25l2.12-2.12M14.13 9.87l2.12-2.12\" stroke=\"#facc15\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n          </svg>\n        );\n\n      case 'aetheriumShard':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <path d=\"M12 3L18 9L15 12L21 18L12 21L3 18L9 12L6 9z\" fill=\"#38bdf8\" stroke=\"#0284c7\" strokeWidth=\"2\"/>\n            <path d=\"M12 8L15 12L12 16L9 12z\" fill=\"#7dd3fc\"/>\n          </svg>\n        );\n\n      case 'gravitonEssence':\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"#c026d3\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"#c026d3\" strokeWidth=\"2\" fill=\"none\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"8\" stroke=\"#c026d3\" strokeWidth=\"1.5\" fill=\"none\" opacity=\"0.5\"/>\n            <circle cx=\"8\" cy=\"8\" r=\"1.5\" fill=\"#e879f9\"/>\n            <circle cx=\"16\" cy=\"8\" r=\"1.5\" fill=\"#e879f9\"/>\n            <circle cx=\"8\" cy=\"16\" r=\"1.5\" fill=\"#e879f9\"/>\n            <circle cx=\"16\" cy=\"16\" r=\"1.5\" fill=\"#e879f9\"/>\n          </svg>\n        );\n\n      default:\n        return (\n          <svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\">\n            <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" fill=\"#6b7280\" stroke=\"#374151\" strokeWidth=\"2\" rx=\"2\"/>\n          </svg>\n        );\n    }\n  };\n\n  return <div className=\"flex items-center justify-center\">{renderIcon()}</div>;\n}\n","size_bytes":6803},"src/game/ResourceIconRenderer.ts":{"content":"export class ResourceIconRenderer {\n  static renderIcon(\n    ctx: CanvasRenderingContext2D,\n    resourceType: string,\n    x: number,\n    y: number,\n    size: number\n  ): void {\n    ctx.save();\n    ctx.translate(x, y);\n\n    const scale = size / 12;\n    ctx.scale(scale, scale);\n    ctx.translate(-12, -12);\n\n    switch (resourceType) {\n      case 'energy':\n        ctx.strokeStyle = '#60a5fa';\n        ctx.fillStyle = '#3b82f6';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(12, 12, 6, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#93c5fd';\n        ctx.beginPath();\n        ctx.arc(12, 12, 3, 0, Math.PI * 2);\n        ctx.fill();\n        for (let i = 0; i < 6; i++) {\n          const angle = (Math.PI * 2 / 6) * i;\n          const x1 = 12 + Math.cos(angle) * 7;\n          const y1 = 12 + Math.sin(angle) * 7;\n          const x2 = 12 + Math.cos(angle) * 10;\n          const y2 = 12 + Math.sin(angle) * 10;\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.strokeStyle = '#60a5fa';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n        break;\n\n      case 'coreDust':\n        this.drawCircle(ctx, 8, 8, 2, '#a855f7');\n        this.drawCircle(ctx, 16, 10, 1.5, '#9333ea');\n        this.drawCircle(ctx, 12, 14, 2.5, '#c084fc');\n        this.drawCircle(ctx, 18, 16, 1.5, '#a855f7');\n        this.drawCircle(ctx, 10, 18, 2, '#9333ea');\n        break;\n\n      case 'flux':\n        ctx.fillStyle = '#06b6d4';\n        ctx.strokeStyle = '#0891b2';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 2);\n        ctx.lineTo(2, 8);\n        ctx.lineTo(2, 16);\n        ctx.lineTo(12, 22);\n        ctx.lineTo(22, 16);\n        ctx.lineTo(22, 8);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#67e8f9';\n        ctx.beginPath();\n        ctx.moveTo(12, 8);\n        ctx.lineTo(7, 11);\n        ctx.lineTo(7, 17);\n        ctx.lineTo(12, 20);\n        ctx.lineTo(17, 17);\n        ctx.lineTo(17, 11);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'geoShards':\n        ctx.fillStyle = '#d97706';\n        ctx.strokeStyle = '#92400e';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 3);\n        ctx.lineTo(15, 9);\n        ctx.lineTo(21, 12);\n        ctx.lineTo(15, 15);\n        ctx.lineTo(12, 21);\n        ctx.lineTo(9, 15);\n        ctx.lineTo(3, 12);\n        ctx.lineTo(9, 9);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#fbbf24';\n        ctx.beginPath();\n        ctx.moveTo(12, 8);\n        ctx.lineTo(14, 12);\n        ctx.lineTo(12, 16);\n        ctx.lineTo(10, 12);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'alloyFragments':\n        ctx.fillStyle = '#6b7280';\n        ctx.strokeStyle = '#374151';\n        ctx.lineWidth = 2;\n        ctx.fillRect(4, 6, 6, 8);\n        ctx.strokeRect(4, 6, 6, 8);\n        ctx.fillStyle = '#9ca3af';\n        ctx.fillRect(11, 10, 6, 6);\n        ctx.strokeRect(11, 10, 6, 6);\n        ctx.fillStyle = '#6b7280';\n        ctx.fillRect(8, 14, 5, 6);\n        ctx.strokeRect(8, 14, 5, 6);\n        break;\n\n      case 'singularityCore':\n        this.drawCircle(ctx, 12, 12, 8, '#ec4899', '#be185d', 2);\n        this.drawCircle(ctx, 12, 12, 4, '#f9a8d4');\n        this.drawCircle(ctx, 12, 12, 2, '#fce7f3');\n        break;\n\n      case 'cryoKelp':\n        ctx.fillStyle = '#2dd4bf';\n        ctx.strokeStyle = '#0f766e';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 2);\n        ctx.bezierCurveTo(10, 6, 8, 10, 8, 14);\n        ctx.bezierCurveTo(8, 16, 9, 18, 12, 20);\n        ctx.bezierCurveTo(15, 18, 16, 16, 16, 14);\n        ctx.bezierCurveTo(16, 10, 14, 6, 12, 2);\n        ctx.fill();\n        ctx.stroke();\n        break;\n\n      case 'obsidianHeart':\n        ctx.fillStyle = '#7f1d1d';\n        ctx.strokeStyle = '#450a0a';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 21);\n        ctx.bezierCurveTo(6.5, 15.4, 2, 12.3, 2, 8.5);\n        ctx.bezierCurveTo(2, 5.4, 4.4, 3, 7.5, 3);\n        ctx.bezierCurveTo(9.2, 3, 10.9, 3.9, 12, 5.3);\n        ctx.bezierCurveTo(13.1, 3.9, 14.8, 3, 16.5, 3);\n        ctx.bezierCurveTo(19.6, 3, 22, 5.4, 22, 8.5);\n        ctx.bezierCurveTo(22, 12.3, 17.5, 15.4, 12, 21);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n\n      case 'gloomRoot':\n        ctx.strokeStyle = '#4338ca';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 2);\n        ctx.lineTo(12, 10);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(12, 10);\n        ctx.bezierCurveTo(10, 10, 8, 12, 8, 14);\n        ctx.lineTo(8, 20);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(12, 10);\n        ctx.bezierCurveTo(14, 10, 16, 12, 16, 14);\n        ctx.lineTo(16, 20);\n        ctx.stroke();\n        this.drawCircle(ctx, 12, 2, 2, '#6366f1');\n        this.drawCircle(ctx, 8, 14, 1.5, '#4338ca');\n        this.drawCircle(ctx, 16, 14, 1.5, '#4338ca');\n        break;\n\n      case 'resonantCrystal':\n        ctx.fillStyle = '#c084fc';\n        ctx.strokeStyle = '#7e22ce';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 2);\n        ctx.lineTo(6, 8);\n        ctx.lineTo(12, 14);\n        ctx.lineTo(18, 8);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#a855f7';\n        ctx.beginPath();\n        ctx.moveTo(6, 8);\n        ctx.lineTo(12, 14);\n        ctx.lineTo(12, 22);\n        ctx.lineTo(6, 16);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#d8b4fe';\n        ctx.beginPath();\n        ctx.moveTo(18, 8);\n        ctx.lineTo(12, 14);\n        ctx.lineTo(12, 22);\n        ctx.lineTo(18, 16);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n\n      case 'voidEssence':\n        this.drawCircle(ctx, 12, 12, 9, '#581c87', '#3b0764', 2);\n        ctx.strokeStyle = '#a78bfa';\n        ctx.lineWidth = 1.5;\n        ctx.beginPath();\n        ctx.moveTo(12, 6);\n        ctx.bezierCurveTo(9, 6, 7, 8, 7, 11);\n        ctx.bezierCurveTo(7, 12.5, 7.7, 14, 9, 15);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(12, 6);\n        ctx.bezierCurveTo(15, 6, 17, 8, 17, 11);\n        ctx.bezierCurveTo(17, 12.5, 16.3, 14, 15, 15);\n        ctx.stroke();\n        this.drawCircle(ctx, 9, 10, 1.5, '#a78bfa');\n        this.drawCircle(ctx, 15, 10, 1.5, '#a78bfa');\n        break;\n\n      case 'bioluminescentPearl':\n        this.drawCircle(ctx, 12, 12, 7, '#7dd3fc', '#0369a1', 2);\n        this.drawCircle(ctx, 12, 12, 4, '#bae6fd');\n        this.drawCircle(ctx, 10, 10, 2, '#e0f2fe');\n        break;\n\n      case 'sunpetalBloom':\n        this.drawCircle(ctx, 12, 12, 3, '#fbbf24');\n        ctx.strokeStyle = '#facc15';\n        ctx.lineWidth = 2;\n        ctx.lineCap = 'round';\n        const petalPositions = [\n          [12, 5, 12, 8],\n          [12, 16, 12, 19],\n          [5, 12, 8, 12],\n          [16, 12, 19, 12],\n          [7.75, 7.75, 9.87, 9.87],\n          [14.13, 14.13, 16.25, 16.25],\n          [7.75, 16.25, 9.87, 14.13],\n          [14.13, 9.87, 16.25, 7.75],\n        ];\n        petalPositions.forEach(([x1, y1, x2, y2]) => {\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.stroke();\n        });\n        break;\n\n      case 'aetheriumShard':\n        ctx.fillStyle = '#38bdf8';\n        ctx.strokeStyle = '#0284c7';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(12, 3);\n        ctx.lineTo(18, 9);\n        ctx.lineTo(15, 12);\n        ctx.lineTo(21, 18);\n        ctx.lineTo(12, 21);\n        ctx.lineTo(3, 18);\n        ctx.lineTo(9, 12);\n        ctx.lineTo(6, 9);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = '#7dd3fc';\n        ctx.beginPath();\n        ctx.moveTo(12, 8);\n        ctx.lineTo(15, 12);\n        ctx.lineTo(12, 16);\n        ctx.lineTo(9, 12);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'gravitonEssence':\n        this.drawCircle(ctx, 12, 12, 2, '#c026d3');\n        ctx.strokeStyle = '#c026d3';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.arc(12, 12, 5, 0, Math.PI * 2);\n        ctx.stroke();\n        ctx.lineWidth = 1.5;\n        ctx.globalAlpha = 0.5;\n        ctx.beginPath();\n        ctx.arc(12, 12, 8, 0, Math.PI * 2);\n        ctx.stroke();\n        ctx.globalAlpha = 1;\n        this.drawCircle(ctx, 8, 8, 1.5, '#e879f9');\n        this.drawCircle(ctx, 16, 8, 1.5, '#e879f9');\n        this.drawCircle(ctx, 8, 16, 1.5, '#e879f9');\n        this.drawCircle(ctx, 16, 16, 1.5, '#e879f9');\n        break;\n\n      case 'crateKey':\n        ctx.fillStyle = '#fbbf24';\n        ctx.strokeStyle = '#d97706';\n        ctx.lineWidth = 2;\n        this.drawCircle(ctx, 12, 8, 3, '#fbbf24', '#d97706', 2);\n        ctx.fillStyle = '#fbbf24';\n        ctx.fillRect(11, 8, 2, 10);\n        ctx.strokeRect(11, 8, 2, 10);\n        ctx.fillRect(13, 13, 4, 2);\n        ctx.strokeRect(13, 13, 4, 2);\n        ctx.fillRect(13, 16, 3, 2);\n        ctx.strokeRect(13, 16, 3, 2);\n        break;\n\n      default:\n        ctx.fillStyle = '#6b7280';\n        ctx.strokeStyle = '#374151';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.roundRect(4, 4, 16, 16, 2);\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n\n    ctx.restore();\n  }\n\n  private static drawCircle(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    radius: number,\n    fill: string,\n    stroke?: string,\n    strokeWidth?: number\n  ): void {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = fill;\n    ctx.fill();\n    if (stroke) {\n      ctx.strokeStyle = stroke;\n      ctx.lineWidth = strokeWidth || 1;\n      ctx.stroke();\n    }\n  }\n}\n","size_bytes":9934},"src/components/TradingPostUI.tsx":{"content":"import { useState } from 'react';\nimport { Shrine } from '../game/TradingPostSystem';\nimport { DollarSign, Package, X, Swords, ShoppingBag, Trash2 } from 'lucide-react';\nimport { Weapon } from '../types/game';\n\ninterface ShrineUIProps {\n  shrine: Shrine | null;\n  playerCurrency: number;\n  playerResources: any;\n  playerWeapons?: Weapon[];\n  onRoll: () => void;\n  onTrade?: (fromResource: string, toResource: string) => void;\n  onSellWeapon?: (weaponId: string) => void;\n  onClose: () => void;\n}\n\nexport default function TradingPostUI({\n  shrine,\n  playerCurrency,\n  playerResources,\n  playerWeapons = [],\n  onRoll,\n  onTrade,\n  onSellWeapon,\n  onClose,\n}: ShrineUIProps) {\n  const [isRolling, setIsRolling] = useState(false);\n  const [rolledWeapon, setRolledWeapon] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState<'weapons' | 'trading' | 'sell'>('weapons');\n\n  if (!shrine) return null;\n\n  const canAfford = playerCurrency >= shrine.rollCost;\n  const showWeapons = shrine.shrineType === 'weapon' || shrine.shrineType === 'mixed';\n  const showTrading = shrine.shrineType === 'trading' || shrine.shrineType === 'mixed';\n\n  const handleRoll = () => {\n    if (!canAfford || isRolling) return;\n\n    setIsRolling(true);\n    const result = onRoll();\n    setRolledWeapon(result);\n\n    setTimeout(() => {\n      setIsRolling(false);\n    }, 500);\n  };\n\n  const calculateWeaponValue = (weapon: Weapon): number => {\n    let value = 50;\n    if (weapon.perks) {\n      weapon.perks.forEach((perk: any) => {\n        switch (perk.rarity) {\n          case 'legendary': value += 100; break;\n          case 'epic': value += 60; break;\n          case 'rare': value += 30; break;\n          case 'common': value += 10; break;\n        }\n      });\n    }\n    return value;\n  };\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'legendary':\n        return '#fbbf24';\n      case 'rare':\n        return '#a78bfa';\n      case 'common':\n        return '#94a3b8';\n      default:\n        return '#ffffff';\n    }\n  };\n\n  const getShrineTitle = () => {\n    if (shrine.shrineType === 'weapon') return 'Weapon Shrine';\n    if (shrine.shrineType === 'trading') return 'Trading Shrine';\n    return 'Mystic Shrine';\n  };\n\n  const getShrineIcon = () => {\n    if (shrine.shrineType === 'weapon') return <Swords className=\"w-6 h-6\" style={{ color: shrine.crystalColor }} />;\n    if (shrine.shrineType === 'trading') return <ShoppingBag className=\"w-6 h-6\" style={{ color: shrine.crystalColor }} />;\n    return <Package className=\"w-6 h-6\" style={{ color: shrine.crystalColor }} />;\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm pointer-events-auto\">\n      <div className=\"bg-slate-900 border-2 rounded-xl p-6 max-w-2xl w-full mx-4 shadow-2xl\" style={{ borderColor: `${shrine.crystalColor}80`, boxShadow: `0 0 30px ${shrine.crystalColor}40` }}>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            {getShrineIcon()}\n            <h2 className=\"text-2xl font-bold text-white\">{getShrineTitle()}</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-white transition-colors\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {shrine.shrineType === 'mixed' && (\n          <div className=\"flex gap-2 mb-4\">\n            <button\n              onClick={() => setActiveTab('weapons')}\n              className={`flex-1 py-2 px-4 rounded-lg font-semibold transition-colors ${\n                activeTab === 'weapons'\n                  ? 'text-white'\n                  : 'bg-slate-800 text-slate-400 hover:text-white'\n              }`}\n              style={activeTab === 'weapons' ? { backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor } : {}}\n            >\n              <Swords className=\"w-4 h-4 inline mr-2\" />\n              Weapons\n            </button>\n            <button\n              onClick={() => setActiveTab('sell')}\n              className={`flex-1 py-2 px-4 rounded-lg font-semibold transition-colors ${\n                activeTab === 'sell'\n                  ? 'text-white'\n                  : 'bg-slate-800 text-slate-400 hover:text-white'\n              }`}\n              style={activeTab === 'sell' ? { backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor } : {}}\n            >\n              <DollarSign className=\"w-4 h-4 inline mr-2\" />\n              Sell\n            </button>\n            <button\n              onClick={() => setActiveTab('trading')}\n              className={`flex-1 py-2 px-4 rounded-lg font-semibold transition-colors ${\n                activeTab === 'trading'\n                  ? 'text-white'\n                  : 'bg-slate-800 text-slate-400 hover:text-white'\n              }`}\n              style={activeTab === 'trading' ? { backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor } : {}}\n            >\n              <ShoppingBag className=\"w-4 h-4 inline mr-2\" />\n              Trading\n            </button>\n          </div>\n        )}\n\n        {showWeapons && shrine.shrineType !== 'mixed' && (\n          <div className=\"flex gap-2 mb-4\">\n            <button\n              onClick={() => setActiveTab('weapons')}\n              className={`flex-1 py-2 px-4 rounded-lg font-semibold transition-colors ${\n                activeTab === 'weapons'\n                  ? 'text-white'\n                  : 'bg-slate-800 text-slate-400 hover:text-white'\n              }`}\n              style={activeTab === 'weapons' ? { backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor } : {}}\n            >\n              <Swords className=\"w-4 h-4 inline mr-2\" />\n              Roll\n            </button>\n            <button\n              onClick={() => setActiveTab('sell')}\n              className={`flex-1 py-2 px-4 rounded-lg font-semibold transition-colors ${\n                activeTab === 'sell'\n                  ? 'text-white'\n                  : 'bg-slate-800 text-slate-400 hover:text-white'\n              }`}\n              style={activeTab === 'sell' ? { backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor } : {}}\n            >\n              <DollarSign className=\"w-4 h-4 inline mr-2\" />\n              Sell\n            </button>\n          </div>\n        )}\n\n        <div className=\"mb-6\">\n          {(showWeapons && (shrine.shrineType !== 'mixed' || activeTab === 'weapons')) && (\n            <>\n              <p className=\"text-slate-400 text-sm mb-4\">\n                Channel the shrine's energy to summon a random weapon from this biome's arsenal. Each biome offers unique powers!\n              </p>\n\n              {rolledWeapon && (\n                <div className=\"bg-gradient-to-r from-slate-800/80 to-slate-700/80 border-2 rounded-lg p-4 mb-4 animate-pulse-once\" style={{ borderColor: shrine.crystalColor }}>\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Package className=\"w-6 h-6\" style={{ color: shrine.crystalColor }} />\n                    <h3 className=\"text-lg font-bold text-white\">You Rolled:</h3>\n                  </div>\n                  <div className=\"bg-slate-900/80 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-bold text-white\" style={{ color: rolledWeapon.color }}>{rolledWeapon.name}</span>\n                      <span className=\"text-xs bg-slate-700 px-2 py-1 rounded\">{rolledWeapon.type}</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 text-xs text-slate-300 mb-2\">\n                      <div>Damage: <span className=\"font-bold\">{rolledWeapon.damage}</span></div>\n                      <div>Fire Rate: <span className=\"font-bold\">{rolledWeapon.fireRate.toFixed(2)}</span></div>\n                      <div>Speed: <span className=\"font-bold\">{rolledWeapon.projectileSpeed}</span></div>\n                      <div>Count: <span className=\"font-bold\">{rolledWeapon.projectileCount}</span></div>\n                    </div>\n                    {rolledWeapon.perks && rolledWeapon.perks.length > 0 && (\n                      <div>\n                        <span className=\"text-xs text-slate-400\">Perks:</span>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {rolledWeapon.perks.map((perk: any, idx: number) => (\n                            <span\n                              key={idx}\n                              className=\"text-xs px-2 py-0.5 rounded\"\n                              style={{\n                                backgroundColor: `${getRarityColor(perk.rarity)}20`,\n                                color: getRarityColor(perk.rarity),\n                              }}\n                            >\n                              {perk.name}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <button\n                    onClick={() => setRolledWeapon(null)}\n                    className=\"mt-3 w-full py-2 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors\"\n                  >\n                    Dismiss\n                  </button>\n                </div>\n              )}\n\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-slate-300 font-semibold\">Roll Cost</span>\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-5 h-5 text-yellow-400\" />\n                    <span className=\"text-xl font-bold text-yellow-300\">{shrine.rollCost}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-300 font-semibold\">Your Currency</span>\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-5 h-5 text-yellow-400\" />\n                    <span className=\"text-xl font-bold text-yellow-300\">{playerCurrency}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-4\">\n                <h3 className=\"text-slate-300 font-semibold mb-3\">Available Weapons</h3>\n                <div className=\"space-y-2\">\n                  {shrine.availableWeapons.map((roll, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-slate-900/50 rounded\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className=\"w-2 h-2 rounded-full\"\n                          style={{ backgroundColor: roll.weapon.color }}\n                        />\n                        <span className=\"text-slate-200\">{roll.weapon.name}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span\n                          className=\"text-xs font-bold uppercase px-2 py-1 rounded\"\n                          style={{\n                            backgroundColor: `${getRarityColor(roll.rarity)}20`,\n                            color: getRarityColor(roll.rarity),\n                          }}\n                        >\n                          {roll.rarity}\n                        </span>\n                        <span className=\"text-slate-400 text-xs\">\n                          {Math.round((roll.weight / shrine.availableWeapons.reduce((sum, r) => sum + r.weight, 0)) * 100)}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {(showTrading && (shrine.shrineType !== 'mixed' || activeTab === 'trading')) && (\n            <>\n              <p className=\"text-slate-400 text-sm mb-4\">\n                Exchange materials at this shrine. Trade common resources for rare ones!\n              </p>\n\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-4\">\n                <h3 className=\"text-slate-300 font-semibold mb-3\">Material Trading</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-slate-900/50 rounded\">\n                    <div className=\"text-slate-300 mb-2\">Trade 10 Energy → 1 Core Dust</div>\n                    <button\n                      onClick={() => onTrade?.('energy', 'coreDust')}\n                      disabled={!playerResources || playerResources.energy < 10}\n                      className=\"w-full py-2 px-4 rounded text-sm font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{ backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor }}\n                    >\n                      Trade (Have: {playerResources?.energy || 0})\n                    </button>\n                  </div>\n                  <div className=\"p-3 bg-slate-900/50 rounded\">\n                    <div className=\"text-slate-300 mb-2\">Trade 5 Core Dust → 1 Flux</div>\n                    <button\n                      onClick={() => onTrade?.('coreDust', 'flux')}\n                      disabled={!playerResources || playerResources.coreDust < 5}\n                      className=\"w-full py-2 px-4 rounded text-sm font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{ backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor }}\n                    >\n                      Trade (Have: {playerResources?.coreDust || 0})\n                    </button>\n                  </div>\n                  <div className=\"p-3 bg-slate-900/50 rounded\">\n                    <div className=\"text-slate-300 mb-2\">Trade 3 Flux → 1 Alloy Fragment</div>\n                    <button\n                      onClick={() => onTrade?.('flux', 'alloyFragments')}\n                      disabled={!playerResources || playerResources.flux < 3}\n                      className=\"w-full py-2 px-4 rounded text-sm font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{ backgroundColor: `${shrine.crystalColor}40`, color: shrine.crystalColor }}\n                    >\n                      Trade (Have: {playerResources?.flux || 0})\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n\n          {activeTab === 'sell' && (\n            <>\n              <p className=\"text-slate-400 text-sm mb-4\">\n                Sell weapons you don't need for currency. Price is based on weapon rarity and perks!\n              </p>\n\n              {rolledWeapon && (\n                <div className=\"bg-gradient-to-r from-slate-800/80 to-slate-700/80 border-2 rounded-lg p-4 mb-4 animate-pulse-once\" style={{ borderColor: shrine.crystalColor }}>\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Package className=\"w-6 h-6\" style={{ color: shrine.crystalColor }} />\n                    <h3 className=\"text-lg font-bold text-white\">You Rolled:</h3>\n                  </div>\n                  <div className=\"bg-slate-900/80 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-bold text-white\" style={{ color: rolledWeapon.color }}>{rolledWeapon.name}</span>\n                      <span className=\"text-xs bg-slate-700 px-2 py-1 rounded\">{rolledWeapon.type}</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 text-xs text-slate-300 mb-2\">\n                      <div>Damage: <span className=\"font-bold\">{rolledWeapon.damage}</span></div>\n                      <div>Fire Rate: <span className=\"font-bold\">{rolledWeapon.fireRate.toFixed(2)}</span></div>\n                      <div>Speed: <span className=\"font-bold\">{rolledWeapon.projectileSpeed}</span></div>\n                      <div>Count: <span className=\"font-bold\">{rolledWeapon.projectileCount}</span></div>\n                    </div>\n                    {rolledWeapon.perks && rolledWeapon.perks.length > 0 && (\n                      <div>\n                        <span className=\"text-xs text-slate-400\">Perks:</span>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {rolledWeapon.perks.map((perk: any, idx: number) => (\n                            <span\n                              key={idx}\n                              className=\"text-xs px-2 py-0.5 rounded\"\n                              style={{\n                                backgroundColor: `${getRarityColor(perk.rarity)}20`,\n                                color: getRarityColor(perk.rarity),\n                              }}\n                            >\n                              {perk.name}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <button\n                    onClick={() => setRolledWeapon(null)}\n                    className=\"mt-3 w-full py-2 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors\"\n                  >\n                    Dismiss\n                  </button>\n                </div>\n              )}\n\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-4 max-h-96 overflow-y-auto\">\n                <h3 className=\"text-slate-300 font-semibold mb-3\">Your Weapons</h3>\n                {playerWeapons.length === 0 ? (\n                  <p className=\"text-slate-500 text-center py-8\">No weapons to sell</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {playerWeapons.map((weapon) => {\n                      const value = calculateWeaponValue(weapon);\n                      return (\n                        <div\n                          key={weapon.id}\n                          className=\"flex items-center justify-between p-3 bg-slate-900/50 rounded hover:bg-slate-900/70 transition-colors\"\n                        >\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <div\n                                className=\"w-3 h-3 rounded-full\"\n                                style={{ backgroundColor: weapon.color }}\n                              />\n                              <span className=\"text-slate-200 font-semibold\">{weapon.name}</span>\n                              <span className=\"text-xs bg-slate-700 px-1.5 py-0.5 rounded\">{weapon.type}</span>\n                            </div>\n                            {weapon.perks && weapon.perks.length > 0 && (\n                              <div className=\"flex flex-wrap gap-1 ml-5\">\n                                {weapon.perks.map((perk: any, idx: number) => (\n                                  <span\n                                    key={idx}\n                                    className=\"text-xs px-1.5 py-0.5 rounded\"\n                                    style={{\n                                      backgroundColor: `${getRarityColor(perk.rarity)}15`,\n                                      color: getRarityColor(perk.rarity),\n                                    }}\n                                  >\n                                    {perk.name}\n                                  </span>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                          <button\n                            onClick={() => onSellWeapon?.(weapon.id)}\n                            className=\"ml-3 px-4 py-2 rounded font-semibold text-sm transition-all flex items-center gap-2 hover:scale-105\"\n                            style={{\n                              backgroundColor: `${shrine.crystalColor}30`,\n                              color: shrine.crystalColor,\n                              border: `1px solid ${shrine.crystalColor}50`,\n                            }}\n                          >\n                            <DollarSign className=\"w-4 h-4\" />\n                            Sell {value}\n                          </button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n\n        {(showWeapons && (shrine.shrineType !== 'mixed' || activeTab === 'weapons')) && (\n          <div className=\"flex gap-3\">\n            <button\n              onClick={handleRoll}\n              disabled={!canAfford || isRolling}\n              className={`flex-1 py-3 px-6 rounded-lg font-bold text-lg transition-all ${\n                !canAfford || isRolling\n                  ? 'bg-slate-700 text-slate-500 cursor-not-allowed'\n                  : ''\n              }`}\n              style={canAfford && !isRolling ? {\n                background: `linear-gradient(to right, ${shrine.crystalColor}, ${shrine.crystalColor}dd)`,\n                color: 'white',\n                boxShadow: `0 4px 12px ${shrine.crystalColor}50`\n              } : {}}\n            >\n              {isRolling ? 'Channeling...' : 'Channel Shrine'}\n            </button>\n            <button\n              onClick={onClose}\n              className=\"py-3 px-6 rounded-lg font-bold text-lg bg-slate-700 text-slate-300 hover:bg-slate-600 transition-colors\"\n            >\n              Close\n            </button>\n          </div>\n        )}\n\n        {(showTrading && shrine.shrineType === 'trading') && (\n          <div className=\"flex justify-end\">\n            <button\n              onClick={onClose}\n              className=\"py-3 px-6 rounded-lg font-bold text-lg bg-slate-700 text-slate-300 hover:bg-slate-600 transition-colors\"\n            >\n              Close\n            </button>\n          </div>\n        )}\n\n        {shrine.shrineType === 'mixed' && (\n          <div className=\"flex justify-end\">\n            <button\n              onClick={onClose}\n              className=\"py-3 px-6 rounded-lg font-bold text-lg bg-slate-700 text-slate-300 hover:bg-slate-600 transition-colors\"\n            >\n              Close\n            </button>\n          </div>\n        )}\n\n        {showWeapons && (shrine.shrineType !== 'mixed' || activeTab === 'weapons') && !canAfford && (\n          <p className=\"text-red-400 text-sm text-center mt-3\">\n            Not enough currency to roll\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":23066},"src/game/MeleeWeaponPerks.ts":{"content":"import { Weapon } from '../types/game';\n\nexport interface MeleeWeaponPerk {\n  id: string;\n  name: string;\n  description: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  icon: string;\n  effects: MeleePerkEffect[];\n}\n\nexport interface MeleePerkEffect {\n  property: string;\n  value: number;\n  operation: 'add' | 'multiply' | 'set';\n}\n\nexport const MELEE_WEAPON_PERKS: MeleeWeaponPerk[] = [\n  {\n    id: 'cleaving_strikes',\n    name: 'Cleaving Strikes',\n    description: '+50% swing angle, hits multiple enemies',\n    rarity: 'rare',\n    icon: 'sword',\n    effects: [{ property: 'meleeStats.swingAngle', value: 0.5, operation: 'multiply' }],\n  },\n  {\n    id: 'lethal_tempo',\n    name: 'Lethal Tempo',\n    description: '+40% attack speed',\n    rarity: 'rare',\n    icon: 'zap',\n    effects: [{ property: 'fireRate', value: -0.4, operation: 'multiply' }],\n  },\n  {\n    id: 'executioner',\n    name: 'Executioner',\n    description: '+100% damage to enemies below 30% health',\n    rarity: 'epic',\n    icon: 'skull',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n  },\n  {\n    id: 'combo_master',\n    name: 'Combo Master',\n    description: 'Max combo increased to 5, +100% combo damage bonus',\n    rarity: 'legendary',\n    icon: 'layers',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 2, operation: 'add' },\n      { property: 'meleeStats.comboDamageMultiplier', value: 0.5, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'dash_assassin',\n    name: 'Dash Assassin',\n    description: '+150% damage on dash slash',\n    rarity: 'epic',\n    icon: 'wind',\n    effects: [{ property: 'meleeStats.dashSlashBonus', value: 1.5, operation: 'multiply' }],\n  },\n  {\n    id: 'extended_reach',\n    name: 'Extended Reach',\n    description: '+60% melee range',\n    rarity: 'common',\n    icon: 'arrow-right',\n    effects: [\n      { property: 'meleeStats.range', value: 0.6, operation: 'multiply' },\n      { property: 'maxRange', value: 0.6, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'whirlwind',\n    name: 'Whirlwind',\n    description: '360 degree swing, hits all around',\n    rarity: 'legendary',\n    icon: 'rotate-cw',\n    effects: [{ property: 'meleeStats.swingAngle', value: 360, operation: 'set' }],\n  },\n  {\n    id: 'life_steal',\n    name: 'Life Steal',\n    description: 'Heal for 15% of melee damage dealt',\n    rarity: 'epic',\n    icon: 'heart-pulse',\n    effects: [{ property: 'damage', value: 0.1, operation: 'multiply' }],\n  },\n  {\n    id: 'brutal_force',\n    name: 'Brutal Force',\n    description: '+50% damage, -20% attack speed',\n    rarity: 'rare',\n    icon: 'hammer',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n      { property: 'fireRate', value: 0.2, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'lightning_blade',\n    name: 'Lightning Blade',\n    description: '+80% attack speed, -10% damage',\n    rarity: 'rare',\n    icon: 'zap',\n    effects: [\n      { property: 'fireRate', value: -0.8, operation: 'multiply' },\n      { property: 'damage', value: -0.1, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'void_eruption',\n    name: 'Void Eruption',\n    description: 'Every 3rd hit creates a void explosion dealing area damage',\n    rarity: 'legendary',\n    icon: 'circle-dot',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n  },\n  {\n    id: 'phase_strike',\n    name: 'Phase Strike',\n    description: 'Melee attacks ignore 50% of distance, teleport slightly forward',\n    rarity: 'epic',\n    icon: 'move',\n    effects: [{ property: 'meleeStats.range', value: 0.5, operation: 'multiply' }],\n  },\n  {\n    id: 'bloodlust',\n    name: 'Bloodlust',\n    description: '+5% attack speed per kill for 5 seconds (stacks)',\n    rarity: 'rare',\n    icon: 'droplet',\n    effects: [{ property: 'damage', value: 0.15, operation: 'multiply' }],\n  },\n  {\n    id: 'sharpened_edge',\n    name: 'Sharpened Edge',\n    description: '+30% damage',\n    rarity: 'common',\n    icon: 'triangle',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n  },\n  {\n    id: 'momentum_slash',\n    name: 'Momentum Slash',\n    description: 'Damage increases with movement speed',\n    rarity: 'rare',\n    icon: 'wind',\n    effects: [{ property: 'damage', value: 0.25, operation: 'multiply' }],\n  },\n  {\n    id: 'critical_edge',\n    name: 'Critical Edge',\n    description: '20% chance to deal triple damage',\n    rarity: 'legendary',\n    icon: 'star',\n    effects: [{ property: 'damage', value: 0.4, operation: 'multiply' }],\n  },\n  {\n    id: 'faster_combos',\n    name: 'Faster Combos',\n    description: 'Combo window extended by 50%',\n    rarity: 'rare',\n    icon: 'clock',\n    effects: [{ property: 'fireRate', value: -0.2, operation: 'multiply' }],\n  },\n  {\n    id: 'berserker_rage',\n    name: 'Berserker Rage',\n    description: '+2% damage per 1% missing health',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [{ property: 'damage', value: 0.1, operation: 'multiply' }],\n  },\n  {\n    id: 'projectile_deflection',\n    name: 'Projectile Deflection',\n    description: 'Melee swings deflect enemy projectiles back at them',\n    rarity: 'legendary',\n    icon: 'shield',\n    effects: [{ property: 'damage', value: 0.15, operation: 'multiply' }],\n  },\n  {\n    id: 'vampiric_blade',\n    name: 'Vampiric Blade',\n    description: 'Heal for 25% of damage dealt',\n    rarity: 'legendary',\n    icon: 'heart',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n  },\n  {\n    id: 'phantom_strikes',\n    name: 'Phantom Strikes',\n    description: 'Attacks hit twice in quick succession',\n    rarity: 'legendary',\n    icon: 'ghost',\n    effects: [{ property: 'damage', value: 0.5, operation: 'multiply' }],\n  },\n  {\n    id: 'elemental_fury',\n    name: 'Elemental Fury',\n    description: 'Attacks apply burning, freezing, or shocking effects',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n  },\n  {\n    id: 'chain_massacre',\n    name: 'Chain Massacre',\n    description: 'Killing blows chain to nearby enemies',\n    rarity: 'epic',\n    icon: 'link',\n    effects: [\n      { property: 'damage', value: 0.25, operation: 'multiply' },\n      { property: 'meleeStats.swingAngle', value: 0.3, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'perfect_parry',\n    name: 'Perfect Parry',\n    description: 'Blocking attacks during swing grants +100% damage for next strike',\n    rarity: 'legendary',\n    icon: 'shield-check',\n    effects: [{ property: 'meleeStats.dashSlashBonus', value: 0.5, operation: 'multiply' }],\n  },\n  {\n    id: 'rending_strikes',\n    name: 'Rending Strikes',\n    description: 'Attacks reduce enemy armor, stacking up to 5 times',\n    rarity: 'epic',\n    icon: 'target',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n  },\n  {\n    id: 'storm_cutter',\n    name: 'Storm Cutter',\n    description: 'Swings create lightning arcs that damage enemies in a line',\n    rarity: 'legendary',\n    icon: 'zap',\n    effects: [\n      { property: 'damage', value: 0.35, operation: 'multiply' },\n      { property: 'meleeStats.range', value: 0.4, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'relentless_assault',\n    name: 'Relentless Assault',\n    description: 'Each consecutive hit increases attack speed by 10%',\n    rarity: 'rare',\n    icon: 'repeat',\n    effects: [{ property: 'fireRate', value: -0.3, operation: 'multiply' }],\n  },\n  {\n    id: 'soul_reaper',\n    name: 'Soul Reaper',\n    description: 'Killing enemies grants temporary bonus damage',\n    rarity: 'epic',\n    icon: 'skull',\n    effects: [{ property: 'damage', value: 0.25, operation: 'multiply' }],\n  },\n  {\n    id: 'riposte_master',\n    name: 'Riposte Master',\n    description: 'Taking damage within 0.5s grants +200% damage on next swing',\n    rarity: 'legendary',\n    icon: 'sword',\n    effects: [{ property: 'damage', value: 0.4, operation: 'multiply' }],\n  },\n  {\n    id: 'sweeping_fury',\n    name: 'Sweeping Fury',\n    description: '+120 degree swing angle, hits in wider arc',\n    rarity: 'epic',\n    icon: 'scan',\n    effects: [{ property: 'meleeStats.swingAngle', value: 120, operation: 'add' }],\n  },\n  {\n    id: 'precision_striker',\n    name: 'Precision Striker',\n    description: '-30 degree angle, +60% damage, focused strikes',\n    rarity: 'rare',\n    icon: 'crosshair',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: -30, operation: 'add' },\n      { property: 'damage', value: 0.6, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'finishing_blow',\n    name: 'Finishing Blow',\n    description: 'Final combo strike deals +300% damage',\n    rarity: 'legendary',\n    icon: 'shield-x',\n    effects: [\n      { property: 'meleeStats.comboDamageMultiplier', value: 1.0, operation: 'multiply' },\n      { property: 'damage', value: 0.3, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'dance_of_blades',\n    name: 'Dance of Blades',\n    description: '+100% combo count, -15% damage per hit',\n    rarity: 'epic',\n    icon: 'sparkles',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 3, operation: 'add' },\n      { property: 'damage', value: -0.15, operation: 'multiply' },\n      { property: 'fireRate', value: -0.3, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'heavy_impact',\n    name: 'Heavy Impact',\n    description: 'Swings knockback enemies further, +40% damage',\n    rarity: 'rare',\n    icon: 'hammer',\n    effects: [\n      { property: 'damage', value: 0.4, operation: 'multiply' },\n      { property: 'fireRate', value: 0.15, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'whirling_dervish',\n    name: 'Whirling Dervish',\n    description: 'Continuous spinning attacks, +200% swing angle, +60% attack speed',\n    rarity: 'legendary',\n    icon: 'loader',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: 200, operation: 'add' },\n      { property: 'fireRate', value: -0.6, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'lunging_strike',\n    name: 'Lunging Strike',\n    description: 'Dash forward on each swing, +80% range',\n    rarity: 'epic',\n    icon: 'arrow-up-right',\n    effects: [\n      { property: 'meleeStats.range', value: 0.8, operation: 'multiply' },\n      { property: 'meleeStats.dashSlashBonus', value: 0.5, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'steel_tempest',\n    name: 'Steel Tempest',\n    description: 'Creates a storm of blades, swinging hits 3 times',\n    rarity: 'legendary',\n    icon: 'wind',\n    effects: [\n      { property: 'damage', value: 0.8, operation: 'multiply' },\n      { property: 'meleeStats.swingAngle', value: 0.5, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'feral_instinct',\n    name: 'Feral Instinct',\n    description: '+120% attack speed while below 50% health',\n    rarity: 'epic',\n    icon: 'activity',\n    effects: [\n      { property: 'fireRate', value: -0.4, operation: 'multiply' },\n      { property: 'damage', value: 0.15, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'crushing_blow',\n    name: 'Crushing Blow',\n    description: 'Every 5th hit deals 500% damage, slower swing',\n    rarity: 'legendary',\n    icon: 'anvil',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n      { property: 'fireRate', value: 0.2, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'blade_echo',\n    name: 'Blade Echo',\n    description: 'Swings leave afterimages that damage enemies',\n    rarity: 'epic',\n    icon: 'copy',\n    effects: [\n      { property: 'damage', value: 0.35, operation: 'multiply' },\n      { property: 'meleeStats.swingDuration', value: 0.15, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'masters_technique',\n    name: \"Master's Technique\",\n    description: '+2 combo count, +30% combo damage multiplier',\n    rarity: 'rare',\n    icon: 'award',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 2, operation: 'add' },\n      { property: 'meleeStats.comboDamageMultiplier', value: 0.3, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'vorpal_edge',\n    name: 'Vorpal Edge',\n    description: '10% chance to instantly kill non-boss enemies below 20% HP',\n    rarity: 'legendary',\n    icon: 'zap-off',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'reaper_spin',\n    name: 'Reaper Spin',\n    description: '270 degree sweeping attacks, moderate damage boost',\n    rarity: 'epic',\n    icon: 'circle-slash',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: 270, operation: 'set' },\n      { property: 'damage', value: 0.25, operation: 'multiply' },\n    ],\n  },\n];\n\nexport function getRandomMeleePerks(count: number): MeleeWeaponPerk[] {\n  const shuffled = [...MELEE_WEAPON_PERKS].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, Math.min(count, MELEE_WEAPON_PERKS.length));\n}\n\nexport function applyMeleePerkToWeapon(weapon: Weapon, perk: MeleeWeaponPerk): Weapon {\n  const modifiedWeapon = { ...weapon };\n\n  perk.effects.forEach((effect) => {\n    const keys = effect.property.split('.');\n\n    if (keys.length === 1) {\n      const currentValue = modifiedWeapon[effect.property as keyof Weapon] as number;\n\n      switch (effect.operation) {\n        case 'add':\n          (modifiedWeapon[effect.property as keyof Weapon] as number) = currentValue + effect.value;\n          break;\n        case 'multiply':\n          (modifiedWeapon[effect.property as keyof Weapon] as number) = currentValue * (1 + effect.value);\n          break;\n        case 'set':\n          (modifiedWeapon[effect.property as keyof Weapon] as any) = effect.value;\n          break;\n      }\n    } else if (keys.length === 2 && keys[0] === 'meleeStats' && modifiedWeapon.meleeStats) {\n      const currentValue = modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number;\n\n      switch (effect.operation) {\n        case 'add':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number) = currentValue + effect.value;\n          break;\n        case 'multiply':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number) = currentValue * (1 + effect.value);\n          break;\n        case 'set':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as any) = effect.value;\n          break;\n      }\n    }\n  });\n\n  return modifiedWeapon;\n}\n","size_bytes":14381},"src/game/constants.ts":{"content":"import { Weapon, Upgrade } from '../types/game';\nimport { WEAPON_DEFINITIONS } from './WeaponDefinitions';\n\nexport const CANVAS_WIDTH = 1200;\nexport const CANVAS_HEIGHT = 800;\nexport const TILE_SIZE = 40;\nexport const MAX_VISIBLE_TILES = 15;\nexport const MAX_VISIBLE_RANGE = MAX_VISIBLE_TILES * TILE_SIZE;\nexport const PLAYER_SIZE = 20;\nexport const PLAYER_COLLISION_RADIUS = 25;\nexport const ENEMY_MELEE_STOP_DISTANCE = 15;\nexport const PLAYER_BASE_SPEED = 3;\nexport const PLAYER_DASH_SPEED = 9;\nexport const PLAYER_DASH_DURATION = 0.1;\nexport const PLAYER_DASH_COOLDOWN = 1.5;\nexport const PLAYER_MAX_HEALTH = 100;\n\nexport const INITIAL_WEAPONS: Weapon[] = [\n  {\n    ...WEAPON_DEFINITIONS.blaster,\n    id: 'starter-blaster',\n    name: 'Plasma Blaster',\n    fireRate: 0.25,\n    spread: 0,\n    description: 'Basic rapid-fire blaster',\n    perks: [],\n  },\n  {\n    ...WEAPON_DEFINITIONS.grappling_hook,\n    id: 'starter-grappling-hook',\n    name: 'Grappling Hook',\n    perks: [],\n  },\n];\n\nexport const AVAILABLE_UPGRADES: Upgrade[] = [\n  {\n    id: 'health-boost',\n    name: 'Reinforced Plating',\n    type: 'stat',\n    description: '+25 Max Health',\n    cost: 50,\n    icon: 'shield',\n    level: 0,\n    maxLevel: 5,\n    effects: [\n      { target: 'player', property: 'maxHealth', value: 25, operation: 'add' },\n    ],\n  },\n  {\n    id: 'speed-boost',\n    name: 'Servo Upgrade',\n    type: 'stat',\n    description: '+15% Movement Speed',\n    cost: 40,\n    icon: 'zap',\n    level: 0,\n    maxLevel: 5,\n    effects: [\n      {\n        target: 'player',\n        property: 'speed',\n        value: 0.15,\n        operation: 'multiply',\n      },\n    ],\n  },\n  {\n    id: 'damage-boost',\n    name: 'Overcharge Core',\n    type: 'stat',\n    description: '+20% Weapon Damage',\n    cost: 60,\n    icon: 'flame',\n    level: 0,\n    maxLevel: 5,\n    effects: [\n      {\n        target: 'weapon',\n        property: 'damage',\n        value: 0.2,\n        operation: 'multiply',\n      },\n    ],\n  },\n  {\n    id: 'fire-rate-boost',\n    name: 'Rapid Loader',\n    type: 'stat',\n    description: '-15% Fire Rate Cooldown',\n    cost: 50,\n    icon: 'repeat',\n    level: 0,\n    maxLevel: 5,\n    effects: [\n      {\n        target: 'weapon',\n        property: 'fireRate',\n        value: -0.15,\n        operation: 'multiply',\n      },\n    ],\n  },\n  {\n    id: 'piercing',\n    name: 'Armor Piercer',\n    type: 'ability',\n    description: 'Projectiles pierce through enemies',\n    cost: 100,\n    icon: 'crosshair',\n    level: 0,\n    maxLevel: 1,\n    effects: [\n      {\n        target: 'projectile',\n        property: 'piercing',\n        value: 1,\n        operation: 'set',\n      },\n    ],\n  },\n  {\n    id: 'multishot',\n    name: 'Split Shot',\n    type: 'ability',\n    description: '+2 Projectiles per shot',\n    cost: 80,\n    icon: 'chevrons-right',\n    level: 0,\n    maxLevel: 3,\n    effects: [\n      {\n        target: 'weapon',\n        property: 'projectileCount',\n        value: 2,\n        operation: 'add',\n      },\n    ],\n  },\n  {\n    id: 'dash-cooldown',\n    name: 'Energy Recycler',\n    type: 'ability',\n    description: '-25% Dash Cooldown',\n    cost: 70,\n    icon: 'wind',\n    level: 0,\n    maxLevel: 3,\n    effects: [\n      {\n        target: 'player',\n        property: 'dashCooldown',\n        value: -0.25,\n        operation: 'multiply',\n      },\n    ],\n  },\n  {\n    id: 'projectile-speed',\n    name: 'Accelerator',\n    type: 'stat',\n    description: '+25% Projectile Speed',\n    cost: 45,\n    icon: 'rocket',\n    level: 0,\n    maxLevel: 4,\n    effects: [\n      {\n        target: 'weapon',\n        property: 'projectileSpeed',\n        value: 0.25,\n        operation: 'multiply',\n      },\n    ],\n  },\n];\n","size_bytes":3670},"src/components/ConnectionMenu.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Users, Copy, Check, X, Navigation, Sword } from 'lucide-react';\nimport { RemotePlayer } from '../types/game';\n\ninterface ConnectionMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCreateGame: () => Promise<string>;\n  onJoinGame: (hostId: string) => Promise<void>;\n  isConnected: boolean;\n  connectionCount: number;\n  peerId: string;\n  role: 'host' | 'client' | 'none';\n  remotePlayers?: RemotePlayer[];\n  onTeleportToPlayer?: (peerId: string) => void;\n  onTeleportPlayerToMe?: (peerId: string) => void;\n  pvpEnabled?: boolean;\n  onTogglePvP?: () => void;\n}\n\nexport default function ConnectionMenu({\n  isOpen,\n  onClose,\n  onCreateGame,\n  onJoinGame,\n  isConnected,\n  connectionCount,\n  peerId,\n  role,\n  remotePlayers = [],\n  onTeleportToPlayer,\n  onTeleportPlayerToMe,\n  pvpEnabled = false,\n  onTogglePvP,\n}: ConnectionMenuProps) {\n  const [joinId, setJoinId] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [isJoining, setIsJoining] = useState(false);\n  const [error, setError] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    const savedUsername = localStorage.getItem('mp_username');\n    if (savedUsername) {\n      setUsername(savedUsername);\n    }\n  }, []);\n\n  const handleUsernameChange = (newUsername: string) => {\n    setUsername(newUsername);\n    localStorage.setItem('mp_username', newUsername);\n  };\n\n  if (!isOpen) return null;\n\n  const handleCreateGame = async () => {\n    setIsCreating(true);\n    setError('');\n    try {\n      await onCreateGame();\n    } catch (err) {\n      setError('Failed to create game: ' + (err as Error).message);\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleJoinGame = async () => {\n    if (!joinId.trim()) {\n      setError('Please enter a game ID');\n      return;\n    }\n    \n    setIsJoining(true);\n    setError('');\n    try {\n      await onJoinGame(joinId.trim());\n    } catch (err) {\n      setError('Failed to join game: ' + (err as Error).message);\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(peerId);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div className=\"absolute inset-0 bg-black/80 backdrop-blur-md flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-slate-900/90 border-2 border-cyan-500/50 rounded-lg p-6 max-w-md w-full shadow-2xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"w-6 h-6 text-cyan-400\" />\n            <h1 className=\"text-2xl font-bold text-cyan-300\">MULTIPLAYER</h1>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-white transition-colors\"\n          >\n            <X size={24} />\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-500/20 border border-red-500/50 rounded p-3 mb-4\">\n            <p className=\"text-red-300 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {isConnected ? (\n          <div className=\"space-y-4\">\n            <div className=\"bg-green-500/20 border border-green-500/50 rounded p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-green-300 font-semibold\">\n                  {role === 'host' ? 'HOSTING GAME' : 'CONNECTED'}\n                </span>\n              </div>\n              {role === 'host' && (\n                <p className=\"text-slate-300 text-sm\">\n                  {connectionCount} player{connectionCount !== 1 ? 's' : ''} connected\n                </p>\n              )}\n            </div>\n\n            <div className=\"bg-slate-800/50 border border-slate-700 rounded p-4\">\n              <p className=\"text-slate-400 text-xs mb-2\">Your Username:</p>\n              <input\n                type=\"text\"\n                value={username}\n                onChange={(e) => handleUsernameChange(e.target.value)}\n                placeholder=\"Enter your username\"\n                maxLength={20}\n                className=\"w-full bg-slate-900 border border-slate-600 rounded px-3 py-2 text-cyan-300 text-sm\"\n              />\n            </div>\n\n            {role === 'host' && onTogglePvP && (\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Sword className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-slate-300 text-sm font-medium\">PvP Combat</span>\n                  </div>\n                  <button\n                    onClick={onTogglePvP}\n                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                      pvpEnabled ? 'bg-red-600' : 'bg-slate-600'\n                    }`}\n                  >\n                    <span\n                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                        pvpEnabled ? 'translate-x-6' : 'translate-x-1'\n                      }`}\n                    />\n                  </button>\n                </div>\n                <p className=\"text-slate-400 text-xs mt-2\">\n                  {pvpEnabled ? 'Players can damage each other' : 'Players cannot damage each other'}\n                </p>\n              </div>\n            )}\n\n            {role === 'host' && peerId && (\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded p-4\">\n                <p className=\"text-slate-400 text-xs mb-2\">Share this ID with your friend:</p>\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={peerId}\n                    readOnly\n                    className=\"flex-1 bg-slate-900 border border-slate-600 rounded px-3 py-2 text-cyan-300 font-mono text-sm\"\n                  />\n                  <button\n                    onClick={copyToClipboard}\n                    className=\"px-3 py-2 bg-cyan-600 hover:bg-cyan-700 rounded transition-colors\"\n                  >\n                    {copied ? <Check size={20} /> : <Copy size={20} />}\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {remotePlayers.length > 0 && (\n              <div className=\"bg-slate-800/50 border border-slate-700 rounded p-4\">\n                <p className=\"text-slate-400 text-xs mb-3\">Connected Players:</p>\n                <div className=\"space-y-2\">\n                  {remotePlayers.map((player) => (\n                    <div key={player.peerId} className=\"flex items-center justify-between bg-slate-900/50 rounded px-3 py-2\">\n                      <span className=\"text-cyan-300 text-sm font-medium\">\n                        {player.username || 'Player'}\n                      </span>\n                      <div className=\"flex gap-1\">\n                        {onTeleportToPlayer && (\n                          <button\n                            onClick={() => onTeleportToPlayer(player.peerId)}\n                            className=\"px-2 py-1 bg-purple-600 hover:bg-purple-700 rounded text-xs flex items-center gap-1 transition-colors\"\n                            title=\"Teleport to player\"\n                          >\n                            <Navigation size={14} />\n                            To\n                          </button>\n                        )}\n                        {role === 'host' && onTeleportPlayerToMe && (\n                          <button\n                            onClick={() => onTeleportPlayerToMe(player.peerId)}\n                            className=\"px-2 py-1 bg-blue-600 hover:bg-blue-700 rounded text-xs flex items-center gap-1 transition-colors\"\n                            title=\"Teleport player to you\"\n                          >\n                            <Navigation size={14} className=\"rotate-180\" />\n                            Here\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <p className=\"text-slate-400 text-sm text-center mt-4\">\n              Close this menu to start playing together!\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div>\n              <button\n                onClick={handleCreateGame}\n                disabled={isCreating || isJoining}\n                className=\"w-full px-4 py-3 bg-cyan-600 hover:bg-cyan-700 disabled:bg-slate-700 disabled:cursor-not-allowed rounded font-bold text-white transition-colors\"\n              >\n                {isCreating ? 'CREATING...' : 'CREATE GAME'}\n              </button>\n              <p className=\"text-slate-400 text-xs mt-2 text-center\">\n                Host a game and share the ID with a friend\n              </p>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-1 h-px bg-slate-700\"></div>\n              <span className=\"text-slate-500 text-sm\">OR</span>\n              <div className=\"flex-1 h-px bg-slate-700\"></div>\n            </div>\n\n            <div>\n              <input\n                type=\"text\"\n                value={joinId}\n                onChange={(e) => setJoinId(e.target.value)}\n                placeholder=\"Enter Game ID\"\n                disabled={isCreating || isJoining}\n                className=\"w-full px-4 py-2 bg-slate-800 border border-slate-600 rounded text-white mb-2 disabled:opacity-50\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    handleJoinGame();\n                  }\n                }}\n              />\n              <button\n                onClick={handleJoinGame}\n                disabled={isCreating || isJoining || !joinId.trim()}\n                className=\"w-full px-4 py-3 bg-green-600 hover:bg-green-700 disabled:bg-slate-700 disabled:cursor-not-allowed rounded font-bold text-white transition-colors\"\n              >\n                {isJoining ? 'JOINING...' : 'JOIN GAME'}\n              </button>\n              <p className=\"text-slate-400 text-xs mt-2 text-center\">\n                Join a friend's game using their ID\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10700},"src/components/ResourceTracker.tsx":{"content":"import { Player } from '../types/game';\nimport { Package, DollarSign } from 'lucide-react';\n\ninterface ResourceTrackerProps {\n  player: Player;\n}\n\nexport default function ResourceTracker({ player }: ResourceTrackerProps) {\n  const resources = [\n    { name: 'Energy', value: player.resources.energy, color: '#60a5fa' },\n    { name: 'Core Dust', value: player.resources.coreDust, color: '#a78bfa' },\n    { name: 'Flux', value: player.resources.flux, color: '#c084fc' },\n    { name: 'Geo Shards', value: player.resources.geoShards, color: '#22d3ee' },\n    { name: 'Alloy Fragments', value: player.resources.alloyFragments, color: '#94a3b8' },\n    { name: 'Singularity Core', value: player.resources.singularityCore, color: '#fbbf24' },\n    { name: 'Cryo Kelp', value: player.resources.cryoKelp, color: '#7dd3fc' },\n    { name: 'Obsidian Heart', value: player.resources.obsidianHeart, color: '#fb923c' },\n    { name: 'Gloom Root', value: player.resources.gloomRoot, color: '#a3e635' },\n    { name: 'Resonant Crystal', value: player.resources.resonantCrystal, color: '#22d3ee' },\n    { name: 'Void Essence', value: player.resources.voidEssence, color: '#c084fc' },\n    { name: 'Bioluminescent Pearl', value: player.resources.bioluminescentPearl, color: '#5eead4' },\n    { name: 'Sunpetal Bloom', value: player.resources.sunpetalBloom, color: '#fde047' },\n    { name: 'Aetherium Shard', value: player.resources.aetheriumShard, color: '#a5b4fc' },\n    { name: 'Void Core', value: player.resources.voidCore, color: '#7c3aed' },\n  ].filter(resource => resource.value > 0);\n\n  const hasResources = resources.length > 0 || player.currency > 0;\n\n  if (!hasResources) {\n    return null;\n  }\n\n  return (\n    <div className=\"absolute top-4 right-4 pointer-events-none select-none\">\n      <div className=\"bg-slate-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-3 shadow-lg max-w-xs\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Package className=\"w-4 h-4 text-cyan-400\" />\n          <span className=\"text-xs font-bold text-slate-300\">RESOURCES</span>\n        </div>\n        \n        <div className=\"mb-2 pb-2 border-b border-slate-700\">\n          <div className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-4 h-4 text-yellow-400\" />\n            <span className=\"text-xs text-slate-400\">Currency</span>\n            <span className=\"text-sm font-bold text-yellow-300 ml-auto\">{player.currency}</span>\n          </div>\n        </div>\n\n        {resources.length > 0 && (\n          <div className=\"grid grid-cols-2 gap-x-3 gap-y-1 max-h-64 overflow-y-auto\">\n            {resources.map((resource) => (\n              <div key={resource.name} className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-slate-400 truncate\">{resource.name}</span>\n                <span className=\"font-bold ml-2\" style={{ color: resource.color }}>\n                  {resource.value}\n                </span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3051},"src/game/MultiplayerManager.ts":{"content":"import Peer, { DataConnection } from 'peerjs';\nimport { GameState, Player, Vector2, RemotePlayer } from '../types/game';\n\nexport type MultiplayerRole = 'host' | 'client' | 'none';\n\nexport interface PlayerInput {\n  keys: string[];\n  mousePos: Vector2;\n  mouseDown: boolean;\n  timestamp: number;\n  playerId: string;\n  activeWeaponIndex?: number;\n  username?: string;\n}\n\nexport interface GameStateUpdate {\n  type: 'state_update';\n  state: Partial<GameState>;\n  timestamp: number;\n}\n\nexport interface PlayerInputMessage {\n  type: 'player_input';\n  input: PlayerInput;\n}\n\nexport interface PlayerJoinMessage {\n  type: 'player_join';\n  playerId: string;\n  playerData: Player;\n}\n\nexport interface PlayerLeaveMessage {\n  type: 'player_leave';\n  playerId: string;\n}\n\nexport interface WorldInitMessage {\n  type: 'world_init';\n  worldData: any;\n  timestamp: number;\n}\n\nexport interface PlayerPositionSync {\n  type: 'position_sync';\n  playerId: string;\n  position: Vector2;\n  velocity: Vector2;\n  timestamp: number;\n}\n\nexport type NetworkMessage = \n  | GameStateUpdate \n  | PlayerInputMessage \n  | PlayerJoinMessage \n  | PlayerLeaveMessage\n  | WorldInitMessage\n  | PlayerPositionSync;\n\nexport class MultiplayerManager {\n  private peer: Peer | null = null;\n  private connections: Map<string, DataConnection> = new Map();\n  private role: MultiplayerRole = 'none';\n  private peerId: string = '';\n  private remotePlayers: Map<string, RemotePlayer> = new Map();\n  private lastInputs: Map<string, PlayerInput> = new Map();\n  private onStateUpdateCallback?: (state: Partial<GameState>) => void;\n  private onPlayerInputCallback?: (input: PlayerInput) => void;\n  private onConnectionChangeCallback?: () => void;\n  private onWorldInitCallback?: (worldData: any) => void;\n  private onClientConnectedCallback?: (peerId: string) => void;\n  private onPositionSyncCallback?: (playerId: string, position: Vector2, velocity: Vector2) => void;\n  private worldInitialized: boolean = false;\n\n  constructor() {}\n\n  async createGame(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.peer = new Peer({\n        config: {\n          iceServers: [\n            { urls: 'stun:stun.l.google.com:19302' },\n            { urls: 'stun:stun1.l.google.com:19302' },\n          ]\n        }\n      });\n\n      this.peer.on('open', (id) => {\n        this.peerId = id;\n        this.role = 'host';\n        console.log('Game created with ID:', id);\n        resolve(id);\n      });\n\n      this.peer.on('connection', (conn) => {\n        this.handleIncomingConnection(conn);\n      });\n\n      this.peer.on('error', (err) => {\n        console.error('Peer error:', err);\n        reject(err);\n      });\n    });\n  }\n\n  async joinGame(hostId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.peer = new Peer({\n        config: {\n          iceServers: [\n            { urls: 'stun:stun.l.google.com:19302' },\n            { urls: 'stun:stun1.l.google.com:19302' },\n          ]\n        }\n      });\n\n      this.peer.on('open', (id) => {\n        this.peerId = id;\n        this.role = 'client';\n        console.log('Connecting to host:', hostId);\n\n        const conn = this.peer!.connect(hostId, {\n          reliable: true,\n        });\n\n        conn.on('open', () => {\n          console.log('Connected to host');\n          this.connections.set(hostId, conn);\n          this.setupConnectionHandlers(conn);\n          resolve();\n        });\n\n        conn.on('error', (err) => {\n          console.error('Connection error:', err);\n          reject(err);\n        });\n      });\n\n      this.peer.on('error', (err) => {\n        console.error('Peer error:', err);\n        reject(err);\n      });\n    });\n  }\n\n  private handleIncomingConnection(conn: DataConnection) {\n    console.log('Incoming connection from:', conn.peer);\n    \n    conn.on('open', () => {\n      this.connections.set(conn.peer, conn);\n      this.setupConnectionHandlers(conn);\n      \n      if (this.onConnectionChangeCallback) {\n        this.onConnectionChangeCallback();\n      }\n\n      if (this.onClientConnectedCallback) {\n        this.onClientConnectedCallback(conn.peer);\n      }\n    });\n  }\n\n  private setupConnectionHandlers(conn: DataConnection) {\n    conn.on('data', (data) => {\n      this.handleMessage(data as NetworkMessage, conn.peer);\n    });\n\n    conn.on('close', () => {\n      console.log('Connection closed:', conn.peer);\n      this.connections.delete(conn.peer);\n      this.remotePlayers.delete(conn.peer);\n      \n      if (this.onConnectionChangeCallback) {\n        this.onConnectionChangeCallback();\n      }\n    });\n\n    conn.on('error', (err) => {\n      console.error('Connection error:', err);\n    });\n  }\n\n  private handleMessage(message: NetworkMessage, fromPeerId: string) {\n    switch (message.type) {\n      case 'state_update':\n        if (this.role === 'client' && this.worldInitialized && this.onStateUpdateCallback) {\n          this.onStateUpdateCallback(message.state);\n        }\n        break;\n      \n      case 'player_input':\n        if (this.role === 'host' && this.onPlayerInputCallback) {\n          this.lastInputs.set(fromPeerId, message.input);\n          this.onPlayerInputCallback(message.input);\n        }\n        break;\n      \n      case 'player_join':\n        const remotePlayer: RemotePlayer = {\n          id: message.playerId,\n          peerId: fromPeerId,\n          player: message.playerData,\n          lastUpdate: Date.now(),\n        };\n        this.remotePlayers.set(fromPeerId, remotePlayer);\n        break;\n      \n      case 'player_leave':\n        this.remotePlayers.delete(fromPeerId);\n        break;\n      \n      case 'world_init':\n        if (this.role === 'client' && this.onWorldInitCallback) {\n          console.log('Received world initialization data');\n          this.onWorldInitCallback(message.worldData);\n          this.worldInitialized = true;\n        }\n        break;\n      \n      case 'position_sync':\n        if (this.role === 'host' && this.onPositionSyncCallback) {\n          this.onPositionSyncCallback(fromPeerId, message.position, message.velocity);\n        }\n        break;\n    }\n  }\n\n  sendPlayerInput(input: PlayerInput) {\n    if (this.role !== 'client') return;\n\n    const message: PlayerInputMessage = {\n      type: 'player_input',\n      input,\n    };\n\n    this.connections.forEach((conn) => {\n      if (conn.open) {\n        conn.send(message);\n      }\n    });\n  }\n\n  broadcastGameState(state: Partial<GameState>) {\n    if (this.role !== 'host') return;\n\n    const message: GameStateUpdate = {\n      type: 'state_update',\n      state,\n      timestamp: Date.now(),\n    };\n\n    this.connections.forEach((conn) => {\n      if (conn.open) {\n        try {\n          conn.send(message);\n        } catch (err) {\n          console.error('Error sending state to', conn.peer, err);\n        }\n      }\n    });\n  }\n\n  announcePlayerJoin(playerId: string, playerData: Player) {\n    const message: PlayerJoinMessage = {\n      type: 'player_join',\n      playerId,\n      playerData,\n    };\n\n    this.connections.forEach((conn) => {\n      if (conn.open) {\n        conn.send(message);\n      }\n    });\n  }\n\n  getRemotePlayers(): RemotePlayer[] {\n    return Array.from(this.remotePlayers.values());\n  }\n\n  getRole(): MultiplayerRole {\n    return this.role;\n  }\n\n  getPeerId(): string {\n    return this.peerId;\n  }\n\n  isConnected(): boolean {\n    return this.connections.size > 0;\n  }\n\n  getConnectionCount(): number {\n    return this.connections.size;\n  }\n\n  onStateUpdate(callback: (state: Partial<GameState>) => void) {\n    this.onStateUpdateCallback = callback;\n  }\n\n  onPlayerInput(callback: (input: PlayerInput) => void) {\n    this.onPlayerInputCallback = callback;\n  }\n\n  onConnectionChange(callback: () => void) {\n    this.onConnectionChangeCallback = callback;\n  }\n\n  onWorldInit(callback: (worldData: any) => void) {\n    this.onWorldInitCallback = callback;\n  }\n\n  onClientConnected(callback: (peerId: string) => void) {\n    this.onClientConnectedCallback = callback;\n  }\n\n  onPositionSync(callback: (playerId: string, position: Vector2, velocity: Vector2) => void) {\n    this.onPositionSyncCallback = callback;\n  }\n\n  sendPositionSync(position: Vector2, velocity: Vector2) {\n    if (this.role !== 'client') return;\n\n    const message: PlayerPositionSync = {\n      type: 'position_sync',\n      playerId: this.peerId,\n      position,\n      velocity,\n      timestamp: Date.now(),\n    };\n\n    this.connections.forEach((conn) => {\n      if (conn.open) {\n        try {\n          conn.send(message);\n        } catch (err) {\n          console.error('Error sending position sync to', conn.peer, err);\n        }\n      }\n    });\n  }\n\n  sendWorldInit(worldData: any, toPeerId?: string) {\n    if (this.role !== 'host') return;\n\n    const message: WorldInitMessage = {\n      type: 'world_init',\n      worldData,\n      timestamp: Date.now(),\n    };\n\n    if (toPeerId) {\n      const conn = this.connections.get(toPeerId);\n      if (conn && conn.open) {\n        try {\n          console.log('Sending world init to', toPeerId);\n          conn.send(message);\n        } catch (err) {\n          console.error('Error sending world init to', toPeerId, err);\n        }\n      }\n    } else {\n      this.connections.forEach((conn) => {\n        if (conn.open) {\n          try {\n            conn.send(message);\n          } catch (err) {\n            console.error('Error sending world init to', conn.peer, err);\n          }\n        }\n      });\n    }\n  }\n\n  isWorldInitialized(): boolean {\n    return this.worldInitialized || this.role === 'host';\n  }\n\n  disconnect() {\n    this.connections.forEach((conn) => {\n      conn.close();\n    });\n    this.connections.clear();\n    this.remotePlayers.clear();\n    \n    if (this.peer) {\n      this.peer.destroy();\n      this.peer = null;\n    }\n    \n    this.role = 'none';\n    this.peerId = '';\n    this.worldInitialized = false;\n  }\n}\n","size_bytes":9850},"src/game/GameEngine.ts":{"content":"import {\n  GameState,\n  Player,\n  Enemy,\n  Projectile,\n  Weapon,\n  Chest,\n  WeaponDrop,\n  Drone,\n} from '../types/game';\nimport {\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT,\n  PLAYER_SIZE,\n  PLAYER_COLLISION_RADIUS,\n  ENEMY_MELEE_STOP_DISTANCE,\n  PLAYER_BASE_SPEED,\n  PLAYER_DASH_SPEED,\n  PLAYER_DASH_DURATION,\n  PLAYER_DASH_COOLDOWN,\n  PLAYER_MAX_HEALTH,\n  INITIAL_WEAPONS,\n  MAX_VISIBLE_RANGE,\n} from './constants';\nimport {\n  createVector,\n  vectorAdd,\n  vectorScale,\n  vectorNormalize,\n  vectorDistance,\n  vectorFromAngle,\n  vectorSubtract,\n  generateId,\n  checkCollision,\n  randomRange,\n} from './utils';\nimport { WorldGenerator, ResourceNode, ExtractionPoint, Portal, CHUNK_SIZE } from './WorldGeneration';\nimport { Obstacle } from './Environments';\nimport { Camera } from './Camera';\nimport { WeaponUpgradeManager } from './WeaponUpgradeManager';\nimport { AnyBiomeFeature } from './BiomeFeatures';\nimport {\n  checkEntityObstacleCollision,\n  resolveEntityObstacleCollision,\n  checkProjectileObstacleCollision,\n  calculateRicochetVelocity,\n} from './CollisionSystem';\nimport { findPathAroundObstacles } from './Pathfinding';\nimport { PlayerInventory } from './PlayerInventory';\nimport { WeaponCrateSystem } from './WeaponCrateSystem';\nimport { BiomeManager, BiomeParticle, BiomeConfig } from './BiomeSystem';\nimport { BiomeFeatureInteraction } from './BiomeFeatureInteraction';\nimport { TradingPostSystem } from './TradingPostSystem';\nimport { EnemyModifierSystem, ModifiedEnemy } from './EnemyModifierSystem';\nimport { CraftingSystem } from './CraftingSystem';\nimport { VoidSubdivider, createVoidSubdivider, updateVoidSubdivider, checkVoidSubdividerCollision } from './VoidSubdivider';\nimport { MeleeWeaponRenderer } from './MeleeWeaponRenderer';\nimport { MELEE_FORMS, getFormForWeapon, MeleeForm } from './MeleeWeaponForms';\nimport { MinibossSystem } from './MinibossSystem';\nimport { MinibossSpawnManager } from './MinibossSpawnManager';\nimport { MinibossUpdateSystem } from './MinibossUpdateSystem';\nimport { MinibossLootSystem } from './MinibossLootSystem';\nimport type { MinibossSubtype } from '../types/game';\nimport { DroneSystem } from './DroneSystem';\n\nexport class GameEngine {\n  private gameState: GameState;\n  private keys: Set<string> = new Set();\n  private mousePos = createVector();\n  private lastMousePos = createVector();\n  private mouseDown = false;\n  private lastMouseDown = false;\n  private usingArrowKeyAiming = false;\n  private touchMoveInput: React.MutableRefObject<{ x: number; y: number }> | null = null;\n  private touchShootInput: React.MutableRefObject<{ x: number; y: number; active: boolean }> | null = null;\n  private worldGenerator: WorldGenerator;\n  private camera: Camera;\n  private weaponUpgradeManager: WeaponUpgradeManager;\n  private inventory: PlayerInventory;\n  private crateSystem: WeaponCrateSystem;\n  private resourceNodes: ResourceNode[] = [];\n  private obstacles: Obstacle[] = [];\n  private portals: Portal[] = [];\n  private extractionPoints: ExtractionPoint[] = [];\n  private chests: Chest[] = [];\n  private biomeFeatures: AnyBiomeFeature[] = [];\n  private biomeManager: BiomeManager;\n  private biomeChangeCallback?: (biomeName: string) => void;\n  private featureInteraction: BiomeFeatureInteraction;\n  private tradingPostSystem: TradingPostSystem;\n  private modifierSystem: EnemyModifierSystem;\n  private craftingSystem: CraftingSystem;\n  private voidSubdivider: VoidSubdivider | null = null;\n  private voidGapBossSpawned: Set<string> = new Set();\n  private activeOminousTendril: { featureId: string; canInteract: boolean } | null = null;\n  private meleeWeaponRenderer: MeleeWeaponRenderer;\n  private minibossSystem: MinibossSystem;\n  private minibossSpawnManager: MinibossSpawnManager;\n  private minibossUpdateSystem: MinibossUpdateSystem;\n  private minibossLootSystem: MinibossLootSystem;\n  private minibossSpawnCheckTimer: number = 0;\n  private droneSystem: DroneSystem;\n  private recentEnemyDeaths: Array<{ x: number; y: number; timestamp: number }> = [];\n\n  constructor() {\n    this.worldGenerator = new WorldGenerator();\n    this.camera = new Camera(CANVAS_WIDTH, CANVAS_HEIGHT, 0.1);\n    this.weaponUpgradeManager = new WeaponUpgradeManager();\n    this.inventory = new PlayerInventory();\n    this.crateSystem = new WeaponCrateSystem();\n    this.biomeManager = new BiomeManager();\n    this.featureInteraction = new BiomeFeatureInteraction();\n    this.tradingPostSystem = new TradingPostSystem();\n    this.modifierSystem = new EnemyModifierSystem();\n    this.craftingSystem = new CraftingSystem();\n    this.meleeWeaponRenderer = new MeleeWeaponRenderer();\n    this.minibossSystem = new MinibossSystem();\n    this.minibossSpawnManager = new MinibossSpawnManager(this.minibossSystem);\n    this.minibossUpdateSystem = new MinibossUpdateSystem();\n    this.minibossLootSystem = new MinibossLootSystem();\n    this.droneSystem = new DroneSystem();\n    this.gameState = this.createInitialState();\n    this.biomeManager.setWorldGenerator(this.worldGenerator);\n\n    INITIAL_WEAPONS.forEach(weapon => {\n      const weaponWithPerks = { ...weapon, perks: [] };\n      this.inventory.addWeapon(weaponWithPerks);\n      this.inventory.equipWeapon(weaponWithPerks.id);\n    });\n    this.syncEquippedWeapons();\n    \n    this.inventory.addDrone('assault_drone');\n    this.inventory.addDrone('shield_drone');\n    this.inventory.addDrone('repair_drone');\n    this.inventory.equipDrone('assault_drone');\n    this.inventory.equipDrone('shield_drone');\n    this.syncDrones();\n\n    this.loadChunksAroundPlayer();\n  }\n\n  private createInitialState(): GameState {\n    const player: Player = {\n      id: 'player',\n      position: createVector(CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2),\n      velocity: createVector(),\n      size: PLAYER_SIZE,\n      health: PLAYER_MAX_HEALTH,\n      maxHealth: PLAYER_MAX_HEALTH,\n      rotation: 0,\n      speed: PLAYER_BASE_SPEED,\n      dashCooldown: PLAYER_DASH_COOLDOWN,\n      dashDuration: PLAYER_DASH_DURATION,\n      isDashing: false,\n      currency: 0,\n      equippedWeapons: [],\n      equippedDrones: [],\n      activeWeaponIndex: 0,\n      portalCooldown: 0,\n      isGrappling: false,\n      grappleProgress: 0,\n      isGliding: false,\n      resources: {\n        energy: 0,\n        coreDust: 0,\n        flux: 0,\n        geoShards: 0,\n        alloyFragments: 0,\n        singularityCore: 0,\n        cryoKelp: 0,\n        obsidianHeart: 0,\n        gloomRoot: 0,\n        resonantCrystal: 0,\n        voidEssence: 0,\n        bioluminescentPearl: 0,\n        sunpetalBloom: 0,\n        aetheriumShard: 0,\n        gravitonEssence: 0,\n        voidCore: 0,\n        crateKey: 0,\n      },\n      consumables: [],\n    };\n\n    return {\n      player,\n      remotePlayers: [],\n      enemies: [],\n      drones: [],\n      projectiles: [],\n      particles: [],\n      currencyDrops: [],\n      resourceDrops: [],\n      chests: [],\n      weaponDrops: [],\n      score: 0,\n      isPaused: false,\n      isGameOver: false,\n      resourcesCollected: 0,\n      currentBiomeName: 'Veridian Nexus',\n      damageNumbers: [],\n      pvpEnabled: false,\n    };\n  }\n\n  getState(): GameState {\n    return this.gameState;\n  }\n\n  getCamera(): Camera {\n    return this.camera;\n  }\n\n  getObstacles(): Obstacle[] {\n    return this.obstacles;\n  }\n\n  getResourceNodes(): ResourceNode[] {\n    return this.resourceNodes;\n  }\n\n  getPortals(): Portal[] {\n    return this.portals;\n  }\n\n  getExtractionPoints(): ExtractionPoint[] {\n    return this.extractionPoints;\n  }\n\n  getChests(): Chest[] {\n    return this.chests;\n  }\n\n  getBiomeManager(): BiomeManager {\n    return this.biomeManager;\n  }\n\n  getEnvironmentalParticles(): BiomeParticle[] {\n    return this.biomeManager.getEnvironmentalParticles();\n  }\n\n  getBiomeFeatures(): AnyBiomeFeature[] {\n    return this.biomeFeatures;\n  }\n\n  getModifierSystem(): EnemyModifierSystem {\n    return this.modifierSystem;\n  }\n\n  getCraftingSystem(): CraftingSystem {\n    return this.craftingSystem;\n  }\n\n  getMeleeWeaponRenderer(): MeleeWeaponRenderer {\n    return this.meleeWeaponRenderer;\n  }\n\n  useConsumable(consumableId: string): void {\n    const consumable = this.gameState.player.consumables.find(c => c.id === consumableId);\n    if (!consumable) return;\n\n    if (consumable.effect === 'heal') {\n      this.gameState.player.health = Math.min(\n        this.gameState.player.health + consumable.value,\n        this.gameState.player.maxHealth\n      );\n    }\n\n    if (consumable.stackable && consumable.quantity && consumable.quantity > 1) {\n      consumable.quantity -= 1;\n    } else {\n      this.gameState.player.consumables = this.gameState.player.consumables.filter(\n        c => c.id !== consumableId\n      );\n    }\n  }\n\n  sellWeapon(weaponId: string): boolean {\n    const inventoryWeapon = this.inventory.getWeapons().find(w => w.weapon.id === weaponId);\n    if (!inventoryWeapon) return false;\n\n    let value = 50;\n    if (inventoryWeapon.weapon.perks) {\n      inventoryWeapon.weapon.perks.forEach((perk: any) => {\n        switch (perk.rarity) {\n          case 'legendary': value += 100; break;\n          case 'epic': value += 60; break;\n          case 'rare': value += 30; break;\n          case 'common': value += 10; break;\n        }\n      });\n    }\n\n    this.inventory.unequipWeapon(weaponId);\n    this.inventory.removeWeapon(weaponId);\n    this.gameState.player.currency += value;\n    this.syncEquippedWeapons();\n    return true;\n  }\n\n  tradeResources(fromResource: string, toResource: string): boolean {\n    const player = this.gameState.player;\n    const tradeRates: Record<string, { from: string; amount: number; to: string }> = {\n      'energy-coreDust': { from: 'energy', amount: 10, to: 'coreDust' },\n      'coreDust-flux': { from: 'coreDust', amount: 5, to: 'flux' },\n      'flux-alloyFragments': { from: 'flux', amount: 3, to: 'alloyFragments' },\n    };\n\n    const tradeKey = `${fromResource}-${toResource}`;\n    const trade = tradeRates[tradeKey];\n\n    if (!trade) return false;\n\n    const fromAmount = (player.resources as any)[trade.from];\n    if (fromAmount < trade.amount) return false;\n\n    (player.resources as any)[trade.from] -= trade.amount;\n    (player.resources as any)[trade.to] += 1;\n\n    return true;\n  }\n\n  getFeatureInteraction(): BiomeFeatureInteraction {\n    return this.featureInteraction;\n  }\n\n  setBiomeChangeCallback(callback: (biomeName: string) => void): void {\n    this.biomeChangeCallback = callback;\n  }\n\n  setKeys(keys: Set<string> | ((prev: Set<string>) => Set<string>)): void {\n    if (typeof keys === 'function') {\n      this.keys = keys(this.keys);\n    } else {\n      this.keys = keys;\n    }\n  }\n\n  setMousePosition(pos: { x: number; y: number }): void {\n    this.mousePos = pos;\n  }\n\n  setMouseDown(isDown: boolean): void {\n    this.lastMouseDown = this.mouseDown;\n    this.mouseDown = isDown;\n  }\n\n  setTouchInput(\n    moveInput: React.MutableRefObject<{ x: number; y: number }>,\n    shootInput: React.MutableRefObject<{ x: number; y: number; active: boolean }>\n  ): void {\n    this.touchMoveInput = moveInput;\n    this.touchShootInput = shootInput;\n  }\n\n  update(deltaTime: number): void {\n    if (this.gameState.isGameOver) return;\n\n    const dt = Math.min(deltaTime, 0.05);\n\n    // In multiplayer, pause only affects local player input, not world simulation\n    // This allows host to pause while clients continue playing\n    if (!this.gameState.isPaused) {\n      this.updatePlayer(dt);\n    }\n    this.camera.follow(this.gameState.player.position);\n    this.camera.update();\n    this.biomeManager.updateBiome(this.gameState.player.position, (biome: BiomeConfig) => {\n      this.gameState.currentBiomeName = biome.name;\n      if (this.biomeChangeCallback) {\n        this.biomeChangeCallback(biome.name);\n      }\n    });\n    this.biomeManager.update(dt, CANVAS_WIDTH, CANVAS_HEIGHT, this.camera.position);\n    this.loadChunksAroundPlayer();\n    this.featureInteraction.updateFeatures(this.biomeFeatures, dt);\n    this.updateObstacleOrbits(dt);\n    const { speedMultiplier } = this.featureInteraction.applyFeatureEffects(\n      this.gameState.player,\n      this.biomeFeatures,\n      dt,\n      (pos) => { this.gameState.player.position = pos; },\n      (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime)\n    );\n    this.gameState.player.speed = PLAYER_BASE_SPEED * speedMultiplier;\n    this.checkPlayerDeath();\n    this.featureInteraction.applyEnemyEffects(\n      this.gameState.enemies,\n      this.biomeFeatures,\n      dt,\n      (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime)\n    );\n    this.featureInteraction.collectGravitonResources(\n      this.gameState.player,\n      this.biomeFeatures,\n      (amount) => { this.gameState.player.resources.gravitonEssence += amount; },\n      (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime)\n    );\n    this.updateEnemies(dt);\n    this.updateMinibosses(dt);\n    this.checkMinibossSpawns(dt);\n    this.updateDrones(dt);\n    this.updateVoidSubdividerBoss(dt);\n    this.checkVoidSubdividerSpawn();\n    this.modifierSystem.updateModifiers(\n      dt,\n      this.gameState.player.position,\n      (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime),\n      (pos, radius, damage) => this.createExplosion(pos, radius, damage)\n    );\n    this.updateProjectiles(dt);\n    this.featureInteraction.applyProjectileEffects(this.gameState.projectiles, this.biomeFeatures);\n    this.updateParticles(dt);\n    this.updateCurrencyDrops(dt);\n    this.updateWeaponDrops(dt);\n    this.updateResourceDrops(dt);\n    this.craftingSystem.checkDiscoveredRecipes(this.gameState.player);\n    this.handleCollisions(dt);\n    this.cleanupDeadEntities();\n    this.fireWeapons(dt);\n    this.handlePortals();\n    this.handleExtractionPoints();\n    this.updateInteractables(dt);\n    this.updateDamageNumbers(dt);\n  }\n\n  private updateObstacleOrbits(dt: number): void {\n    this.obstacles.forEach(obstacle => {\n      if (obstacle.orbitData) {\n        obstacle.orbitData.angle += obstacle.orbitData.speed * obstacle.orbitData.direction * dt;\n\n        const newX = obstacle.orbitData.centerX + Math.cos(obstacle.orbitData.angle) * obstacle.orbitData.distance;\n        const newY = obstacle.orbitData.centerY + Math.sin(obstacle.orbitData.angle) * obstacle.orbitData.distance;\n\n        obstacle.position.x = newX;\n        obstacle.position.y = newY;\n\n        obstacle.rotation += obstacle.orbitData.speed * obstacle.orbitData.direction * dt * 2;\n      }\n    });\n  }\n\n  private getPathfindingObstacles(): Obstacle[] {\n    const obstacles = [...this.obstacles];\n\n    for (const feature of this.biomeFeatures) {\n      if (feature.type === 'coral-reef') {\n        for (const waterPool of feature.data.waterPools) {\n          const worldX = feature.position.x + waterPool.offset.x;\n          const worldY = feature.position.y + waterPool.offset.y;\n\n          obstacles.push({\n            position: { x: worldX, y: worldY },\n            size: { x: waterPool.radius * 2, y: waterPool.radius * 2 },\n            rotation: 0,\n            shape: 'circle',\n            color: '#14b8a6',\n          });\n        }\n      }\n    }\n\n    return obstacles;\n  }\n\n  private updatePlayer(dt: number): void {\n    const player = this.gameState.player;\n\n    if (player.isGrappling) {\n      // Resolve the grapple target position based on target type\n      let currentTargetPosition: { x: number; y: number } | null = null;\n\n      if (player.grappleTargetType === 'enemy' && player.grappleTargetId) {\n        // Find the enemy by ID\n        const targetEnemy = this.gameState.enemies.find(e => e.id === player.grappleTargetId);\n        if (targetEnemy && targetEnemy.health > 0) {\n          currentTargetPosition = targetEnemy.position;\n        }\n      } else if (player.grappleTargetType === 'player' && player.grappleTargetId) {\n        // Find the remote player by ID\n        const targetPlayer = this.gameState.remotePlayers.find(rp => rp.id === player.grappleTargetId);\n        if (targetPlayer) {\n          currentTargetPosition = targetPlayer.player.position;\n        }\n      } else if (player.grappleTargetType === 'obstacle') {\n        // Use the static grapple target position for obstacles\n        currentTargetPosition = player.grappleTarget || null;\n      }\n\n      // If target not found (died/removed), cancel the grapple\n      if (!currentTargetPosition) {\n        player.isGrappling = false;\n        player.isGliding = true;\n        // Preserve momentum when target is lost\n        player.glideVelocity = player.velocity ? vectorScale(player.velocity, 1.0) : createVector(0, 0);\n        player.grappleTarget = undefined;\n        player.grappleTargetId = undefined;\n        player.grappleTargetType = undefined;\n      } else {\n        // Update grapple target to current position (for moving targets)\n        player.grappleTarget = currentTargetPosition;\n\n        const toTarget = vectorSubtract(currentTargetPosition, player.position);\n        const distance = Math.sqrt(toTarget.x * toTarget.x + toTarget.y * toTarget.y);\n\n        const activeWeapon = player.equippedWeapons[player.activeWeaponIndex];\n        const pullSpeed = (activeWeapon?.grapplingStats?.pullSpeed || 10) * 0.4; // Slowed down to 40% of original\n        const slamDamage = activeWeapon?.grapplingStats?.slamDamage || 0;\n        const slamRadius = activeWeapon?.grapplingStats?.slamRadius || 0;\n\n        if (distance < 20) {\n          if (slamDamage > 0) {\n            this.createGrappleSlamExplosion(player.position, slamDamage, slamRadius);\n          }\n          player.isGrappling = false;\n          player.isGliding = true;\n          player.glideVelocity = vectorScale(vectorNormalize(toTarget), 3);\n          player.grappleTarget = undefined;\n          player.grappleTargetId = undefined;\n          player.grappleTargetType = undefined;\n        } else {\n          const pullDir = vectorNormalize(toTarget);\n          const baseVelocity = vectorScale(pullDir, pullSpeed);\n\n          // Get screen-space input (always left = left, right = right)\n          const screenSwing = createVector(0, 0);\n          if (this.keys.has('a')) screenSwing.x -= 1; // Move left on screen\n          if (this.keys.has('d')) screenSwing.x += 1; // Move right on screen\n          if (this.keys.has('w')) screenSwing.y -= 1; // Move up on screen\n          if (this.keys.has('s')) screenSwing.y += 1; // Move down on screen\n\n          // Apply swing force in screen space, constrained to be perpendicular to rope\n          const swingStrength = 3;\n          // Project the screen input onto the perpendicular-to-rope direction\n          const perpDir = createVector(-pullDir.y, pullDir.x);\n          const swingDot = screenSwing.x * perpDir.x + screenSwing.y * perpDir.y;\n          const swingVelocity = vectorScale(perpDir, swingDot * swingStrength);\n\n          // Combine pull and swing with physics-based rope constraint\n          let combinedVelocity = vectorAdd(baseVelocity, swingVelocity);\n\n          // Add pendulum-like physics: preserve existing perpendicular momentum\n          if (player.velocity) {\n            const perpMomentum = (player.velocity.x * perpDir.x + player.velocity.y * perpDir.y) * 0.3;\n            const perpVel = vectorScale(perpDir, perpMomentum);\n            combinedVelocity = vectorAdd(combinedVelocity, perpVel);\n          }\n\n          player.velocity = combinedVelocity;\n          player.position = vectorAdd(player.position, vectorScale(player.velocity, dt * 60));\n        }\n      }\n    } else if (player.isGliding && player.glideVelocity) {\n      // Faster decay for shorter gliding\n      player.glideVelocity = vectorScale(player.glideVelocity, 0.95);\n\n      // Better air control during glide\n      const lateralDir = createVector();\n      if (this.keys.has('a')) lateralDir.x -= 1;\n      if (this.keys.has('d')) lateralDir.x += 1;\n      if (this.keys.has('w')) lateralDir.y -= 1;\n      if (this.keys.has('s')) lateralDir.y += 1;\n\n      const normalized = vectorNormalize(lateralDir);\n      const lateralVelocity = vectorScale(normalized, 2); // Reduced air control\n\n      player.velocity = vectorAdd(player.glideVelocity, lateralVelocity);\n      player.position = vectorAdd(player.position, vectorScale(player.velocity, dt * 60));\n\n      const glideSpeed = Math.sqrt(player.glideVelocity.x * player.glideVelocity.x + player.glideVelocity.y * player.glideVelocity.y);\n      if (glideSpeed < 0.5) { // Lower threshold for smoother transition\n        player.isGliding = false;\n        player.glideVelocity = undefined;\n      }\n    } else {\n      const direction = createVector();\n\n      if (this.touchMoveInput && (Math.abs(this.touchMoveInput.current.x) > 0.01 || Math.abs(this.touchMoveInput.current.y) > 0.01)) {\n        direction.x = this.touchMoveInput.current.x;\n        direction.y = this.touchMoveInput.current.y;\n      } else {\n        if (this.keys.has('w')) direction.y -= 1;\n        if (this.keys.has('s')) direction.y += 1;\n        if (this.keys.has('a')) direction.x -= 1;\n        if (this.keys.has('d')) direction.x += 1;\n      }\n\n      const normalized = vectorNormalize(direction);\n      const speed = player.isDashing ? PLAYER_DASH_SPEED : player.speed;\n      player.velocity = vectorScale(normalized, speed);\n\n      player.position = vectorAdd(\n        player.position,\n        vectorScale(player.velocity, dt * 60)\n      );\n    }\n\n    this.obstacles.forEach((obstacle) => {\n      if (checkEntityObstacleCollision(player, obstacle)) {\n        resolveEntityObstacleCollision(player, obstacle);\n      }\n    });\n\n    if (this.keys.has('arrowleft')) {\n      player.rotation -= dt * 4;\n      this.usingArrowKeyAiming = true;\n    }\n    if (this.keys.has('arrowright')) {\n      player.rotation += dt * 4;\n      this.usingArrowKeyAiming = true;\n    }\n\n    const mouseHasMoved = vectorDistance(this.mousePos, this.lastMousePos) > 5;\n    if (mouseHasMoved) {\n      this.usingArrowKeyAiming = false;\n      this.lastMousePos = { ...this.mousePos };\n    }\n\n    if (!this.keys.has('arrowleft') && !this.keys.has('arrowright') && !this.usingArrowKeyAiming) {\n      if (this.touchShootInput && this.touchShootInput.current.active && (Math.abs(this.touchShootInput.current.x) > 0.01 || Math.abs(this.touchShootInput.current.y) > 0.01)) {\n        player.rotation = Math.atan2(this.touchShootInput.current.y, this.touchShootInput.current.x);\n      } else {\n        const dirToMouse = vectorSubtract(this.mousePos, player.position);\n        player.rotation = Math.atan2(dirToMouse.y, dirToMouse.x);\n      }\n    }\n\n    if (player.portalCooldown && player.portalCooldown > 0) {\n      player.portalCooldown -= dt;\n    }\n\n    if (player.dashCooldown > 0) {\n      player.dashCooldown -= dt;\n    }\n\n    if (player.isDashing) {\n      player.dashDuration -= dt;\n      if (player.dashDuration <= 0) {\n        player.isDashing = false;\n        player.dashDuration = PLAYER_DASH_DURATION;\n      }\n    }\n\n    player.equippedWeapons = player.equippedWeapons.map((weapon) => ({\n      ...weapon,\n      cooldown: Math.max(0, weapon.cooldown - dt),\n      railgunBeamTimer: weapon.railgunBeamTimer ? Math.max(0, weapon.railgunBeamTimer - dt) : 0,\n    }));\n  }\n\n  private fireWeapons(dt: number): void {\n    const player = this.gameState.player;\n    const arrowKeyFiring = this.keys.has('arrowup');\n    const touchFiring = this.touchShootInput ? this.touchShootInput.current.active : false;\n\n    player.equippedWeapons.forEach((weapon, index) => {\n      if (weapon.meleeStats) {\n        this.updateMeleeWeapon(weapon, dt, index);\n        return;\n      }\n      if (weapon.firingMode === 'charge') {\n        const isFiring = (this.mouseDown || arrowKeyFiring || touchFiring) && index === player.activeWeaponIndex;\n        if (isFiring) {\n          weapon.isCharging = true;\n          weapon.currentCharge = Math.min(\n            (weapon.currentCharge || 0) + dt,\n            weapon.chargeTime || 2.0\n          );\n        } else if (weapon.isCharging && !(this.mouseDown || arrowKeyFiring || touchFiring)) {\n          weapon.isCharging = false;\n          if ((weapon.currentCharge || 0) > 0.2) {\n            if (weapon.type === 'railgun') {\n              this.fireRailgunBeam(weapon);\n            } else {\n              this.fireWeapon(weapon);\n            }\n          }\n          weapon.currentCharge = 0;\n        }\n        return;\n      }\n\n      if (weapon.firingMode === 'hold') {\n        const isFiring = (this.mouseDown || arrowKeyFiring || touchFiring) && index === player.activeWeaponIndex;\n        if (isFiring && weapon.cooldown <= 0) {\n          weapon.isHolding = true;\n          weapon.holdTimer = (weapon.holdTimer || 0) + dt;\n        } else if (weapon.isHolding && !(this.mouseDown || arrowKeyFiring || touchFiring)) {\n          weapon.isHolding = false;\n          if ((weapon.holdTimer || 0) >= (weapon.holdTime || 0.8)) {\n            this.fireWeapon(weapon);\n            weapon.cooldown = weapon.fireRate;\n          }\n          weapon.holdTimer = 0;\n        }\n        return;\n      }\n\n      if (weapon.firingMode === 'beam') {\n        const isFiring = (this.mouseDown || arrowKeyFiring || touchFiring) && index === player.activeWeaponIndex;\n        if (isFiring && !weapon.beamOverheated) {\n          if (!weapon.isBeaming) {\n            weapon.isBeaming = true;\n            weapon.beamTimer = 0;\n          }\n          weapon.beamTimer = (weapon.beamTimer || 0) + dt;\n          weapon.beamHeat = Math.min((weapon.beamHeat || 0) + dt * 35, weapon.beamMaxHeat || 100);\n\n          if (weapon.beamHeat >= (weapon.beamMaxHeat || 100)) {\n            weapon.beamOverheated = true;\n            weapon.isBeaming = false;\n          } else {\n            this.fireBeam(weapon);\n          }\n        } else {\n          weapon.isBeaming = false;\n          if (weapon.beamOverheated) {\n            weapon.beamHeat = Math.max((weapon.beamHeat || 0) - dt * 25, 0);\n            if (weapon.beamHeat <= 0) {\n              weapon.beamOverheated = false;\n            }\n          } else {\n            weapon.beamHeat = Math.max((weapon.beamHeat || 0) - dt * 50, 0);\n          }\n        }\n        return;\n      }\n\n      const mousePressed = this.mouseDown && !this.lastMouseDown;\n      const arrowPressed = arrowKeyFiring;\n      const touchPressed = touchFiring && !this.lastMouseDown;\n      const shouldFire =\n        ((weapon.firingMode === 'auto' ? (this.mouseDown || arrowKeyFiring || touchFiring) : (mousePressed || arrowPressed || touchPressed))) &&\n        index === player.activeWeaponIndex;\n\n      if (shouldFire && weapon.cooldown <= 0) {\n        if (weapon.type === 'grappling_hook') {\n          this.fireGrapplingHook();\n          weapon.cooldown = weapon.grapplingStats?.cooldown || weapon.fireRate;\n        } else {\n          this.fireWeapon(weapon);\n          weapon.cooldown = weapon.fireRate;\n        }\n      }\n    });\n  }\n\n  private updateMeleeWeapon(weapon: Weapon, dt: number, index: number): void {\n    const player = this.gameState.player;\n    const touchFiring = this.touchShootInput ? this.touchShootInput.current.active : false;\n\n    if (weapon.swingTimer && weapon.swingTimer > 0) {\n      weapon.swingTimer -= dt;\n      if (weapon.swingTimer <= 0) {\n        weapon.isSwinging = false;\n        weapon.swingTimer = 0;\n      }\n    }\n\n    if (weapon.comboResetTimer && weapon.comboResetTimer > 0) {\n      weapon.comboResetTimer -= dt;\n      if (weapon.comboResetTimer <= 0) {\n        weapon.comboCounter = 0;\n        weapon.comboResetTimer = 0;\n      }\n    }\n\n    const mousePressed = this.mouseDown && !this.lastMouseDown;\n    const arrowPressed = this.keys.has('arrowup');\n    const touchPressed = touchFiring && !this.lastMouseDown;\n\n    if ((mousePressed || arrowPressed || touchPressed) && index === player.activeWeaponIndex && weapon.cooldown <= 0 && !weapon.isSwinging) {\n      this.fireMeleeWeapon(weapon);\n      weapon.cooldown = weapon.fireRate;\n    }\n  }\n\n  private fireMeleeWeapon(weapon: Weapon): void {\n    if (!weapon.meleeStats) return;\n\n    const player = this.gameState.player;\n    \n    if (!weapon.meleeFormId) {\n      weapon.meleeFormId = getFormForWeapon(weapon.type).id;\n    }\n    \n    const form = MELEE_FORMS[weapon.meleeFormId] || MELEE_FORMS.basic_form;\n    \n    weapon.isSwinging = true;\n    weapon.comboCounter = (weapon.comboCounter || 0) + 1;\n    weapon.comboResetTimer = 1.0;\n\n    if (weapon.comboCounter > form.comboPattern.length) {\n      weapon.comboCounter = 1;\n    }\n\n    const strike = form.comboPattern[(weapon.comboCounter - 1) % form.comboPattern.length];\n    weapon.swingTimer = weapon.meleeStats.swingDuration / strike.speedModifier;\n    \n    const angle = player.rotation + (strike.angleOffset * Math.PI / 180);\n\n    const comboMultiplier = 1 + ((weapon.comboCounter || 1) - 1) * ((weapon.meleeStats.comboDamageMultiplier || 1.5) - 1) / (form.comboPattern.length - 1);\n    const dashMultiplier = player.isDashing ? (weapon.meleeStats.dashSlashBonus || 2.0) : 1.0;\n    const totalDamage = weapon.damage * comboMultiplier * dashMultiplier * strike.damageMultiplier;\n\n    const swingAngle = (weapon.meleeStats.swingAngle || 90) * strike.swingAngleModifier * (Math.PI / 180);\n    const halfAngle = swingAngle / 2;\n\n    // Damage void subdivider boss\n    if (this.voidSubdivider && this.voidSubdivider.health > 0) {\n      const toBoss = vectorSubtract(this.voidSubdivider.position, player.position);\n      const bossDistance = Math.sqrt(toBoss.x * toBoss.x + toBoss.y * toBoss.y);\n      const angleToBoss = Math.atan2(toBoss.y, toBoss.x);\n\n      let angleDiff = angleToBoss - angle;\n      while (angleDiff > Math.PI) angleDiff -= Math.PI * 2;\n      while (angleDiff < -Math.PI) angleDiff += Math.PI * 2;\n\n      const inRange = bossDistance <= (weapon.meleeStats.range || 80) + this.voidSubdivider.size / 2;\n      const inAngle = Math.abs(angleDiff) <= halfAngle;\n\n      if (inRange && inAngle) {\n        this.voidSubdivider.health -= totalDamage;\n        this.createDamageNumber(this.voidSubdivider.position, totalDamage, weapon.color);\n        this.createParticles(this.voidSubdivider.position, 20, weapon.color, 0.5);\n      }\n    }\n\n    // Damage enemies\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      const toEnemy = vectorSubtract(enemy.position, player.position);\n      const distance = Math.sqrt(toEnemy.x * toEnemy.x + toEnemy.y * toEnemy.y);\n      const angleToEnemy = Math.atan2(toEnemy.y, toEnemy.x);\n\n      let angleDiff = angleToEnemy - angle;\n      while (angleDiff > Math.PI) angleDiff -= Math.PI * 2;\n      while (angleDiff < -Math.PI) angleDiff += Math.PI * 2;\n\n      const inRange = distance <= (weapon.meleeStats.range || 80) + enemy.size / 2;\n      const inAngle = Math.abs(angleDiff) <= halfAngle;\n\n      if (inRange && inAngle) {\n        let damageToApply = totalDamage;\n\n        if (this.modifierSystem.isModifiedEnemy(enemy)) {\n          const result = this.modifierSystem.handleDamage(\n            enemy,\n            totalDamage,\n            enemy.position,\n            createVector(),\n            (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime),\n            (projectiles) => this.gameState.projectiles.push(...projectiles),\n            (spawnedEnemy) => this.gameState.enemies.push(spawnedEnemy)\n          );\n\n          if (result.shouldBlockDamage) {\n            return;\n          }\n          damageToApply *= result.damageModifier;\n        }\n\n        enemy.health -= damageToApply;\n        enemy.isAggro = true;\n\n        this.createDamageNumber(enemy.position, damageToApply, weapon.color);\n        this.createParticles(enemy.position, 15, weapon.color, 0.4);\n\n        const knockback = vectorNormalize(toEnemy);\n        enemy.velocity = vectorAdd(enemy.velocity || createVector(), vectorScale(knockback, 5));\n\n        if (this.modifierSystem.isModifiedEnemy(enemy) && enemy.modifiers && enemy.modifiers.includes('thorns')) {\n          const thornsDamage = (enemy as any).thornsDamage || (enemy.damage * 0.5);\n          this.applyDamageToPlayer(thornsDamage);\n          this.createParticles(player.position, 8, '#ef4444', 0.4);\n          if (player.health <= 0) {\n            this.gameState.isGameOver = true;\n          }\n        }\n\n        if (enemy.health <= 0) {\n          let scoreValue = 10;\n          if (enemy.type === 'boss') scoreValue = 500;\n          if (enemy.type === 'miniboss') scoreValue = 1000;\n          if (this.modifierSystem.isModifiedEnemy(enemy)) scoreValue = 150;\n\n          this.gameState.score += scoreValue;\n          \n          if (enemy.type === 'miniboss') {\n            this.handleMinibossDeath(enemy);\n          } else {\n            this.spawnCurrency(enemy.position, enemy.currencyDrop);\n          }\n          \n          this.worldGenerator.registerEnemyKill(enemy.id);\n\n          let particleCount = 20;\n          if (enemy.type === 'boss') particleCount = 50;\n          if (enemy.type === 'miniboss') particleCount = 100;\n          if (this.modifierSystem.isModifiedEnemy(enemy)) particleCount = 40;\n\n          this.createParticles(enemy.position, particleCount, enemy.color, 0.6);\n\n          if (this.modifierSystem.isModifiedEnemy(enemy)) {\n            this.modifierSystem.removeEnemy(enemy.id);\n          }\n        }\n      }\n    });\n\n    // PvP melee damage\n    if (this.gameState.pvpEnabled) {\n      this.gameState.remotePlayers.forEach((remotePlayer) => {\n        if (!remotePlayer.player.isDashing) {\n          const toRemote = vectorSubtract(remotePlayer.player.position, player.position);\n          const remoteDistance = Math.sqrt(toRemote.x * toRemote.x + toRemote.y * toRemote.y);\n          const angleToRemote = Math.atan2(toRemote.y, toRemote.x);\n\n          let angleDiff = angleToRemote - angle;\n          while (angleDiff > Math.PI) angleDiff -= Math.PI * 2;\n          while (angleDiff < -Math.PI) angleDiff += Math.PI * 2;\n\n          const inRange = remoteDistance <= (weapon.meleeStats.range || 80) + remotePlayer.player.size / 2;\n          const inAngle = Math.abs(angleDiff) <= halfAngle;\n\n          if (inRange && inAngle) {\n            this.applyDamageToPlayer(totalDamage, remotePlayer.player);\n            this.createDamageNumber(remotePlayer.player.position, totalDamage, weapon.color);\n            this.createParticles(remotePlayer.player.position, 15, '#ff6600', 0.4);\n\n            const knockback = vectorNormalize(toRemote);\n            remotePlayer.player.velocity = vectorAdd(remotePlayer.player.velocity || createVector(), vectorScale(knockback, 5));\n          }\n        }\n      });\n    }\n\n    const hasDeflection = weapon.perks?.some((perk: any) => perk.id === 'projectile_deflection');\n    if (hasDeflection && weapon.isSwinging) {\n      this.gameState.projectiles.forEach((projectile) => {\n        if (projectile.owner === 'enemy') {\n          const toProjectile = vectorSubtract(projectile.position, player.position);\n          const distance = Math.sqrt(toProjectile.x * toProjectile.x + toProjectile.y * toProjectile.y);\n          const angleToProjectile = Math.atan2(toProjectile.y, toProjectile.x);\n\n          let angleDiff = angleToProjectile - angle;\n          while (angleDiff > Math.PI) angleDiff -= Math.PI * 2;\n          while (angleDiff < -Math.PI) angleDiff += Math.PI * 2;\n\n          const inRange = distance <= (weapon.meleeStats.range || 80) + 20;\n          const inAngle = Math.abs(angleDiff) <= halfAngle;\n\n          if (inRange && inAngle) {\n            projectile.owner = 'player';\n            projectile.velocity = vectorScale(vectorNormalize(toProjectile), -projectile.projectileSpeed || 15);\n            projectile.color = weapon.color;\n            this.createParticles(projectile.position, 10, weapon.color, 0.3);\n          }\n        }\n      });\n    }\n\n    const particleCount = 8 + (weapon.comboCounter || 1) * 2;\n    this.createParticles(\n      { x: player.position.x + Math.cos(angle) * 40, y: player.position.y + Math.sin(angle) * 40 },\n      particleCount,\n      weapon.color,\n      0.3\n    );\n  }\n\n  private fireBeam(weapon: Weapon): void {\n    const player = this.gameState.player;\n    const angle = player.rotation;\n\n    const beamLength = weapon.maxRange || MAX_VISIBLE_RANGE;\n    const endX = player.position.x + Math.cos(angle) * beamLength;\n    const endY = player.position.y + Math.sin(angle) * beamLength;\n\n    let actualBeamLength = beamLength;\n    for (const obstacle of this.obstacles) {\n      const collisionPoint = this.raycastObstacle(player.position, { x: endX, y: endY }, obstacle);\n      if (collisionPoint) {\n        const distToCollision = vectorDistance(player.position, collisionPoint);\n        if (distToCollision < actualBeamLength) {\n          actualBeamLength = distToCollision;\n        }\n      }\n    }\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      const distToBeam = this.pointToLineDistance(\n        enemy.position,\n        player.position,\n        { x: player.position.x + Math.cos(angle) * actualBeamLength, y: player.position.y + Math.sin(angle) * actualBeamLength }\n      );\n\n      const enemyRadius = enemy.size / 2;\n      if (distToBeam < enemyRadius + weapon.projectileSize) {\n        const enemyDist = vectorDistance(player.position, enemy.position);\n        if (enemyDist <= actualBeamLength) {\n          const damageDealt = weapon.damage * 0.016;\n          enemy.health -= damageDealt;\n          enemy.isAggro = true;\n          if (Math.random() < 0.05) {\n            this.createDamageNumber(enemy.position, Math.floor(damageDealt), weapon.color);\n          }\n          if (Math.random() < 0.1) {\n            this.createParticles(enemy.position, 2, weapon.color, 0.2);\n          }\n        }\n      }\n    });\n  }\n\n  private fireRailgunBeam(weapon: Weapon): void {\n    const player = this.gameState.player;\n    const angle = player.rotation;\n\n    weapon.railgunBeamTimer = 0.15;\n\n    const beamLength = weapon.maxRange || MAX_VISIBLE_RANGE;\n    const endX = player.position.x + Math.cos(angle) * beamLength;\n    const endY = player.position.y + Math.sin(angle) * beamLength;\n\n    let actualBeamLength = beamLength;\n    for (const obstacle of this.obstacles) {\n      const collisionPoint = this.raycastObstacle(player.position, { x: endX, y: endY }, obstacle);\n      if (collisionPoint) {\n        const distToCollision = vectorDistance(player.position, collisionPoint);\n        if (distToCollision < actualBeamLength) {\n          actualBeamLength = distToCollision;\n        }\n      }\n    }\n\n    let damage = weapon.damage;\n    if (weapon.currentCharge) {\n      const chargeRatio = weapon.currentCharge / (weapon.chargeTime || 1.5);\n      damage *= 1 + chargeRatio * 3;\n    }\n\n    // Damage void subdivider boss with railgun\n    if (this.voidSubdivider && this.voidSubdivider.health > 0) {\n      const distToBeam = this.pointToLineDistance(\n        this.voidSubdivider.position,\n        player.position,\n        { x: player.position.x + Math.cos(angle) * actualBeamLength, y: player.position.y + Math.sin(angle) * actualBeamLength }\n      );\n\n      const bossRadius = this.voidSubdivider.size / 2;\n      if (distToBeam < bossRadius + weapon.projectileSize * 1.5) {\n        const bossDist = vectorDistance(player.position, this.voidSubdivider.position);\n        if (bossDist <= actualBeamLength) {\n          this.voidSubdivider.health -= damage;\n          this.createDamageNumber(this.voidSubdivider.position, damage, '#00ff00');\n          this.createParticles(this.voidSubdivider.position, 30, weapon.color, 0.5);\n        }\n      }\n    }\n\n    const hitEnemies = new Set<string>();\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0 || hitEnemies.has(enemy.id)) return;\n\n      const distToBeam = this.pointToLineDistance(\n        enemy.position,\n        player.position,\n        { x: player.position.x + Math.cos(angle) * actualBeamLength, y: player.position.y + Math.sin(angle) * actualBeamLength }\n      );\n\n      const enemyRadius = enemy.size / 2;\n      if (distToBeam < enemyRadius + weapon.projectileSize * 1.5) {\n        const enemyDist = vectorDistance(player.position, enemy.position);\n        if (enemyDist <= actualBeamLength) {\n          let damageToApply = damage;\n\n          if (this.modifierSystem.isModifiedEnemy(enemy)) {\n            const result = this.modifierSystem.handleDamage(\n              enemy,\n              damage,\n              enemy.position,\n              createVector(),\n              (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime),\n              (projectiles) => this.gameState.projectiles.push(...projectiles),\n              (spawnedEnemy) => this.gameState.enemies.push(spawnedEnemy)\n            );\n\n            if (result.shouldBlockDamage) {\n              return;\n            }\n            damageToApply *= result.damageModifier;\n          }\n\n          enemy.health -= damageToApply;\n          enemy.isAggro = true;\n          hitEnemies.add(enemy.id);\n\n          this.createDamageNumber(enemy.position, damageToApply, '#00ff00');\n\n          if (this.modifierSystem.isModifiedEnemy(enemy) && enemy.modifiers && enemy.modifiers.includes('thorns')) {\n            const thornsDamage = (enemy as any).thornsDamage || (enemy.damage * 0.5);\n            this.applyDamageToPlayer(thornsDamage);\n            this.createParticles(player.position, 8, '#ef4444', 0.4);\n            if (player.health <= 0) {\n              this.gameState.isGameOver = true;\n            }\n          }\n\n          this.createParticles(enemy.position, 20, weapon.color, 0.4);\n\n          if (enemy.health <= 0) {\n            let scoreValue = 10;\n            if (enemy.type === 'boss') scoreValue = 500;\n            if (enemy.type === 'miniboss') scoreValue = 1000;\n            if (this.modifierSystem.isModifiedEnemy(enemy)) scoreValue = 150;\n\n            this.gameState.score += scoreValue;\n            \n            if (enemy.type === 'miniboss') {\n              this.handleMinibossDeath(enemy);\n            } else {\n              this.spawnCurrency(enemy.position, enemy.currencyDrop);\n            }\n            \n            this.worldGenerator.registerEnemyKill(enemy.id);\n\n            let particleCount = 20;\n            if (enemy.type === 'boss') particleCount = 50;\n            if (enemy.type === 'miniboss') particleCount = 100;\n            if (this.modifierSystem.isModifiedEnemy(enemy)) particleCount = 40;\n\n            this.createParticles(enemy.position, particleCount, enemy.color, 0.6);\n\n            if (this.modifierSystem.isModifiedEnemy(enemy)) {\n              this.modifierSystem.removeEnemy(enemy.id);\n            }\n          }\n        }\n      }\n    });\n\n    this.createParticles(\n      { x: player.position.x + Math.cos(angle) * 30, y: player.position.y + Math.sin(angle) * 30 },\n      15,\n      weapon.color,\n      0.3\n    );\n  }\n\n  private fireWeapon(weapon: Weapon): void {\n    const player = this.gameState.player;\n    const angle = player.rotation;\n\n    const MAX_PROJECTILES = 300;\n    if (this.gameState.projectiles.length >= MAX_PROJECTILES) {\n      return;\n    }\n\n    for (let i = 0; i < weapon.projectileCount; i++) {\n      const spreadOffset =\n        (i - (weapon.projectileCount - 1) / 2) * weapon.spread;\n      const projectileAngle = angle + spreadOffset;\n\n      const velocity = vectorFromAngle(projectileAngle, weapon.projectileSpeed);\n\n      let damage = weapon.damage;\n      let size = weapon.projectileSize;\n\n      if (weapon.firingMode === 'charge' && weapon.currentCharge) {\n        const chargeRatio = weapon.currentCharge / (weapon.chargeTime || 2.0);\n        damage *= 1 + chargeRatio * 4;\n        size *= 1 + chargeRatio * 2;\n      }\n\n      if (weapon.firingMode === 'hold' && weapon.holdTimer) {\n        const holdRatio = weapon.holdTimer / (weapon.holdTime || 0.8);\n        damage *= 1 + holdRatio * 1.5;\n      }\n\n      const isGravityWell = weapon.type === 'gravity_well';\n\n      const projectile: Projectile = {\n        id: generateId(),\n        position: { ...player.position },\n        velocity,\n        damage,\n        size,\n        color: weapon.color,\n        owner: 'player',\n        playerId: player.id,\n        piercing: weapon.piercing || false,\n        piercingCount: weapon.piercing ? 3 : 0,\n        lifetime: 3,\n        homing: weapon.homing,\n        homingStrength: weapon.homingStrength,\n        explosive: weapon.explosive,\n        explosionRadius: weapon.explosionRadius,\n        ricochet: weapon.ricochet,\n        ricochetCount: weapon.ricochet ? 2 : 0,\n        maxRange: weapon.maxRange || MAX_VISIBLE_RANGE,\n        travelDistance: 0,\n        weaponType: weapon.type,\n        isCharged: weapon.firingMode === 'charge' && (weapon.currentCharge || 0) > 0.2,\n        chargeLevel: weapon.currentCharge,\n        chainTarget: weapon.chainRange ? undefined : undefined,\n        chainCount: weapon.chainRange ? 3 : 0,\n        splitCount: weapon.splitCount || 0,\n        isPortal: weapon.portalDuration ? true : false,\n        portalPair: weapon.portalDuration ? undefined : undefined,\n        rotation: 0,\n        isGravityWell: isGravityWell,\n        gravityRadius: isGravityWell ? 150 : undefined,\n        gravityStrength: isGravityWell ? 2.5 : undefined,\n        wallPierce: weapon.wallPierce || false,\n        isChainLightning: weapon.chainRange ? true : false,\n      };\n\n      this.gameState.projectiles.push(projectile);\n    }\n    \n    this.triggerDroneActiveAbilities('shoot');\n  }\n\n  private updateEnemies(dt: number): void {\n    const player = this.gameState.player;\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      const targetPlayer = this.findNearestPlayer(enemy.position);\n      const dirToPlayer = vectorSubtract(targetPlayer.position, enemy.position);\n      const distance = vectorDistance(enemy.position, targetPlayer.position);\n\n      const deaggroRadius = (enemy.detectionRadius || 100) * 2.5;\n      if (enemy.isAggro && distance > deaggroRadius) {\n        enemy.isAggro = false;\n      }\n\n      if (enemy.type === 'dasher') {\n        enemy.dashTimer = (enemy.dashTimer || 0) + dt;\n        enemy.dashCooldown = (enemy.dashCooldown || 2.0) - dt;\n\n        if (enemy.dashCooldown <= 0 && distance < 200) {\n          enemy.isDashing = true;\n          enemy.dashTimer = 0;\n          enemy.dashCooldown = 3.0;\n        }\n\n        if (enemy.isDashing && enemy.dashTimer < 0.3) {\n          const normalized = vectorNormalize(dirToPlayer);\n          enemy.velocity = vectorScale(normalized, enemy.speed * 4);\n        } else {\n          enemy.isDashing = false;\n          if (distance < (enemy.detectionRadius || 100)) {\n            enemy.isAggro = true;\n            const normalized = vectorNormalize(dirToPlayer);\n            enemy.velocity = vectorScale(normalized, enemy.speed);\n          } else if (enemy.isAggro) {\n            const normalized = vectorNormalize(dirToPlayer);\n            enemy.velocity = vectorScale(normalized, enemy.speed);\n          } else {\n            enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n            if (enemy.wanderTimer > 2) {\n              enemy.wanderAngle = randomRange(0, Math.PI * 2);\n              enemy.wanderTimer = 0;\n            }\n            const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n            enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n          }\n        }\n      } else if (enemy.type === 'weaver') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          enemy.wavePhase = (enemy.wavePhase || 0) + dt * 3;\n          enemy.waveAmplitude = enemy.waveAmplitude || 50;\n\n          const directionToPlayer = findPathAroundObstacles(\n            enemy.position,\n            targetPlayer.position,\n            this.getPathfindingObstacles(),\n            enemy.size / 2\n          );\n\n          const perpendicular = { x: -directionToPlayer.y, y: directionToPlayer.x };\n          const waveOffset = Math.sin(enemy.wavePhase) * 2;\n\n          const forward = vectorScale(directionToPlayer, enemy.speed);\n          const sideways = vectorScale(perpendicular, waveOffset);\n\n          enemy.velocity = vectorAdd(forward, sideways);\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'laser') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 250) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              this.enemyFireLaser(enemy, targetPlayer.position);\n              enemy.attackCooldown = 1.5;\n            }\n          }\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'sniper') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 300) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              this.enemyFireProjectile(enemy, targetPlayer.position, 1, 8);\n              enemy.attackCooldown = 2;\n            }\n          }\n        } else {\n          enemy.velocity = createVector();\n        }\n      } else if (enemy.type === 'artillery') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 350) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              this.enemyFireProjectile(enemy, targetPlayer.position, 1, 6, 0.15);\n              enemy.attackCooldown = 3;\n            }\n          }\n        } else {\n          enemy.velocity = createVector();\n        }\n      } else if (enemy.type === 'burst') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 250) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              for (let i = 0; i < 3; i++) {\n                setTimeout(() => {\n                  if (this.gameState.enemies.includes(enemy)) {\n                    this.enemyFireProjectile(enemy, targetPlayer.position, 1, 10);\n                  }\n                }, i * 150);\n              }\n              enemy.attackCooldown = 2.5;\n            }\n          }\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'boss') {\n        const directionToPlayer = findPathAroundObstacles(\n          enemy.position,\n          targetPlayer.position,\n          this.getPathfindingObstacles(),\n          enemy.size / 2\n        );\n        enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n\n        enemy.attackCooldown -= dt;\n        if (enemy.attackCooldown <= 0) {\n          const spreadCount = 8;\n          for (let i = 0; i < spreadCount; i++) {\n            const angle = (Math.PI * 2 * i) / spreadCount + enemy.rotation;\n            const targetPos = {\n              x: enemy.position.x + Math.cos(angle) * 100,\n              y: enemy.position.y + Math.sin(angle) * 100,\n            };\n            this.enemyFireProjectile(enemy, targetPos, 1, 7);\n          }\n          enemy.attackCooldown = 1.5;\n        }\n      } else if (enemy.type === 'orbiter') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 280) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.orbitalAngle = (enemy.orbitalAngle || 0) + dt * 3;\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              const orbitalCount = 5;\n              for (let i = 0; i < orbitalCount; i++) {\n                const angle = (Math.PI * 2 * i) / orbitalCount + (enemy.orbitalAngle || 0);\n                const targetPos = {\n                  x: enemy.position.x + Math.cos(angle) * 100,\n                  y: enemy.position.y + Math.sin(angle) * 100,\n                };\n                this.enemyFireProjectile(enemy, targetPos, 1, 9, 0, true);\n              }\n              enemy.attackCooldown = 2;\n            }\n          }\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'fragmenter') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 300) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              this.enemyFireProjectile(enemy, targetPlayer.position, 1, 10);\n              setTimeout(() => {\n                if (this.gameState.enemies.includes(enemy)) {\n                  const fragmentTarget = this.findNearestPlayer(enemy.position);\n                  const fragmentCount = 4;\n                  for (let i = 0; i < fragmentCount; i++) {\n                    const angle = (Math.PI * 2 * i) / fragmentCount;\n                    const targetPos = {\n                      x: fragmentTarget.position.x + Math.cos(angle) * 80,\n                      y: fragmentTarget.position.y + Math.sin(angle) * 80,\n                    };\n                    this.enemyFireProjectile(enemy, targetPos, 1, 7);\n                  }\n                }\n              }, 400);\n              enemy.attackCooldown = 3;\n            }\n          }\n        } else {\n          enemy.velocity = createVector();\n        }\n      } else if (enemy.type === 'pulsar') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 350) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            enemy.pulseTimer = (enemy.pulseTimer || 0) + dt;\n            enemy.attackCooldown -= dt;\n\n            if (enemy.attackCooldown <= 0) {\n              const waveCount = 12;\n              for (let i = 0; i < waveCount; i++) {\n                const angle = (Math.PI * 2 * i) / waveCount;\n                const targetPos = {\n                  x: enemy.position.x + Math.cos(angle) * 100,\n                  y: enemy.position.y + Math.sin(angle) * 100,\n                };\n                this.enemyFireProjectile(enemy, targetPos, 1, 6);\n              }\n              enemy.attackCooldown = 2.5;\n            }\n          }\n        } else {\n          enemy.velocity = createVector();\n        }\n      } else if (enemy.type === 'spiraler') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          enemy.spiralPhase = (enemy.spiralPhase || 0) + dt * 4;\n          enemy.spiralAngle = (enemy.spiralAngle || 0) + dt * 2;\n\n          const spiralRadius = 150 + Math.sin(enemy.spiralPhase) * 50;\n          const targetX = targetPlayer.position.x + Math.cos(enemy.spiralAngle) * spiralRadius;\n          const targetY = targetPlayer.position.y + Math.sin(enemy.spiralAngle) * spiralRadius;\n          const targetPos = { x: targetX, y: targetY };\n\n          const directionToTarget = findPathAroundObstacles(\n            enemy.position,\n            targetPos,\n            this.getPathfindingObstacles(),\n            enemy.size / 2\n          );\n          enemy.velocity = vectorScale(directionToTarget, enemy.speed);\n\n          enemy.attackCooldown -= dt;\n          if (enemy.attackCooldown <= 0) {\n            this.enemyFireProjectile(enemy, targetPlayer.position, 1, 8);\n            enemy.attackCooldown = 1.2;\n          }\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'replicator') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          const directionToPlayer = findPathAroundObstacles(\n            enemy.position,\n            targetPlayer.position,\n            this.getPathfindingObstacles(),\n            enemy.size / 2\n          );\n          enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n\n          enemy.replicateTimer = (enemy.replicateTimer || 0) + dt;\n          if (enemy.replicateTimer >= 10 && (enemy.replicateCount || 0) < 1) {\n            const replicaAngle = randomRange(0, Math.PI * 2);\n            const replicaOffset = vectorFromAngle(replicaAngle, 60);\n            const replicaPos = vectorAdd(enemy.position, replicaOffset);\n\n            const replica: Enemy = {\n              id: generateId(),\n              position: replicaPos,\n              velocity: createVector(),\n              rotation: 0,\n              health: enemy.maxHealth * 0.5,\n              maxHealth: enemy.maxHealth * 0.5,\n              damage: enemy.damage * 0.7,\n              size: enemy.size * 0.8,\n              speed: enemy.speed * 1.1,\n              color: enemy.color,\n              type: 'speedy',\n              attackCooldown: 1,\n              currencyDrop: Math.floor(enemy.currencyDrop * 0.5),\n              isAggro: true,\n            };\n\n            this.gameState.enemies.push(replica);\n            this.createParticles(replicaPos, 25, enemy.color, 0.7);\n            enemy.replicateTimer = 0;\n            enemy.replicateCount = (enemy.replicateCount || 0) + 1;\n          }\n\n          enemy.attackCooldown -= dt;\n          if (enemy.attackCooldown <= 0) {\n            this.enemyFireProjectile(enemy, targetPlayer.position, 1, 7);\n            enemy.attackCooldown = 1.8;\n          }\n        } else {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      } else if (enemy.type === 'vortex') {\n        if (distance < (enemy.detectionRadius || 100)) {\n          enemy.isAggro = true;\n        }\n\n        if (enemy.isAggro) {\n          if (distance > 250) {\n            const directionToPlayer = findPathAroundObstacles(\n              enemy.position,\n              targetPlayer.position,\n              this.obstacles,\n              enemy.size / 2\n            );\n            enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n          } else {\n            enemy.velocity = createVector();\n\n            this.gameState.projectiles.forEach((proj) => {\n              if (proj.owner === 'player') {\n                const distToProj = vectorDistance(enemy.position, proj.position);\n                const pullRadius = enemy.vortexRadius || 200;\n                if (distToProj < pullRadius) {\n                  const pullDir = vectorNormalize(vectorSubtract(enemy.position, proj.position));\n                  const pullStrength = (enemy.vortexPullStrength || 3) * (1 - distToProj / pullRadius);\n                  proj.velocity = vectorAdd(proj.velocity, vectorScale(pullDir, pullStrength * dt * 60));\n                }\n              }\n            });\n\n            enemy.attackCooldown -= dt;\n            if (enemy.attackCooldown <= 0) {\n              const spreadCount = 6;\n              for (let i = 0; i < spreadCount; i++) {\n                const angle = (Math.PI * 2 * i) / spreadCount + enemy.rotation;\n                const targetPos = {\n                  x: enemy.position.x + Math.cos(angle) * 100,\n                  y: enemy.position.y + Math.sin(angle) * 100,\n                };\n                this.enemyFireProjectile(enemy, targetPos, 1, 8);\n              }\n              enemy.attackCooldown = 2;\n            }\n          }\n        } else {\n          enemy.velocity = createVector();\n        }\n      } else {\n        if (enemy.isAggro) {\n          if (distance > (enemy.detectionRadius || 100) * 1.5) {\n            enemy.isAggro = false;\n          } else {\n            const meleeStopDistance = ENEMY_MELEE_STOP_DISTANCE + enemy.size / 2;\n            if (distance > meleeStopDistance) {\n              const directionToPlayer = findPathAroundObstacles(\n                enemy.position,\n                targetPlayer.position,\n                this.obstacles,\n                enemy.size / 2\n              );\n              enemy.velocity = vectorScale(directionToPlayer, enemy.speed);\n            } else {\n              enemy.velocity = createVector();\n            }\n          }\n        } else {\n          if (distance < (enemy.detectionRadius || 100)) {\n            enemy.isAggro = true;\n          }\n        }\n\n        if (!enemy.isAggro) {\n          enemy.wanderTimer = (enemy.wanderTimer || 0) + dt;\n\n          if (enemy.wanderTimer > 2) {\n            enemy.wanderAngle = randomRange(0, Math.PI * 2);\n            enemy.wanderTimer = 0;\n          }\n\n          const wanderDirection = vectorFromAngle(enemy.wanderAngle || 0, 1);\n          enemy.velocity = vectorScale(wanderDirection, enemy.speed * 0.5);\n        }\n      }\n\n      enemy.position = vectorAdd(\n        enemy.position,\n        vectorScale(enemy.velocity, dt * 60)\n      );\n\n      this.obstacles.forEach((obstacle) => {\n        if (checkEntityObstacleCollision(enemy, obstacle)) {\n          resolveEntityObstacleCollision(enemy, obstacle);\n        }\n      });\n\n      enemy.rotation = Math.atan2(dirToPlayer.y, dirToPlayer.x);\n      enemy.attackCooldown -= dt;\n    });\n  }\n\n  private enemyFireProjectile(\n    enemy: Enemy,\n    targetPos: { x: number; y: number },\n    count: number = 1,\n    speed: number = 8,\n    spread: number = 0,\n    homing: boolean = false\n  ): void {\n    const direction = vectorNormalize(\n      vectorSubtract(targetPos, enemy.position)\n    );\n\n    for (let i = 0; i < count; i++) {\n      const spreadOffset = (i - (count - 1) / 2) * spread;\n      const angle = Math.atan2(direction.y, direction.x) + spreadOffset;\n      const velocity = vectorFromAngle(angle, speed);\n\n      this.gameState.projectiles.push({\n        id: generateId(),\n        position: { ...enemy.position },\n        velocity,\n        damage: enemy.damage,\n        size: enemy.type === 'boss' ? 8 : 6,\n        color: enemy.type === 'boss' ? '#ff0000' : '#ff3333',\n        owner: 'enemy',\n        piercing: false,\n        piercingCount: 0,\n        lifetime: 4,\n        rotation: 0,\n        homing: homing,\n        homingStrength: homing ? 0.03 : undefined,\n      });\n    }\n  }\n\n  private enemyFireLaser(\n    enemy: Enemy,\n    targetPos: { x: number; y: number }\n  ): void {\n    const direction = vectorNormalize(\n      vectorSubtract(targetPos, enemy.position)\n    );\n\n    for (let i = 0; i < 3; i++) {\n      setTimeout(() => {\n        if (this.gameState.enemies.includes(enemy)) {\n          const velocity = vectorFromAngle(\n            Math.atan2(direction.y, direction.x),\n            12\n          );\n\n          this.gameState.projectiles.push({\n            id: generateId(),\n            position: { ...enemy.position },\n            velocity,\n            damage: enemy.damage,\n            size: 4,\n            color: '#8b5cf6',\n            owner: 'enemy',\n            piercing: true,\n            piercingCount: 5,\n            lifetime: 3,\n            weaponType: 'laser',\n            rotation: 0,\n          });\n        }\n      }, i * 100);\n    }\n  }\n\n  private findNearestEnemy(position: { x: number; y: number }): Enemy | null {\n    let nearest: Enemy | null = null;\n    let minDist = Infinity;\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      const dist = vectorDistance(position, enemy.position);\n      if (dist < minDist) {\n        minDist = dist;\n        nearest = enemy;\n      }\n    });\n\n    return nearest;\n  }\n\n  private findNearestPlayer(position: { x: number; y: number }): Player {\n    const allPlayers = [this.gameState.player, ...this.gameState.remotePlayers.map(rp => rp.player)];\n    \n    let nearest = allPlayers[0];\n    let minDist = vectorDistance(position, nearest.position);\n\n    for (let i = 1; i < allPlayers.length; i++) {\n      const dist = vectorDistance(position, allPlayers[i].position);\n      if (dist < minDist) {\n        minDist = dist;\n        nearest = allPlayers[i];\n      }\n    }\n\n    return nearest;\n  }\n\n  private findNearestEnemyExcluding(position: { x: number; y: number }, excludeId: string): Enemy | null {\n    let nearest: Enemy | null = null;\n    let minDist = Infinity;\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.id === excludeId || enemy.health <= 0) return;\n\n      const dist = vectorDistance(position, enemy.position);\n      if (dist < minDist) {\n        minDist = dist;\n        nearest = enemy;\n      }\n    });\n\n    return nearest;\n  }\n\n  private updateMinibosses(dt: number): void {\n    const player = this.gameState.player;\n    const minibosses = this.gameState.enemies.filter(e => e.type === 'miniboss');\n\n    minibosses.forEach(miniboss => {\n      if (miniboss.health <= 0) return;\n\n      const context = {\n        createProjectile: (proj: any) => this.gameState.projectiles.push(proj),\n        createParticles: (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime),\n        damagePlayer: (damage) => {\n          this.applyDamageToPlayer(damage);\n          this.checkPlayerDeath();\n        },\n        findNearestPlayer: (pos) => this.findNearestPlayer(pos).position,\n        getAllPlayers: () => [this.gameState.player, ...this.gameState.remotePlayers.map(rp => rp.player)]\n      };\n\n      this.minibossUpdateSystem.update(miniboss, player.position, dt, context);\n\n      const whirlpoolEffect = this.minibossUpdateSystem.applyWhirlpoolEffect(miniboss, player.position, dt);\n      if (whirlpoolEffect) {\n        player.position = vectorAdd(player.position, whirlpoolEffect);\n      }\n    });\n  }\n\n  private checkMinibossSpawns(dt: number): void {\n    this.minibossSpawnCheckTimer += dt;\n\n    if (this.minibossSpawnCheckTimer < 5.0) {\n      return;\n    }\n\n    this.minibossSpawnCheckTimer = 0;\n\n    const currentBiome = this.biomeManager.getCurrentBiome();\n    if (currentBiome) {\n      this.minibossSpawnManager.updateCurrentBiome(currentBiome.id);\n    }\n\n    const distanceFromOrigin = Math.sqrt(\n      this.gameState.player.position.x * this.gameState.player.position.x +\n      this.gameState.player.position.y * this.gameState.player.position.y\n    );\n    const approximateWave = Math.max(1, Math.floor(distanceFromOrigin / 500));\n\n    const spawnedMiniboss = this.minibossSpawnManager.checkAndSpawnMiniboss(\n      this.gameState.player.position,\n      this.biomeFeatures,\n      approximateWave,\n      (subtype, position) => this.minibossSystem.createMiniboss(subtype, position)\n    );\n\n    if (spawnedMiniboss) {\n      this.gameState.enemies.push(spawnedMiniboss);\n      this.createParticles(spawnedMiniboss.position, 80, spawnedMiniboss.color, 1.2);\n      \n      const name = this.minibossLootSystem.getMinibossDisplayName(spawnedMiniboss.minibossSubtype!);\n      console.log(`Miniboss spawned: ${name}`);\n    }\n  }\n\n  private handleMinibossDeath(enemy: Enemy): void {\n    if (enemy.type !== 'miniboss' || !enemy.minibossSubtype) return;\n\n    const loot = this.minibossLootSystem.generateLoot(enemy);\n    if (!loot) return;\n\n    this.minibossLootSystem.spawnLootDrops(\n      loot,\n      (pos, amount) => this.spawnCurrency(pos, amount),\n      (pos, type, amount) => this.spawnResourceDrop(pos, type, amount),\n      (pos) => this.spawnWeaponDrop(pos)\n    );\n\n    this.minibossSpawnManager.onMinibossDefeated(enemy.id, enemy.minibossSubtype);\n\n    const name = this.minibossLootSystem.getMinibossDisplayName(enemy.minibossSubtype);\n    console.log(`Miniboss defeated: ${name}`);\n  }\n\n  private raycastObstacle(start: { x: number; y: number }, end: { x: number; y: number }, obstacle: Obstacle): { x: number; y: number } | null {\n    if (obstacle.shape === 'circle') {\n      const radius = obstacle.size.x / 2;\n      const d = vectorSubtract(end, start);\n      const f = vectorSubtract(start, obstacle.position);\n      const a = d.x * d.x + d.y * d.y;\n      const b = 2 * (f.x * d.x + f.y * d.y);\n      const c = (f.x * f.x + f.y * f.y) - radius * radius;\n      const discriminant = b * b - 4 * a * c;\n\n      if (discriminant >= 0) {\n        const t = (-b - Math.sqrt(discriminant)) / (2 * a);\n        if (t >= 0 && t <= 1) {\n          return {\n            x: start.x + d.x * t,\n            y: start.y + d.y * t\n          };\n        }\n      }\n    }\n    return null;\n  }\n\n  private pointToLineDistance(point: { x: number; y: number }, lineStart: { x: number; y: number }, lineEnd: { x: number; y: number }): number {\n    const A = point.x - lineStart.x;\n    const B = point.y - lineStart.y;\n    const C = lineEnd.x - lineStart.x;\n    const D = lineEnd.y - lineStart.y;\n\n    const dot = A * C + B * D;\n    const lenSq = C * C + D * D;\n    let param = -1;\n\n    if (lenSq !== 0) {\n      param = dot / lenSq;\n    }\n\n    let xx, yy;\n\n    if (param < 0) {\n      xx = lineStart.x;\n      yy = lineStart.y;\n    } else if (param > 1) {\n      xx = lineEnd.x;\n      yy = lineEnd.y;\n    } else {\n      xx = lineStart.x + param * C;\n      yy = lineStart.y + param * D;\n    }\n\n    const dx = point.x - xx;\n    const dy = point.y - yy;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  private updateProjectiles(dt: number): void {\n    const player = this.gameState.player;\n    const allPlayers = [player, ...this.gameState.remotePlayers.map(rp => rp.player)];\n\n    this.gameState.projectiles = this.gameState.projectiles.filter(\n      (projectile) => {\n        const screenEdgeDistance = Math.max(CANVAS_WIDTH, CANVAS_HEIGHT);\n        \n        let shouldKeep = false;\n        for (const p of allPlayers) {\n          const distFromPlayer = vectorDistance(projectile.position, p.position);\n          if (distFromPlayer <= screenEdgeDistance) {\n            shouldKeep = true;\n            break;\n          }\n        }\n        \n        if (!shouldKeep) {\n          return false;\n        }\n\n        if (projectile.maxRange) {\n          projectile.travelDistance = (projectile.travelDistance || 0) +\n            Math.sqrt(\n              projectile.velocity.x * projectile.velocity.x +\n              projectile.velocity.y * projectile.velocity.y\n            ) * dt * 60;\n\n          if (projectile.travelDistance >= projectile.maxRange) {\n            return false;\n          }\n        }\n\n        if (projectile.isGravityWell && projectile.owner === 'player') {\n          this.gameState.enemies.forEach((enemy) => {\n            if (enemy.health <= 0) return;\n            const dist = vectorDistance(enemy.position, projectile.position);\n            if (dist < (projectile.gravityRadius || 150)) {\n              const pullDir = vectorNormalize(vectorSubtract(projectile.position, enemy.position));\n              const pullStrength = (projectile.gravityStrength || 2.5) * (1 - dist / (projectile.gravityRadius || 150));\n              enemy.velocity = vectorAdd(enemy.velocity, vectorScale(pullDir, pullStrength * dt * 60));\n            }\n          });\n        }\n\n        if (projectile.homing) {\n          if (projectile.owner === 'player') {\n            const target = this.findNearestEnemy(projectile.position);\n            if (target) {\n              const toTarget = vectorSubtract(target.position, projectile.position);\n              const targetDir = vectorNormalize(toTarget);\n              const currentDir = vectorNormalize(projectile.velocity);\n\n              const blended = {\n                x: currentDir.x + targetDir.x * (projectile.homingStrength || 0.05),\n                y: currentDir.y + targetDir.y * (projectile.homingStrength || 0.05),\n              };\n\n              const speed = Math.sqrt(\n                projectile.velocity.x * projectile.velocity.x +\n                projectile.velocity.y * projectile.velocity.y\n              );\n\n              projectile.velocity = vectorScale(vectorNormalize(blended), speed);\n            }\n          } else if (projectile.owner === 'enemy') {\n            const target = this.gameState.player;\n            const toTarget = vectorSubtract(target.position, projectile.position);\n            const targetDir = vectorNormalize(toTarget);\n            const currentDir = vectorNormalize(projectile.velocity);\n\n            const blended = {\n              x: currentDir.x + targetDir.x * (projectile.homingStrength || 0.05),\n              y: currentDir.y + targetDir.y * (projectile.homingStrength || 0.05),\n            };\n\n            const speed = Math.sqrt(\n              projectile.velocity.x * projectile.velocity.x +\n              projectile.velocity.y * projectile.velocity.y\n            );\n\n            projectile.velocity = vectorScale(vectorNormalize(blended), speed);\n          }\n        }\n\n        projectile.position = vectorAdd(\n          projectile.position,\n          vectorScale(projectile.velocity, dt * 60)\n        );\n        projectile.lifetime -= dt;\n\n        if (!projectile.wallPierce && projectile.owner === 'player') {\n          for (const obstacle of this.obstacles) {\n            if (checkProjectileObstacleCollision(projectile, obstacle)) {\n              if (projectile.ricochet && (projectile.ricochetCount || 0) > 0) {\n                projectile.velocity = calculateRicochetVelocity(\n                  projectile.velocity,\n                  obstacle,\n                  projectile.position\n                );\n                projectile.ricochetCount = (projectile.ricochetCount || 0) - 1;\n                this.createParticles(projectile.position, 5, projectile.color, 0.2);\n                break;\n              } else {\n                return false;\n              }\n            }\n          }\n        } else if (projectile.ricochet && projectile.owner === 'player') {\n          for (const obstacle of this.obstacles) {\n            if (checkProjectileObstacleCollision(projectile, obstacle)) {\n              if ((projectile.ricochetCount || 0) > 0) {\n                projectile.velocity = calculateRicochetVelocity(\n                  projectile.velocity,\n                  obstacle,\n                  projectile.position\n                );\n                projectile.ricochetCount = (projectile.ricochetCount || 0) - 1;\n                this.createParticles(projectile.position, 5, projectile.color, 0.2);\n                break;\n              } else {\n                return false;\n              }\n            }\n          }\n        } else if (!projectile.wallPierce && projectile.owner === 'enemy') {\n          for (const obstacle of this.obstacles) {\n            if (checkProjectileObstacleCollision(projectile, obstacle)) {\n              this.createParticles(projectile.position, 5, projectile.color, 0.2);\n              return false;\n            }\n          }\n        }\n\n        return projectile.lifetime > 0;\n      }\n    );\n  }\n\n  private createExplosion(position: { x: number; y: number }, radius: number, damage: number): void {\n    this.createParticles(position, 30, '#ff6600', 0.5);\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      const dist = vectorDistance(enemy.position, position);\n      if (dist < radius) {\n        const falloff = 1 - dist / radius;\n        enemy.health -= damage * falloff;\n        this.createParticles(enemy.position, 5, enemy.color, 0.3);\n      }\n    });\n  }\n\n  private updateParticles(dt: number): void {\n    this.gameState.particles = this.gameState.particles.filter((particle) => {\n      particle.position = vectorAdd(\n        particle.position,\n        vectorScale(particle.velocity, dt * 60)\n      );\n      particle.lifetime -= dt;\n      particle.velocity = vectorScale(particle.velocity, 0.95);\n\n      return particle.lifetime > 0;\n    });\n  }\n\n  private updateCurrencyDrops(dt: number): void {\n    const player = this.gameState.player;\n\n    this.gameState.currencyDrops = this.gameState.currencyDrops.filter(\n      (drop) => {\n        const distToPlayer = vectorDistance(drop.position, player.position);\n\n        if (distToPlayer < 100) {\n          const pullDir = vectorNormalize(\n            vectorSubtract(player.position, drop.position)\n          );\n          drop.velocity = vectorAdd(drop.velocity, vectorScale(pullDir, 0.5));\n        }\n\n        drop.position = vectorAdd(\n          drop.position,\n          vectorScale(drop.velocity, dt * 60)\n        );\n        drop.velocity = vectorScale(drop.velocity, 0.98);\n        drop.lifetime -= dt;\n\n        if (distToPlayer < 25) {\n          player.currency += drop.value;\n          this.createParticles(drop.position, 8, '#ffff00', 0.3);\n          return false;\n        }\n\n        return drop.lifetime > 0;\n      }\n    );\n  }\n\n  private updateWeaponDrops(dt: number): void {\n    const player = this.gameState.player;\n\n    this.gameState.weaponDrops = this.gameState.weaponDrops.filter(\n      (drop) => {\n        drop.bobPhase += dt * 2;\n        drop.rotation += dt * 1.5;\n\n        drop.position = vectorAdd(\n          drop.position,\n          vectorScale(drop.velocity, dt * 60)\n        );\n        drop.velocity = vectorScale(drop.velocity, 0.95);\n        drop.lifetime -= dt;\n\n        const distToPlayer = vectorDistance(drop.position, player.position);\n        if (distToPlayer < drop.size * 2 && this.keys.has('f')) {\n          this.inventory.addWeapon(drop.weapon);\n          this.createParticles(drop.position, 20, drop.weapon.color, 0.5);\n          return false;\n        }\n\n        return drop.lifetime > 0;\n      }\n    );\n  }\n\n  private updateResourceDrops(dt: number): void {\n    const player = this.gameState.player;\n\n    this.gameState.resourceDrops = this.gameState.resourceDrops.filter(\n      (drop) => {\n        drop.bobPhase += dt * 2;\n        drop.rotation += dt * 1.5;\n\n        drop.position = vectorAdd(\n          drop.position,\n          vectorScale(drop.velocity, dt * 60)\n        );\n        drop.velocity = vectorScale(drop.velocity, 0.95);\n        drop.lifetime -= dt;\n\n        const distToPlayer = vectorDistance(drop.position, player.position);\n        if (distToPlayer < drop.size * 2 && this.keys.has('f')) {\n          (player.resources as any)[drop.resourceType] += drop.amount;\n          this.createParticles(drop.position, 15, '#ffd700', 0.5);\n          return false;\n        }\n\n        return drop.lifetime > 0;\n      }\n    );\n  }\n\n  private handleCollisions(dt: number = 0.016): void {\n    const player = this.gameState.player;\n\n    this.gameState.projectiles = this.gameState.projectiles.filter(\n      (projectile) => {\n        if (projectile.owner === 'player') {\n          let hit = false;\n\n          if (this.voidSubdivider && this.voidSubdivider.health > 0) {\n            if (checkVoidSubdividerCollision(this.voidSubdivider, projectile.position, projectile.size)) {\n              this.voidSubdivider.health -= projectile.damage;\n              this.createDamageNumber(this.voidSubdivider.position, projectile.damage, '#ff6600');\n              this.createParticles(projectile.position, 5, '#7c3aed', 0.3);\n\n              if (projectile.explosive) {\n                this.createExplosion(\n                  projectile.position,\n                  projectile.explosionRadius || 50,\n                  projectile.damage * 0.5\n                );\n              }\n\n              hit = true;\n              if (!projectile.piercing || projectile.piercingCount <= 0) {\n                return false;\n              }\n              projectile.piercingCount--;\n            }\n          }\n\n          this.gameState.enemies.forEach((enemy) => {\n            if (enemy.health <= 0) return;\n\n            if (checkCollision(projectile, enemy)) {\n              let damageToApply = projectile.damage;\n              let shouldReflectProjectile = false;\n\n              if (this.modifierSystem.isModifiedEnemy(enemy)) {\n                const result = this.modifierSystem.handleDamage(\n                  enemy,\n                  projectile.damage,\n                  projectile.position,\n                  projectile.velocity,\n                  (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime),\n                  (projectiles) => this.gameState.projectiles.push(...projectiles),\n                  (spawnedEnemy) => this.gameState.enemies.push(spawnedEnemy)\n                );\n\n                if (result.shouldBlockDamage) {\n                  if (result.shouldReflect) {\n                    projectile.velocity = vectorScale(projectile.velocity, -1);\n                    projectile.owner = 'enemy';\n                  }\n                  return;\n                }\n                damageToApply *= result.damageModifier;\n              }\n\n\n              enemy.health -= damageToApply;\n              enemy.isAggro = true;\n\n              this.createDamageNumber(enemy.position, damageToApply, '#ff6600');\n\n              if (this.modifierSystem.isModifiedEnemy(enemy) && enemy.modifiers && enemy.modifiers.includes('thorns')) {\n                const thornsDamage = (enemy as any).thornsDamage || (enemy.damage * 0.5);\n                this.applyDamageToPlayer(thornsDamage);\n                this.createParticles(player.position, 8, '#ef4444', 0.4);\n                if (player.health <= 0) {\n                  this.gameState.isGameOver = true;\n                }\n              }\n\n              this.createParticles(enemy.position, 5, enemy.color, 0.3);\n\n              if (projectile.chainCount && projectile.chainCount > 0 && !projectile.chainedFrom) {\n                const chainRange = projectile.maxRange ? Math.min(projectile.maxRange * 0.3, 200) : 200;\n                const nearest = this.findNearestEnemyExcluding(projectile.position, enemy.id);\n                if (nearest && vectorDistance(projectile.position, nearest.position) < chainRange) {\n                  const chainDir = vectorNormalize(vectorSubtract(nearest.position, projectile.position));\n                  const chainVelocity = vectorScale(chainDir, 18);\n\n                  this.gameState.projectiles.push({\n                    ...projectile,\n                    id: generateId(),\n                    position: { ...enemy.position },\n                    velocity: chainVelocity,\n                    chainCount: projectile.chainCount - 1,\n                    chainedFrom: enemy.id,\n                    isChainLightning: true,\n                    chainLightningTarget: nearest.position,\n                  });\n                  this.createParticles(enemy.position, 15, '#a78bfa', 0.6);\n                  this.createParticles(nearest.position, 10, '#8b5cf6', 0.4);\n                }\n              }\n\n              if (projectile.splitCount && projectile.splitCount > 0 && !projectile.isSplit) {\n                const splitCount = projectile.splitCount;\n                for (let i = 0; i < splitCount; i++) {\n                  const angle = (Math.PI * 2 * i) / splitCount;\n                  const velocity = vectorFromAngle(angle, 10);\n\n                  this.gameState.projectiles.push({\n                    ...projectile,\n                    id: generateId(),\n                    position: { ...projectile.position },\n                    velocity,\n                    damage: projectile.damage * 0.5,\n                    size: projectile.size * 0.7,\n                    isSplit: true,\n                    splitCount: 0,\n                    lifetime: 1.5,\n                  });\n                }\n                this.createParticles(projectile.position, 15, projectile.color, 0.5);\n              }\n\n              if (projectile.explosive) {\n                this.createExplosion(\n                  projectile.position,\n                  projectile.explosionRadius || 50,\n                  projectile.damage * 0.5\n                );\n                hit = true;\n              }\n\n              if (enemy.health <= 0) {\n                let scoreValue = 10;\n                if (enemy.type === 'boss') scoreValue = 500;\n                if (enemy.type === 'miniboss') scoreValue = 1000;\n                if (this.modifierSystem.isModifiedEnemy(enemy)) scoreValue = 150;\n\n                this.gameState.score += scoreValue;\n                \n                if (enemy.type === 'miniboss') {\n                  this.handleMinibossDeath(enemy);\n                } else {\n                  this.spawnCurrency(enemy.position, enemy.currencyDrop);\n                }\n                \n                this.worldGenerator.registerEnemyKill(enemy.id);\n\n                let particleCount = 20;\n                if (enemy.type === 'boss') particleCount = 50;\n                if (enemy.type === 'miniboss') particleCount = 100;\n                if (this.modifierSystem.isModifiedEnemy(enemy)) particleCount = 40;\n\n                this.createParticles(enemy.position, particleCount, enemy.color, 0.6);\n\n                if (this.modifierSystem.isModifiedEnemy(enemy)) {\n                  this.modifierSystem.removeEnemy(enemy.id);\n                }\n              }\n\n              if (!projectile.piercing && !projectile.explosive) {\n                hit = true;\n              } else if (projectile.piercing && !projectile.explosive) {\n                projectile.piercingCount--;\n                if (projectile.piercingCount <= 0) hit = true;\n              }\n            }\n          });\n\n          if (this.gameState.pvpEnabled) {\n            this.gameState.remotePlayers.forEach((remotePlayer) => {\n              if (projectile.playerId !== remotePlayer.player.id && checkCollision(projectile, remotePlayer.player) && !remotePlayer.player.isDashing) {\n                this.applyDamageToPlayer(projectile.damage, remotePlayer.player);\n                this.createDamageNumber(remotePlayer.player.position, projectile.damage, '#ff6600');\n                this.createParticles(remotePlayer.player.position, 8, '#ff0000', 0.4);\n                \n                if (projectile.explosive) {\n                  this.createExplosion(\n                    projectile.position,\n                    projectile.explosionRadius || 50,\n                    projectile.damage * 0.5\n                  );\n                  hit = true;\n                }\n                \n                if (!projectile.piercing && !projectile.explosive) {\n                  hit = true;\n                } else if (projectile.piercing && !projectile.explosive) {\n                  projectile.piercingCount--;\n                  if (projectile.piercingCount <= 0) hit = true;\n                }\n              }\n            });\n\n            if (projectile.playerId && projectile.playerId !== player.id && checkCollision(projectile, player) && !player.isDashing) {\n              this.applyDamageToPlayer(projectile.damage);\n              this.checkPlayerDeath();\n              this.createDamageNumber(player.position, projectile.damage, '#ff6600');\n              this.createParticles(player.position, 8, '#ff0000', 0.4);\n              \n              if (projectile.explosive) {\n                this.createExplosion(\n                  projectile.position,\n                  projectile.explosionRadius || 50,\n                  projectile.damage * 0.5\n                );\n              }\n              \n              if (player.health <= 0) {\n                this.gameState.isGameOver = true;\n              }\n              \n              return false;\n            }\n          }\n\n          return !hit;\n        } else {\n          if (checkCollision(projectile, player) && !player.isDashing) {\n            this.applyDamageToPlayer(projectile.damage);\n            this.checkPlayerDeath();\n            this.createParticles(player.position, 8, '#ff0000', 0.4);\n\n            return false;\n          }\n        }\n\n        return true;\n      }\n    );\n\n    this.gameState.enemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      if (checkCollision(enemy, player) && !player.isDashing) {\n        if (enemy.attackCooldown <= 0) {\n          this.applyDamageToPlayer(enemy.damage);\n          enemy.attackCooldown = 1;\n          this.createParticles(player.position, 5, '#ff0000', 0.3);\n          this.checkPlayerDeath();\n        }\n      }\n    });\n\n    if (this.voidSubdivider && this.voidSubdivider.health > 0 && !player.isDashing) {\n      if (checkVoidSubdividerCollision(this.voidSubdivider, player.position, player.size)) {\n        const currentTime = Date.now();\n        const lastHitTime = (this.voidSubdivider as any).lastPlayerHit || 0;\n\n        if (currentTime - lastHitTime > 1000) {\n          this.applyDamageToPlayer(this.voidSubdivider.damage);\n          (this.voidSubdivider as any).lastPlayerHit = currentTime;\n          this.createParticles(player.position, 8, '#7c3aed', 0.4);\n\n          if (player.health <= 0) {\n            this.gameState.isGameOver = true;\n          }\n        }\n      }\n\n      if (this.voidSubdivider.attackPhase === 'breath' && this.voidSubdivider.breathTimer && this.voidSubdivider.breathDirection !== undefined) {\n        const headPos = this.voidSubdivider.segments[0].position;\n        const breathLength = 600;\n        const breathWidth = 80;\n\n        const toPlayer = vectorSubtract(player.position, headPos);\n        const distToHead = Math.sqrt(toPlayer.x ** 2 + toPlayer.y ** 2);\n\n        if (distToHead < breathLength) {\n          const angleToPlayer = Math.atan2(toPlayer.y, toPlayer.x);\n          const angleDiff = Math.abs(angleToPlayer - this.voidSubdivider.breathDirection);\n\n          const distToLine = Math.abs(distToHead * Math.sin(angleDiff));\n\n          if (distToLine < breathWidth / 2) {\n            this.applyDamageToPlayer(this.voidSubdivider.damage * 0.5 * dt);\n            if (Math.random() < 0.1) {\n              this.createParticles(player.position, 3, '#a78bfa', 0.3);\n            }\n\n            if (player.health <= 0) {\n              this.gameState.isGameOver = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private checkVoidSubdividerSpawn(): void {\n    if (this.voidSubdivider) {\n      this.activeOminousTendril = null;\n      return;\n    }\n\n    let closestOminousTendril: { feature: any; distance: number } | null = null;\n\n    for (const feature of this.biomeFeatures) {\n      if (feature.type === 'void-gap' && feature.data.hasOminousTendril && !this.voidGapBossSpawned.has(feature.id)) {\n        const distanceToFeature = vectorDistance(this.gameState.player.position, feature.position);\n\n        if (distanceToFeature < 250 && (!closestOminousTendril || distanceToFeature < closestOminousTendril.distance)) {\n          closestOminousTendril = { feature, distance: distanceToFeature };\n        }\n      }\n    }\n\n    if (closestOminousTendril && closestOminousTendril.distance < 150) {\n      this.activeOminousTendril = {\n        featureId: closestOminousTendril.feature.id,\n        canInteract: true,\n      };\n\n      if (this.keys.has('f') || this.keys.has('F')) {\n        this.spawnVoidSubdividerFromTendril(closestOminousTendril.feature);\n      }\n    } else {\n      this.activeOminousTendril = null;\n    }\n  }\n\n  private spawnVoidSubdividerFromTendril(feature: any): void {\n    const angle = feature.data.ominousTendrilAngle || 0;\n    const spawnDistance = Math.max(feature.data.width, feature.data.height) / 2 + 150;\n    const spawnPos = {\n      x: feature.position.x + Math.cos(angle) * spawnDistance,\n      y: feature.position.y + Math.sin(angle) * spawnDistance,\n    };\n\n    this.voidSubdivider = createVoidSubdivider(spawnPos);\n    this.voidGapBossSpawned.add(feature.id);\n    this.activeOminousTendril = null;\n\n    this.createParticles(feature.position, 100, '#7c3aed', 1.5);\n    this.createParticles(spawnPos, 80, '#a78bfa', 1.2);\n  }\n\n  getActiveOminousTendril(): { featureId: string; canInteract: boolean } | null {\n    return this.activeOminousTendril;\n  }\n\n  private updateVoidSubdividerBoss(dt: number): void {\n    if (!this.voidSubdivider) return;\n\n    updateVoidSubdivider(\n      this.voidSubdivider,\n      dt,\n      this.gameState.player.position,\n      (pos, count, color, lifetime) => this.createParticles(pos, count, color, lifetime)\n    );\n\n    if (this.voidSubdivider.health <= 0) {\n      this.handleVoidSubdividerDeath();\n      this.voidSubdivider = null;\n    }\n  }\n\n  private handleVoidSubdividerDeath(): void {\n    if (!this.voidSubdivider) return;\n\n    const dropPos = this.voidSubdivider.position;\n\n    // Award unique boss resources\n    this.gameState.player.resources.voidCore += 2 + Math.floor(Math.random() * 2);\n    this.gameState.player.currency += this.voidSubdivider.currencyDrop * 2;\n\n    // Enhanced resource drops\n    const lootDrops = [\n      { resource: 'voidEssence', amount: 80 + Math.floor(Math.random() * 50) },\n      { resource: 'singularityCore', amount: 5 + Math.floor(Math.random() * 5) },\n      { resource: 'flux', amount: 60 + Math.floor(Math.random() * 40) },\n      { resource: 'energy', amount: 150 + Math.floor(Math.random() * 100) },\n      { resource: 'aetheriumShard', amount: 8 + Math.floor(Math.random() * 7) },\n      { resource: 'voidCore', amount: 1 },\n    ];\n\n    lootDrops.forEach((drop, index) => {\n      const angle = (index / lootDrops.length) * Math.PI * 2;\n      const distance = 80 + Math.random() * 40;\n      const dropPosition = {\n        x: dropPos.x + Math.cos(angle) * distance,\n        y: dropPos.y + Math.sin(angle) * distance,\n      };\n\n      this.gameState.resourceDrops.push({\n        id: generateId(),\n        position: dropPosition,\n        velocity: createVector(0, 0),\n        size: 20,\n        rotation: 0,\n        resourceType: drop.resource,\n        amount: drop.amount,\n        lifetime: 40,\n        bobPhase: Math.random() * Math.PI * 2,\n      });\n    });\n\n    // Drop 5 crate keys\n    for (let i = 0; i < 5; i++) {\n      const angle = (i / 5) * Math.PI * 2 + Math.random() * 0.5;\n      const distance = 60 + Math.random() * 60;\n      const keyPos = {\n        x: dropPos.x + Math.cos(angle) * distance,\n        y: dropPos.y + Math.sin(angle) * distance,\n      };\n\n      this.gameState.resourceDrops.push({\n        id: generateId(),\n        position: keyPos,\n        velocity: createVector(0, 0),\n        size: 20,\n        rotation: 0,\n        resourceType: 'crateKey',\n        amount: 1,\n        lifetime: 40,\n        bobPhase: Math.random() * Math.PI * 2,\n      });\n    }\n\n    // Drop 3-4 high-tier weapons with multiple perks\n    const weaponDropCount = 3 + Math.floor(Math.random() * 2);\n    for (let i = 0; i < weaponDropCount; i++) {\n      const angle = (i / weaponDropCount) * Math.PI * 2 + Math.PI / 4;\n      const distance = 100 + Math.random() * 50;\n      const weaponPos = {\n        x: dropPos.x + Math.cos(angle) * distance,\n        y: dropPos.y + Math.sin(angle) * distance,\n      };\n\n      // Generate high-tier weapon with 2-4 perks\n      const perkCount = 2 + Math.floor(Math.random() * 3);\n      const weapon = this.crateSystem.generateWeapon();\n      const perks = this.crateSystem.generatePerks(weapon, perkCount);\n\n      // Apply perks to weapon\n      perks.forEach(perk => {\n        this.weaponUpgradeManager.applyPerkToWeapon(weapon, perk);\n      });\n\n      const velocityAngle = angle + (Math.random() - 0.5) * 0.5;\n      const velocityMag = 2 + Math.random() * 3;\n      this.spawnWeaponDrop(\n        weaponPos,\n        vectorFromAngle(velocityAngle, velocityMag),\n        weapon,\n        perks\n      );\n    }\n\n    this.createParticles(dropPos, 150, '#7c3aed', 2.0);\n    this.createParticles(dropPos, 120, '#a78bfa', 1.5);\n    this.createParticles(dropPos, 80, '#5b21b6', 1.2);\n    this.createParticles(dropPos, 60, '#fbbf24', 1.0);\n\n    this.createDamageNumber(dropPos, 0, '#ffd700', 'VOID SUBDIVIDER DEFEATED!');\n  }\n\n  getVoidSubdivider(): VoidSubdivider | null {\n    return this.voidSubdivider;\n  }\n\n  private cleanupDeadEntities(): void {\n    const now = Date.now();\n    const deadEnemies = this.gameState.enemies.filter((enemy) => enemy.health <= 0);\n    deadEnemies.forEach(enemy => {\n      this.recentEnemyDeaths = this.recentEnemyDeaths.filter(\n        death => now - death.timestamp < 3000\n      );\n      this.recentEnemyDeaths.push({ x: enemy.position.x, y: enemy.position.y, timestamp: now });\n    });\n    \n    this.gameState.enemies = this.gameState.enemies.filter((enemy) => enemy.health > 0);\n\n    const MAX_ENEMIES = 300;\n    if (this.gameState.enemies.length > MAX_ENEMIES) {\n      const playerPos = this.gameState.player.position;\n      const SAFE_DISTANCE = 800;\n      \n      const distantEnemies = this.gameState.enemies.filter(enemy => {\n        const dist = vectorDistance(enemy.position, playerPos);\n        return dist > SAFE_DISTANCE;\n      });\n      \n      if (distantEnemies.length > 0) {\n        distantEnemies.sort((a, b) => {\n          const distA = vectorDistance(a.position, playerPos);\n          const distB = vectorDistance(b.position, playerPos);\n          return distB - distA;\n        });\n        \n        const enemiesToRemove = new Set(distantEnemies.slice(0, this.gameState.enemies.length - MAX_ENEMIES).map(e => e.id));\n        this.gameState.enemies = this.gameState.enemies.filter(e => !enemiesToRemove.has(e.id));\n      }\n    }\n\n    this.resourceNodes = this.resourceNodes.filter((node) => node.health > 0);\n    this.chests = this.chests.filter((chest) => !chest.isOpen);\n    this.gameState.chests = this.chests;\n  }\n\n  private loadChunksAroundPlayer(): void {\n    const newActiveChunks = this.worldGenerator.getActiveChunks(\n      this.gameState.player.position.x,\n      this.gameState.player.position.y,\n      2\n    );\n\n    this.worldGenerator.unloadDistantChunks(\n      this.gameState.player.position.x,\n      this.gameState.player.position.y,\n      4\n    );\n\n    const existingEnemies = this.gameState.enemies;\n    const existingEnemyIds = new Set(existingEnemies.map(e => e.id));\n    const existingChestIds = new Set(this.chests.map(c => c.id));\n\n    const chunkEnemyIds = new Set<string>();\n    const newEnemies: Enemy[] = [];\n    const newChests: Chest[] = [];\n\n    this.resourceNodes = [];\n    this.obstacles = [];\n    this.portals = [];\n    this.extractionPoints = [];\n    this.biomeFeatures = [];\n\n    newActiveChunks.forEach(chunk => {\n      chunk.enemies.forEach(chunkEnemy => {\n        chunkEnemyIds.add(chunkEnemy.id);\n        if (!existingEnemyIds.has(chunkEnemy.id)) {\n          const now = Date.now();\n          const isTooCloseToRecentDeath = this.recentEnemyDeaths.some(death => {\n            if (now - death.timestamp > 3000) return false;\n            const dist = Math.sqrt(\n              Math.pow(chunkEnemy.position.x - death.x, 2) +\n              Math.pow(chunkEnemy.position.y - death.y, 2)\n            );\n            return dist < 100;\n          });\n          \n          if (isTooCloseToRecentDeath) return;\n          \n          chunkEnemy.detectionRadius = 150;\n\n          if (chunkEnemy.modifiers && chunkEnemy.modifiers.length > 0) {\n            const modifiers = chunkEnemy.modifiers as any[];\n            const modifiedEnemy = this.modifierSystem.applyModifiersToEnemy(chunkEnemy, modifiers);\n            newEnemies.push(modifiedEnemy);\n          } else {\n            newEnemies.push(chunkEnemy);\n          }\n        }\n      });\n      chunk.chests.forEach(chunkChest => {\n        if (!existingChestIds.has(chunkChest.id)) {\n          newChests.push(chunkChest);\n        }\n      });\n      this.resourceNodes.push(...chunk.resourceNodes);\n      this.obstacles.push(...chunk.obstacles);\n      this.portals.push(...chunk.portals);\n      this.biomeFeatures.push(...chunk.biomeFeatures);\n      if (chunk.extractionPoint) {\n        this.extractionPoints.push(chunk.extractionPoint);\n      }\n    });\n\n    this.chests.push(...newChests);\n    this.gameState.chests = this.chests;\n\n    const playerChunkX = Math.floor(this.gameState.player.position.x / CHUNK_SIZE);\n    const playerChunkY = Math.floor(this.gameState.player.position.y / CHUNK_SIZE);\n\n    const currentBiome = this.biomeManager.getCurrentBiome();\n    this.gameState.enemies = [...existingEnemies, ...newEnemies].filter(enemy => {\n      if (chunkEnemyIds.has(enemy.id)) {\n        return true;\n      }\n\n      const enemyChunkX = Math.floor(enemy.position.x / CHUNK_SIZE);\n      const enemyChunkY = Math.floor(enemy.position.y / CHUNK_SIZE);\n      const chunkDistance = Math.max(Math.abs(enemyChunkX - playerChunkX), Math.abs(enemyChunkY - playerChunkY));\n\n      if (chunkDistance > 2) {\n        return false;\n      }\n\n      const distToPlayer = vectorDistance(enemy.position, this.gameState.player.position);\n      const screenDistance = Math.max(CANVAS_WIDTH, CANVAS_HEIGHT);\n      if (!enemy.isAggro && distToPlayer > screenDistance * 1.5) {\n        return false;\n      }\n\n      return true;\n    }).map(enemy => this.biomeManager.modifyEnemyForBiome(enemy, currentBiome));\n  }\n\n  private updateInteractables(dt: number): void {\n    const player = this.gameState.player;\n\n    this.resourceNodes.forEach(node => {\n      node.bobPhase += dt * 2;\n      const distance = vectorDistance(player.position, node.position);\n      if (distance < node.size * 2 && this.keys.has('f')) {\n        player.resources[node.resourceType] += Math.floor(node.value);\n        this.createParticles(node.position, 20, node.color, 0.6);\n        node.health = 0;\n      }\n    });\n\n    this.chests.forEach(chest => {\n      if (chest.isOpen) return;\n\n      chest.rotation += dt * 0.5;\n\n      const distance = vectorDistance(player.position, chest.position);\n\n      if (chest.type === 'timed' && chest.radius) {\n        if (distance < chest.radius) {\n          chest.timer = Math.min((chest.timer || 0) + dt, chest.maxTime || 5);\n          if (chest.timer >= (chest.maxTime || 5)) {\n            chest.isOpen = true;\n            this.spawnLoot(chest);\n          }\n        } else {\n          chest.timer = Math.max(0, (chest.timer || 0) - dt * 2);\n        }\n      } else if (chest.type === 'locked') {\n        if (distance < chest.size * 2 && this.keys.has('f')) {\n          if (player.resources.crateKey > 0) {\n            player.resources.crateKey -= 1;\n            chest.isOpen = true;\n            this.spawnLoot(chest);\n          }\n        }\n      } else if (chest.type === 'regular') {\n        if (distance < chest.size * 2 && this.keys.has('f')) {\n          chest.isOpen = true;\n          this.spawnLoot(chest);\n        }\n      }\n    });\n  }\n\n  private spawnResourceDrop(position: Vector2, resourceType: string, amount: number): void {\n    const angle = Math.random() * Math.PI * 2;\n    const speed = 3 + Math.random() * 2;\n    const velocity = createVector(\n      Math.cos(angle) * speed,\n      Math.sin(angle) * speed - 2\n    );\n\n    this.gameState.resourceDrops.push({\n      id: generateId(),\n      position: createVector(position.x, position.y),\n      velocity,\n      size: 20,\n      rotation: 0,\n      resourceType,\n      amount,\n      lifetime: 30,\n      bobPhase: Math.random() * Math.PI * 2,\n    });\n  }\n\n  private spawnLoot(chest: Chest): void {\n    this.createParticles(chest.position, 40, '#ffd700', 0.8);\n    const lootRoll = Math.random();\n\n    const keyDropChance = Math.random();\n    if (keyDropChance < 0.15) {\n      this.spawnResourceDrop(chest.position, 'crateKey', 1);\n    }\n\n    if (chest.type === 'timed') {\n      if (lootRoll < 0.65) {\n        const crate = this.crateSystem.generateWeaponCrate();\n        this.spawnWeaponDrop(chest.position, crate.weapon, crate.perks);\n      } else if (lootRoll < 0.85) {\n        this.spawnCurrency(chest.position, randomRange(100, 250));\n      } else {\n        this.spawnResourceDrop(chest.position, 'coreDust', Math.floor(randomRange(5, 15)));\n        this.spawnResourceDrop(chest.position, 'alloyFragments', Math.floor(randomRange(5, 15)));\n        this.spawnResourceDrop(chest.position, 'energy', Math.floor(randomRange(5, 15)));\n      }\n    } else if (chest.type === 'locked') {\n      if (lootRoll < 0.75) {\n        const crate = this.crateSystem.generateWeaponCrate();\n        this.spawnWeaponDrop(chest.position, crate.weapon, crate.perks);\n      } else if (lootRoll < 0.9) {\n        this.spawnCurrency(chest.position, randomRange(150, 350));\n      } else {\n        this.spawnResourceDrop(chest.position, 'coreDust', Math.floor(randomRange(15, 30)));\n        this.spawnResourceDrop(chest.position, 'alloyFragments', Math.floor(randomRange(15, 30)));\n        this.spawnResourceDrop(chest.position, 'energy', Math.floor(randomRange(15, 30)));\n      }\n    } else {\n      if (lootRoll < 0.7) {\n        this.spawnCurrency(chest.position, randomRange(25, 75));\n      } else {\n        const resourceType = ['geoShards', 'coreDust', 'energy'][Math.floor(Math.random() * 3)] as 'geoShards' | 'coreDust' | 'energy';\n        this.spawnResourceDrop(chest.position, resourceType, Math.floor(randomRange(10, 20)));\n      }\n    }\n  }\n\n  private handlePortals(): void {\n    const player = this.gameState.player;\n    if ((player.portalCooldown || 0) > 0) return;\n\n    const allPortals = this.worldGenerator.getAllPortals();\n    for (const portal of allPortals) {\n      const distance = vectorDistance(player.position, portal.position);\n      if (distance < portal.size + player.size && this.keys.has('e')) {\n        const linkedPortal = allPortals.find(p => p.id === portal.linkedPortalId);\n        if (linkedPortal) {\n          player.position = { ...linkedPortal.position };\n          player.portalCooldown = 3; // 3 second cooldown\n          this.createParticles(portal.position, 30, portal.color, 0.8);\n          this.createParticles(linkedPortal.position, 30, linkedPortal.color, 0.8);\n          break; // Exit loop after teleporting\n        }\n      }\n    }\n  }\n\n  private handleExtractionPoints(): void {\n    const player = this.gameState.player;\n\n    this.extractionPoints.forEach(point => {\n      const distance = vectorDistance(player.position, point.position);\n      if (distance < point.size + player.size && this.keys.has('e')) {\n        this.gameState.gameOver = true;\n        this.gameState.victory = true;\n        this.createParticles(point.position, 50, '#00ff00', 1.0);\n      }\n    });\n  }\n\n  private spawnWeaponDrop(\n    position: { x: number; y: number },\n    weapon: Weapon,\n    perks: any[]\n  ): void {\n    const MAX_WEAPON_DROPS = 50;\n    if (this.gameState.weaponDrops.length >= MAX_WEAPON_DROPS) {\n      this.gameState.weaponDrops.shift();\n    }\n\n    const angle = randomRange(0, Math.PI * 2);\n    const speed = randomRange(3, 5);\n    const velocity = vectorFromAngle(angle, speed);\n\n    this.gameState.weaponDrops.push({\n      id: generateId(),\n      position: { ...position },\n      velocity,\n      size: 25,\n      rotation: 0,\n      weapon,\n      weaponPerks: perks,\n      lifetime: 30,\n      bobPhase: randomRange(0, Math.PI * 2),\n    });\n  }\n\n  private spawnCurrency(\n    position: { x: number; y: number },\n    value: number\n  ): void {\n    const angle = randomRange(0, Math.PI * 2);\n    const speed = randomRange(2, 4);\n    const velocity = vectorFromAngle(angle, speed);\n\n    this.gameState.currencyDrops.push({\n      id: generateId(),\n      position: { ...position },\n      velocity,\n      value: Math.floor(value),\n      lifetime: 10,\n      size: 10,\n      rotation: 0,\n    });\n  }\n\n  private createDamageNumber(position: { x: number; y: number }, damage: number, color: string): void {\n    const MAX_DAMAGE_NUMBERS = 100;\n    if (this.gameState.damageNumbers.length >= MAX_DAMAGE_NUMBERS) {\n      return;\n    }\n\n    const dmg = Math.floor(damage);\n    this.gameState.damageNumbers.push({\n      id: generateId(),\n      position: { x: position.x + randomRange(-10, 10), y: position.y - 20 },\n      damage: dmg,\n      lifetime: 1.2,\n      maxLifetime: 1.2,\n      velocity: createVector(randomRange(-0.5, 0.5), -1.5),\n      color,\n      text: dmg.toString(),\n    });\n  }\n\n  private updateDamageNumbers(dt: number): void {\n    this.gameState.damageNumbers = this.gameState.damageNumbers.filter((dmgNum) => {\n      dmgNum.position = vectorAdd(dmgNum.position, vectorScale(dmgNum.velocity, dt * 60));\n      dmgNum.velocity.y += dt * 3;\n      dmgNum.lifetime -= dt;\n      return dmgNum.lifetime > 0;\n    });\n  }\n\n  private createParticles(\n    position: { x: number; y: number },\n    count: number,\n    color: string,\n    maxLifetime: number\n  ): void {\n    const MAX_PARTICLES = 500;\n    if (this.gameState.particles.length >= MAX_PARTICLES) {\n      return;\n    }\n\n    const particlesToCreate = Math.min(count, MAX_PARTICLES - this.gameState.particles.length);\n\n    for (let i = 0; i < particlesToCreate; i++) {\n      const angle = randomRange(0, Math.PI * 2);\n      const speed = randomRange(1, 4);\n      const velocity = vectorFromAngle(angle, speed);\n\n      this.gameState.particles.push({\n        id: generateId(),\n        position: { ...position },\n        velocity,\n        size: randomRange(2, 5),\n        color,\n        lifetime: maxLifetime,\n        maxLifetime,\n        rotation: 0,\n      });\n    }\n  }\n\n  private fireGrapplingHook(): void {\n    const player = this.gameState.player;\n\n    // Allow detaching from grapple by clicking again\n    if (player.isGrappling) {\n      player.isGrappling = false;\n      player.isGliding = true;\n      // Preserve current momentum when detaching\n      player.glideVelocity = vectorScale(player.velocity, 1.0);\n      return;\n    }\n\n    const angle = player.rotation;\n    const activeWeapon = player.equippedWeapons[player.activeWeaponIndex];\n    const maxRange = activeWeapon?.grapplingStats?.maxRange || 400;\n    const attachBonus = activeWeapon?.grapplingStats?.attachBonus || 0;\n    const endX = player.position.x + Math.cos(angle) * maxRange;\n    const endY = player.position.y + Math.sin(angle) * maxRange;\n\n    let nearestTarget: { x: number; y: number } | null = null;\n    let nearestDist = maxRange;\n    let targetId: string | undefined;\n    let targetType: 'enemy' | 'player' | 'obstacle' | undefined;\n    const attachAngle = 0.3 + (attachBonus / 1000);\n\n    // Check for enemies\n    for (const enemy of this.gameState.enemies) {\n      if (enemy.health <= 0) continue;\n      const toEnemy = vectorSubtract(enemy.position, player.position);\n      const angleToEnemy = Math.atan2(toEnemy.y, toEnemy.x);\n      const angleDiff = Math.abs(angleToEnemy - angle);\n\n      if (angleDiff < attachAngle) {\n        const dist = vectorDistance(player.position, enemy.position);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestTarget = enemy.position;\n          targetId = enemy.id;\n          targetType = 'enemy';\n        }\n      }\n    }\n\n    // Check for remote players (multiplayer)\n    for (const remotePlayer of this.gameState.remotePlayers) {\n      const toPlayer = vectorSubtract(remotePlayer.player.position, player.position);\n      const angleToPlayer = Math.atan2(toPlayer.y, toPlayer.x);\n      const angleDiff = Math.abs(angleToPlayer - angle);\n\n      if (angleDiff < attachAngle) {\n        const dist = vectorDistance(player.position, remotePlayer.player.position);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestTarget = remotePlayer.player.position;\n          targetId = remotePlayer.id;\n          targetType = 'player';\n        }\n      }\n    }\n\n    // Check for obstacles\n    for (const obstacle of this.obstacles) {\n      const toObstacle = vectorSubtract(obstacle.position, player.position);\n      const angleToObstacle = Math.atan2(toObstacle.y, toObstacle.x);\n      const angleDiff = Math.abs(angleToObstacle - angle);\n\n      if (angleDiff < attachAngle) {\n        const dist = vectorDistance(player.position, obstacle.position);\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          // Calculate intersection point on obstacle edge instead of center\n          const rayDir = vectorFromAngle(angle);\n          const intersectionPoint = this.calculateObstacleIntersection(player.position, rayDir, obstacle);\n          nearestTarget = intersectionPoint;\n          targetId = undefined;\n          targetType = 'obstacle';\n        }\n      }\n    }\n\n    if (nearestTarget) {\n      player.isGrappling = true;\n      player.grappleTarget = { ...nearestTarget };\n      player.grappleTargetId = targetId;\n      player.grappleTargetType = targetType;\n      player.grappleProgress = 0;\n      player.isGliding = false;\n      this.createParticles(player.position, 15, '#888888', 0.3);\n    }\n  }\n\n  private calculateObstacleIntersection(start: Vector2, direction: Vector2, obstacle: Obstacle): Vector2 {\n    const dx = obstacle.position.x - start.x;\n    const dy = obstacle.position.y - start.y;\n\n    const t = (dx * direction.x + dy * direction.y);\n    const closestX = start.x + direction.x * t;\n    const closestY = start.y + direction.y * t;\n\n    const toClosest = vectorSubtract({ x: closestX, y: closestY }, obstacle.position);\n    const distToCenter = Math.sqrt(toClosest.x * toClosest.x + toClosest.y * toClosest.y);\n\n    if (distToCenter > obstacle.size / 2) {\n      const scale = (obstacle.size / 2) / distToCenter;\n      return {\n        x: obstacle.position.x + toClosest.x * scale,\n        y: obstacle.position.y + toClosest.y * scale\n      };\n    }\n\n    return { x: closestX, y: closestY };\n  }\n\n  private createGrappleSlamExplosion(position: { x: number; y: number }, damage: number, radius: number): void {\n    // Create dramatic explosion particles\n    this.createParticles(position, 40, '#ffaa00', 0.6);\n    this.createParticles(position, 30, '#ff6600', 0.5);\n    this.createParticles(position, 20, '#ffdd00', 0.4);\n    this.createParticles(position, 15, '#ff3300', 0.7);\n\n    // Create expanding shockwave particles\n    for (let i = 0; i < 12; i++) {\n      const angle = (i / 12) * Math.PI * 2;\n      const velocity = vectorScale(vectorFromAngle(angle), 8);\n      this.gameState.particles.push({\n        position: { ...position },\n        velocity,\n        size: 6,\n        color: '#ff8800',\n        lifetime: 0.4,\n        maxLifetime: 0.4,\n        rotation: 0,\n      });\n    }\n\n    for (const enemy of this.gameState.enemies) {\n      if (enemy.health <= 0) continue;\n      const dist = vectorDistance(position, enemy.position);\n      if (dist < radius) {\n        const falloff = 1 - (dist / radius);\n        const finalDamage = damage * falloff;\n        enemy.health -= finalDamage;\n        this.createDamageNumber(enemy.position, finalDamage, '#ffaa00');\n\n        const knockbackStrength = 12 * falloff;\n        const knockback = vectorScale(vectorNormalize(vectorSubtract(enemy.position, position)), knockbackStrength);\n        enemy.velocity = vectorAdd(enemy.velocity, knockback);\n      }\n    }\n  }\n\n  dash(): void {\n    const player = this.gameState.player;\n    if (player.dashCooldown <= 0 && !player.isDashing) {\n      // If grappling, detach and enter glide mode with full momentum\n      if (player.isGrappling) {\n        player.isGrappling = false;\n        player.isGliding = true;\n\n        // Calculate dash direction\n        const dashDir = vectorFromAngle(player.rotation);\n\n        // Preserve grappling momentum and add dash boost\n        const currentSpeed = Math.sqrt(player.velocity.x ** 2 + player.velocity.y ** 2);\n        const dashBoost = vectorScale(dashDir, PLAYER_DASH_SPEED * 0.7);\n\n        // Keep all current momentum and add dash boost\n        player.glideVelocity = vectorAdd(player.velocity, dashBoost);\n\n        // Don't set isDashing to true when detaching from grapple\n        // This allows continuous gliding instead of brief dash\n        player.dashCooldown = PLAYER_DASH_COOLDOWN;\n        this.createParticles(player.position, 20, '#00ffff', 0.5);\n        return;\n      }\n\n      const hasVoidDrone = this.gameState.drones.some(d => d.droneType === 'void_drone');\n      \n      if (hasVoidDrone) {\n        const blinkDistance = 150;\n        \n        let blinkDir;\n        const currentSpeed = Math.sqrt(player.velocity.x ** 2 + player.velocity.y ** 2);\n        \n        if (currentSpeed > 0.1) {\n          blinkDir = vectorNormalize(player.velocity);\n        } else {\n          blinkDir = vectorFromAngle(player.rotation);\n        }\n        \n        const blinkTarget = vectorAdd(player.position, vectorScale(blinkDir, blinkDistance));\n        \n        this.createParticles(player.position, 30, '#a78bfa', 0.8);\n        player.position = { ...blinkTarget };\n        this.createParticles(player.position, 30, '#a78bfa', 0.8);\n        \n        if (currentSpeed > 0) {\n          player.isGliding = true;\n          player.glideVelocity = { ...player.velocity };\n        }\n        \n        player.dashCooldown = PLAYER_DASH_COOLDOWN * 0.5;\n        this.triggerDroneActiveAbilities('dash');\n      } else {\n        player.isDashing = true;\n        player.dashCooldown = PLAYER_DASH_COOLDOWN;\n        this.createParticles(player.position, 15, '#00ffff', 0.4);\n        this.triggerDroneActiveAbilities('dash');\n      }\n    }\n  }\n\n  switchWeapon(index: number): void {\n    if (index >= 0 && index < this.gameState.player.equippedWeapons.length) {\n      this.gameState.player.activeWeaponIndex = index;\n      this.triggerDroneActiveAbilities('weaponSwap');\n    }\n  }\n\n  getWeaponUpgradeManager(): WeaponUpgradeManager {\n    return this.weaponUpgradeManager;\n  }\n\n  getInventory(): PlayerInventory {\n    return this.inventory;\n  }\n\n  purchaseWeaponCrate(): boolean {\n    const cost = this.crateSystem.getCrateCost();\n    if (this.gameState.player.currency < cost) return false;\n\n    this.gameState.player.currency -= cost;\n    const crate = this.crateSystem.generateWeaponCrate();\n    this.inventory.addWeapon(crate.weapon);\n\n    return true;\n  }\n\n  equipWeapon(weaponId: string): boolean {\n    const success = this.inventory.equipWeapon(weaponId);\n    if (success) {\n      this.syncEquippedWeapons();\n    }\n    return success;\n  }\n\n  unequipWeapon(weaponId: string): void {\n    this.inventory.unequipWeapon(weaponId);\n    this.syncEquippedWeapons();\n  }\n\n  deleteWeapon(weaponId: string): void {\n    this.inventory.removeWeapon(weaponId);\n    this.syncEquippedWeapons();\n  }\n\n  equipDrone(droneType: import('../types/game').DroneType): boolean {\n    const success = this.inventory.equipDrone(droneType);\n    if (success) {\n      this.syncDrones();\n    }\n    return success;\n  }\n\n  unequipDrone(droneType: import('../types/game').DroneType): void {\n    this.inventory.unequipDrone(droneType);\n    this.syncDrones();\n  }\n\n  deleteDrone(droneType: import('../types/game').DroneType): void {\n    this.inventory.removeDrone(droneType);\n    this.syncDrones();\n  }\n\n  private syncEquippedWeapons(): void {\n    this.gameState.player.equippedWeapons = this.inventory.getEquippedWeapons().map(weapon => {\n      if (weapon.type === 'grappling_hook' && weapon.grapplingStats) {\n        return {\n          ...weapon,\n          fireRate: weapon.grapplingStats.cooldown,\n          maxRange: weapon.grapplingStats.maxRange,\n        };\n      }\n      return weapon;\n    });\n\n    if (this.gameState.player.activeWeaponIndex >= this.gameState.player.equippedWeapons.length) {\n      this.gameState.player.activeWeaponIndex = Math.max(0, this.gameState.player.equippedWeapons.length - 1);\n    }\n  }\n\n  private updateDrones(dt: number): void {\n    const player = this.gameState.player;\n\n    this.droneSystem.updateDrones(\n      this.gameState.drones,\n      player.position,\n      this.gameState.enemies,\n      dt,\n      (projectile: Projectile) => {\n        this.gameState.projectiles.push(projectile);\n      }\n    );\n\n    this.updateDroneActiveEffects(dt);\n    this.applyDronePassiveEffects(dt);\n  }\n\n  private applyDamageToPlayer(damage: number, player: import('../types/game').Player = this.gameState.player): number {\n    const shieldReduction = (player as any).shieldDamageReduction || 0;\n    const reducedDamage = damage * (1 - shieldReduction);\n    player.health -= reducedDamage;\n    if (reducedDamage > 0 && player === this.gameState.player) {\n      this.triggerDroneActiveAbilities('takeDamage');\n    }\n    return reducedDamage;\n  }\n\n  private updateDroneActiveEffects(dt: number): void {\n    this.gameState.drones.forEach(drone => {\n      const definition = this.droneSystem.getDroneDefinition(drone.droneType);\n      \n      if (drone.activeEffectTimer > 0) {\n        drone.activeEffectTimer -= dt;\n      }\n      \n      if (drone.isActiveEffectActive && drone.activeEffectRemainingTime !== undefined) {\n        drone.activeEffectRemainingTime -= dt;\n        if (drone.activeEffectRemainingTime <= 0) {\n          drone.isActiveEffectActive = false;\n          drone.activeEffectRemainingTime = 0;\n        }\n      }\n    });\n  }\n\n  triggerDroneActiveAbilities(trigger: 'shoot' | 'dash' | 'weaponSwap' | 'takeDamage'): void {\n    const player = this.gameState.player;\n    \n    this.gameState.drones.forEach(drone => {\n      const definition = this.droneSystem.getDroneDefinition(drone.droneType);\n      \n      if (definition.activeTrigger === trigger && drone.activeEffectTimer <= 0) {\n        this.activateDroneAbility(drone, definition, player);\n      }\n    });\n  }\n\n  manuallyActivateDroneAbility(droneType: import('../types/game').DroneType): void {\n    const player = this.gameState.player;\n    const drone = this.gameState.drones.find(d => d.droneType === droneType);\n    \n    if (drone && drone.activeEffectTimer <= 0) {\n      const definition = this.droneSystem.getDroneDefinition(drone.droneType);\n      if (definition.activeTrigger === 'manual') {\n        this.activateDroneAbility(drone, definition, player);\n      }\n    }\n  }\n\n  private activateDroneAbility(\n    drone: Drone, \n    definition: any, \n    player: import('../types/game').Player\n  ): void {\n    drone.isActiveEffectActive = true;\n    drone.activeEffectRemainingTime = definition.activeEffectDuration || 0;\n    drone.activeEffectTimer = definition.activeEffectCooldown || 0;\n\n    switch (drone.droneType) {\n      case 'repair_drone':\n        player.health = Math.min(player.maxHealth, player.health + 30);\n        this.createParticles(player.position, 30, '#34d399', 0.6);\n        break;\n      \n      case 'medic_drone':\n        if (!this.gameState.healingPools) {\n          this.gameState.healingPools = [];\n        }\n        this.gameState.healingPools.push({\n          id: `heal_${Date.now()}`,\n          position: { ...player.position },\n          radius: 150,\n          healPerSecond: 15,\n          lifetime: definition.activeEffectDuration || 6,\n          ownerId: player.id\n        });\n        this.createParticles(player.position, 40, '#4ade80', 0.8);\n        break;\n      \n      case 'shield_drone':\n        player.hasShieldBubble = true;\n        player.shieldBubbleEndTime = Date.now() + (definition.activeEffectDuration || 3) * 1000;\n        this.createParticles(player.position, 50, '#60a5fa', 0.9);\n        break;\n      \n      case 'sniper_drone':\n        player.sniperTacticalMode = true;\n        player.sniperModeEndTime = Date.now() + (definition.activeEffectDuration || 6) * 1000;\n        this.createParticles(player.position, 30, '#94a3b8', 0.7);\n        break;\n      \n      case 'cryo_drone':\n        const cryoRadius = 300;\n        this.gameState.enemies.forEach(enemy => {\n          const dist = Math.sqrt(\n            Math.pow(enemy.position.x - player.position.x, 2) +\n            Math.pow(enemy.position.y - player.position.y, 2)\n          );\n          if (dist <= cryoRadius) {\n            enemy.isFrozen = true;\n            enemy.frozenEndTime = Date.now() + (definition.activeEffectDuration || 3) * 1000;\n            this.createParticles(enemy.position, 15, '#22d3ee', 0.5);\n          }\n        });\n        this.createParticles(player.position, 60, '#22d3ee', 1.0);\n        break;\n      \n      case 'emp_drone':\n        const empRadius = 350;\n        this.gameState.enemies.forEach(enemy => {\n          const dist = Math.sqrt(\n            Math.pow(enemy.position.x - player.position.x, 2) +\n            Math.pow(enemy.position.y - player.position.y, 2)\n          );\n          if (dist <= empRadius) {\n            enemy.isStunned = true;\n            enemy.stunnedEndTime = Date.now() + (definition.activeEffectDuration || 4) * 1000;\n            this.createParticles(enemy.position, 12, '#fde047', 0.4);\n          }\n        });\n        this.createParticles(player.position, 50, '#fde047', 0.9);\n        break;\n      \n      case 'swarm_drone':\n        // Deploy mini swarm drones\n        if (!this.gameState.swarmDrones) {\n          this.gameState.swarmDrones = [];\n        }\n        for (let i = 0; i < 20; i++) {\n          const angle = (i / 20) * Math.PI * 2;\n          this.gameState.swarmDrones.push({\n            id: `swarm_${Date.now()}_${i}`,\n            position: { \n              x: player.position.x + Math.cos(angle) * 30,\n              y: player.position.y + Math.sin(angle) * 30\n            },\n            velocity: { x: 0, y: 0 },\n            rotation: angle,\n            lifetime: definition.activeEffectDuration || 6,\n            damage: 2,\n            ownerId: player.id\n          });\n        }\n        this.createParticles(player.position, 40, '#2dd4bf', 0.8);\n        break;\n      \n      case 'assault_drone':\n        drone.burstFireActive = true;\n        drone.burstFireEndTime = Date.now() + (definition.activeEffectDuration || 3) * 1000;\n        this.createParticles(drone.position, 30, '#f87171', 0.7);\n        break;\n      \n      case 'plasma_drone':\n        drone.overchargeActive = true;\n        drone.overchargeEndTime = Date.now() + (definition.activeEffectDuration || 4) * 1000;\n        this.createParticles(drone.position, 30, '#a78bfa', 0.7);\n        break;\n      \n      case 'explosive_drone':\n        drone.carpetBombActive = true;\n        drone.carpetBombEndTime = Date.now() + (definition.activeEffectDuration || 4) * 1000;\n        this.createParticles(drone.position, 30, '#fb923c', 0.7);\n        break;\n      \n      case 'laser_drone':\n        drone.overloadActive = true;\n        drone.overloadEndTime = Date.now() + (definition.activeEffectDuration || 5) * 1000;\n        this.createParticles(drone.position, 30, '#f472b6', 0.7);\n        break;\n      \n      case 'gravity_drone':\n        if (!this.gameState.gravityWells) {\n          this.gameState.gravityWells = [];\n        }\n        this.gameState.gravityWells.push({\n          id: `gravity_${Date.now()}`,\n          position: { ...player.position },\n          radius: 250,\n          pullStrength: 150,\n          lifetime: definition.activeEffectDuration || 4,\n          ownerId: player.id\n        });\n        this.createParticles(player.position, 50, '#818cf8', 1.0);\n        break;\n      \n      case 'tesla_drone':\n        drone.teslaStormActive = true;\n        drone.teslaStormEndTime = Date.now() + (definition.activeEffectDuration || 6) * 1000;\n        this.createParticles(drone.position, 40, '#60a5fa', 0.8);\n        break;\n      \n      case 'void_drone':\n        if (!this.gameState.voidRifts) {\n          this.gameState.voidRifts = [];\n        }\n        this.gameState.voidRifts.push({\n          id: `void_rift_${Date.now()}`,\n          position: { ...player.position },\n          radius: 120,\n          damagePerSecond: 25,\n          lifetime: definition.activeEffectDuration || 5,\n          ownerId: player.id\n        });\n        this.createParticles(player.position, 50, '#a78bfa', 1.0);\n        break;\n      \n      case 'scout_drone':\n        player.pulseScanActive = true;\n        player.pulseScanEndTime = Date.now() + (definition.activeEffectDuration || 8) * 1000;\n        this.createParticles(player.position, 60, '#fbbf24', 0.9);\n        break;\n    }\n    \n    this.createParticles(drone.position, 20, definition.color, 0.6);\n  }\n\n  private applyDronePassiveEffects(dt: number): void {\n    const player = this.gameState.player;\n    const drones = this.gameState.drones;\n\n    (player as any).shieldDamageReduction = 0;\n    (player as any).damageBoost = 1.0;\n    (player as any).critChance = 0;\n    (player as any).detectionRangeBoost = 0;\n    (player as any).gravitySlowAura = 0;\n\n    drones.forEach(drone => {\n      const definition = this.droneSystem.getDroneDefinition(drone.droneType);\n      \n      switch (drone.droneType) {\n        case 'repair_drone':\n        case 'medic_drone':\n          if (player.health < player.maxHealth && definition.passiveEffectValue) {\n            player.health = Math.min(\n              player.maxHealth,\n              player.health + (definition.passiveEffectValue * dt)\n            );\n          }\n          break;\n\n        case 'shield_drone':\n          if (definition.passiveEffectValue) {\n            (player as any).shieldDamageReduction = ((player as any).shieldDamageReduction || 0) + definition.passiveEffectValue;\n          }\n          break;\n\n        case 'assault_drone':\n          if (definition.passiveEffectValue) {\n            (player as any).damageBoost = ((player as any).damageBoost || 1.0) + definition.passiveEffectValue;\n          }\n          break;\n\n        case 'sniper_drone':\n          if (definition.passiveEffectValue) {\n            (player as any).critChance = ((player as any).critChance || 0) + definition.passiveEffectValue;\n          }\n          break;\n\n        case 'scout_drone':\n          if (definition.passiveEffectValue) {\n            (player as any).detectionRangeBoost = ((player as any).detectionRangeBoost || 0) + definition.passiveEffectValue;\n          }\n          break;\n      }\n    });\n  }\n\n  private syncDrones(): void {\n    const player = this.gameState.player;\n    const equippedDroneTypes = this.inventory.getEquippedDrones();\n    player.equippedDrones = equippedDroneTypes;\n    const currentDrones = this.gameState.drones;\n\n    const dronesById = new Map(currentDrones.map(d => [d.droneType, d]));\n\n    const newDrones: Drone[] = [];\n    equippedDroneTypes.forEach((droneType, index) => {\n      const existing = dronesById.get(droneType);\n      if (existing) {\n        newDrones.push(existing);\n        dronesById.delete(droneType);\n      } else {\n        const startAngle = (index / equippedDroneTypes.length) * Math.PI * 2;\n        const newDrone = this.droneSystem.createDrone(droneType, player.id, player.position, startAngle);\n        newDrones.push(newDrone);\n      }\n    });\n\n    this.gameState.drones = newDrones;\n  }\n\n  togglePause(): void {\n    this.gameState.isPaused = !this.gameState.isPaused;\n  }\n\n  togglePvP(): void {\n    this.gameState.pvpEnabled = !this.gameState.pvpEnabled;\n  }\n\n  setPvP(enabled: boolean): void {\n    this.gameState.pvpEnabled = enabled;\n  }\n\n  isPvPEnabled(): boolean {\n    return this.gameState.pvpEnabled;\n  }\n\n\n\n  reset(): void {\n    this.worldGenerator.reset();\n    this.camera = new Camera(CANVAS_WIDTH, CANVAS_HEIGHT, 0.1);\n    this.inventory = new PlayerInventory();\n    this.biomeManager = new BiomeManager();\n    this.featureInteraction = new BiomeFeatureInteraction();\n    this.tradingPostSystem.reset();\n    this.modifierSystem.reset();\n    this.gameState = this.createInitialState();\n    this.biomeManager.setWorldGenerator(this.worldGenerator);\n\n    INITIAL_WEAPONS.forEach(weapon => {\n      const weaponWithPerks = { ...weapon, perks: [] };\n      this.inventory.addWeapon(weaponWithPerks);\n      this.inventory.equipWeapon(weaponWithPerks.id);\n    });\n\n    this.syncEquippedWeapons();\n    this.loadChunksAroundPlayer();\n  }\n\n  respawnPlayer(spawnPosition?: { x: number; y: number }): void {\n    this.gameState.player.health = this.gameState.player.maxHealth;\n    this.gameState.player.isDashing = false;\n    this.gameState.player.velocity = createVector();\n    this.gameState.isGameOver = false;\n    \n    if (spawnPosition) {\n      const offsetX = (Math.random() - 0.5) * 100;\n      const offsetY = (Math.random() - 0.5) * 100;\n      this.gameState.player.position = {\n        x: spawnPosition.x + offsetX,\n        y: spawnPosition.y + offsetY,\n      };\n    } else {\n      this.gameState.player.position = createVector(CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n    }\n  }\n\n  private checkPlayerDeath(): void {\n    if (this.gameState.player.health <= 0 && !this.gameState.isGameOver) {\n      this.gameState.isGameOver = true;\n      this.createParticles(this.gameState.player.position, 20, '#ff0000', 1.0);\n    }\n  }\n\n  spawnAdminEnemy(type: 'grunt' | 'tank' | 'speedy'): void {\n    const player = this.gameState.player;\n    const spawnDistance = 200;\n    const angle = Math.random() * Math.PI * 2;\n    const spawnPos = {\n      x: player.position.x + Math.cos(angle) * spawnDistance,\n      y: player.position.y + Math.sin(angle) * spawnDistance,\n    };\n\n    {\n      const configs = {\n        grunt: { health: 50, damage: 10, speed: 1.5, size: 20, color: '#ff4444' },\n        tank: { health: 150, damage: 20, speed: 1.0, size: 30, color: '#4444ff' },\n        speedy: { health: 30, damage: 8, speed: 3.0, size: 16, color: '#44ff44' },\n      };\n      const config = configs[type];\n\n      const enemy: Enemy = {\n        id: generateId(),\n        position: spawnPos,\n        velocity: createVector(),\n        rotation: 0,\n        health: config.health,\n        maxHealth: config.health,\n        damage: config.damage,\n        size: config.size,\n        speed: config.speed,\n        color: config.color,\n        type,\n        attackCooldown: 0,\n        currencyDrop: 10,\n      };\n\n      this.gameState.enemies.push(enemy);\n      this.createParticles(spawnPos, 20, config.color, 0.5);\n    }\n  }\n\n  spawnAdminWeapon(): void {\n    const player = this.gameState.player;\n    const spawnDistance = 150;\n    const angle = Math.random() * Math.PI * 2;\n    const spawnPos = {\n      x: player.position.x + Math.cos(angle) * spawnDistance,\n      y: player.position.y + Math.sin(angle) * spawnDistance,\n    };\n\n    const weaponCrate = this.crateSystem.generateWeaponCrate();\n    this.spawnWeaponDrop(spawnPos, weaponCrate.weapon, weaponCrate.perks);\n    this.createParticles(spawnPos, 40, '#fbbf24', 0.8);\n  }\n\n  spawnAdminDrone(droneType: import('../types/game').DroneType): void {\n    this.inventory.addDrone(droneType);\n    this.createParticles(this.gameState.player.position, 30, '#4ade80', 0.6);\n  }\n\n  addAdminResources(amount: number = 100): void {\n    this.gameState.player.resources.energy += amount;\n    this.gameState.player.resources.coreDust += amount;\n    this.gameState.player.resources.flux += amount;\n    this.gameState.player.resources.geoShards += amount;\n    this.gameState.player.resources.alloyFragments += amount;\n    this.createParticles(this.gameState.player.position, 50, '#fbbf24', 0.8);\n  }\n\n  addAdminCurrency(amount: number = 500): void {\n    this.gameState.player.currency += amount;\n    this.createParticles(this.gameState.player.position, 40, '#10b981', 0.7);\n  }\n\n  getMultiplayerState(hostPeerId: string): Partial<GameState> {\n    const allPlayers: import('../types/game').RemotePlayer[] = [\n      {\n        id: 'host',\n        peerId: hostPeerId,\n        player: this.gameState.player,\n        lastUpdate: Date.now(),\n      },\n      ...this.gameState.remotePlayers,\n    ];\n\n    return {\n      remotePlayers: allPlayers,\n      enemies: this.gameState.enemies,\n      projectiles: this.gameState.projectiles,\n      particles: this.gameState.particles,\n      currencyDrops: this.gameState.currencyDrops,\n      resourceDrops: this.gameState.resourceDrops,\n      chests: this.chests,\n      weaponDrops: this.gameState.weaponDrops,\n      score: this.gameState.score,\n      // Do NOT sync isPaused - each client manages their own pause state\n      isGameOver: this.gameState.isGameOver,\n      resourcesCollected: this.gameState.resourcesCollected,\n      damageNumbers: this.gameState.damageNumbers,\n      currentBiomeName: this.gameState.currentBiomeName,\n    };\n  }\n\n  applyMultiplayerState(state: Partial<GameState>, localPeerId: string): void {\n    if (state.remotePlayers) {\n      const newPlayers = state.remotePlayers.filter(rp => rp.peerId !== localPeerId);\n      \n      newPlayers.forEach(newPlayer => {\n        const existing = this.gameState.remotePlayers.find(rp => rp.peerId === newPlayer.peerId);\n        if (existing) {\n          existing.serverPosition = { ...newPlayer.player.position };\n          existing.serverVelocity = { ...newPlayer.player.velocity };\n          existing.interpolationAlpha = 0;\n          existing.player.rotation = newPlayer.player.rotation;\n          existing.player.health = newPlayer.player.health;\n          existing.player.maxHealth = newPlayer.player.maxHealth;\n          existing.player.equippedWeapons = newPlayer.player.equippedWeapons;\n          existing.player.activeWeaponIndex = newPlayer.player.activeWeaponIndex;\n          existing.player.isDashing = newPlayer.player.isDashing;\n          existing.player.isGrappling = newPlayer.player.isGrappling;\n          existing.player.isGliding = newPlayer.player.isGliding;\n          existing.lastUpdate = Date.now();\n          if (newPlayer.username) existing.username = newPlayer.username;\n        } else {\n          const newRemote = { \n            ...newPlayer, \n            serverPosition: { ...newPlayer.player.position },\n            serverVelocity: { ...newPlayer.player.velocity },\n            interpolationAlpha: 1,\n            lastUpdate: Date.now()\n          };\n          this.gameState.remotePlayers.push(newRemote);\n        }\n      });\n      \n      this.gameState.remotePlayers = this.gameState.remotePlayers.filter(\n        rp => newPlayers.some(np => np.peerId === rp.peerId)\n      );\n    }\n    \n    if (state.enemies) this.gameState.enemies = state.enemies;\n    if (state.projectiles) this.gameState.projectiles = state.projectiles;\n    if (state.particles) this.gameState.particles = state.particles;\n    if (state.currencyDrops) this.gameState.currencyDrops = state.currencyDrops;\n    if (state.resourceDrops) this.gameState.resourceDrops = state.resourceDrops;\n    if (state.chests) this.chests = state.chests;\n    if (state.weaponDrops) this.gameState.weaponDrops = state.weaponDrops;\n    if (state.damageNumbers) this.gameState.damageNumbers = state.damageNumbers;\n    \n    if (state.score !== undefined) this.gameState.score = state.score;\n    if (state.isPaused !== undefined) this.gameState.isPaused = state.isPaused;\n    if (state.resourcesCollected !== undefined) this.gameState.resourcesCollected = state.resourcesCollected;\n  }\n\n  updateRemotePlayers(remotePlayers: import('../types/game').RemotePlayer[]): void {\n    this.gameState.remotePlayers = remotePlayers;\n  }\n\n  updateRemotePlayerFromInput(playerId: string, input: import('./MultiplayerManager').PlayerInput): void {\n    let remotePlayer = this.gameState.remotePlayers.find(rp => rp.peerId === playerId);\n\n    if (!remotePlayer) {\n      remotePlayer = {\n        id: `remote_${playerId}`,\n        peerId: playerId,\n        player: this.createRemotePlayer(playerId),\n        lastUpdate: Date.now(),\n        username: input.username || 'Player',\n      };\n      this.gameState.remotePlayers.push(remotePlayer);\n    }\n\n    if (input.username && remotePlayer.username !== input.username) {\n      remotePlayer.username = input.username;\n    }\n\n    const player = remotePlayer.player;\n\n    if (input.activeWeaponIndex !== undefined && input.activeWeaponIndex !== player.activeWeaponIndex) {\n      player.activeWeaponIndex = Math.min(input.activeWeaponIndex, player.equippedWeapons.length - 1);\n    }\n\n    if (input.mousePos) {\n      const dx = input.mousePos.x - player.position.x;\n      const dy = input.mousePos.y - player.position.y;\n      player.rotation = Math.atan2(dy, dx);\n    }\n\n    if (input.mouseDown && player.equippedWeapons.length > 0) {\n      const weapon = player.equippedWeapons[player.activeWeaponIndex];\n      if (weapon && weapon.cooldown <= 0) {\n        this.fireWeaponForRemotePlayer(player, weapon);\n      }\n    }\n\n    remotePlayer.lastUpdate = Date.now();\n  }\n\n  private createRemotePlayer(playerId: string): import('../types/game').Player {\n    const equippedWeapons = INITIAL_WEAPONS.map(weapon => ({ ...weapon, perks: [] }));\n    \n    return {\n      id: `remote_${playerId}`,\n      position: createVector(CANVAS_WIDTH / 2 + Math.random() * 200 - 100, CANVAS_HEIGHT / 2 + Math.random() * 200 - 100),\n      velocity: createVector(),\n      size: PLAYER_SIZE,\n      health: PLAYER_MAX_HEALTH,\n      maxHealth: PLAYER_MAX_HEALTH,\n      rotation: 0,\n      speed: PLAYER_BASE_SPEED,\n      dashCooldown: PLAYER_DASH_COOLDOWN,\n      dashDuration: PLAYER_DASH_DURATION,\n      isDashing: false,\n      currency: 0,\n      equippedWeapons,\n      equippedDrones: [],\n      activeWeaponIndex: 0,\n      portalCooldown: 0,\n      isGrappling: false,\n      grappleProgress: 0,\n      isGliding: false,\n      resources: {\n        energy: 0,\n        coreDust: 0,\n        flux: 0,\n        geoShards: 0,\n        alloyFragments: 0,\n        singularityCore: 0,\n        cryoKelp: 0,\n        obsidianHeart: 0,\n        gloomRoot: 0,\n        resonantCrystal: 0,\n        voidEssence: 0,\n        bioluminescentPearl: 0,\n        sunpetalBloom: 0,\n        aetheriumShard: 0,\n        gravitonEssence: 0,\n        voidCore: 0,\n        crateKey: 0,\n      },\n      consumables: [],\n    };\n  }\n\n  private fireWeaponForRemotePlayer(player: Player, weapon: Weapon): void {\n    const angle = player.rotation;\n\n    const MAX_PROJECTILES = 300;\n    if (this.gameState.projectiles.length >= MAX_PROJECTILES) {\n      return;\n    }\n\n    for (let i = 0; i < weapon.projectileCount; i++) {\n      const spreadOffset =\n        (i - (weapon.projectileCount - 1) / 2) * weapon.spread;\n      const projectileAngle = angle + spreadOffset;\n\n      const velocity = vectorFromAngle(projectileAngle, weapon.projectileSpeed);\n\n      const projectile: Projectile = {\n        id: generateId(),\n        position: { ...player.position },\n        velocity,\n        damage: weapon.damage,\n        size: weapon.projectileSize,\n        color: weapon.color,\n        owner: 'player',\n        playerId: player.id,\n        piercing: weapon.piercing || false,\n        piercingCount: weapon.piercing ? 3 : 0,\n        lifetime: 3,\n        homing: weapon.homing,\n        homingStrength: weapon.homingStrength,\n        explosive: weapon.explosive,\n        explosionRadius: weapon.explosionRadius,\n        ricochet: weapon.ricochet,\n        ricochetCount: weapon.ricochet ? 2 : 0,\n        maxRange: weapon.maxRange || MAX_VISIBLE_RANGE,\n        travelDistance: 0,\n        weaponType: weapon.type,\n        rotation: 0,\n        wallPierce: weapon.wallPierce || false,\n      };\n\n      this.gameState.projectiles.push(projectile);\n    }\n\n    weapon.cooldown = weapon.fireRate;\n  }\n\n  updateRemotePlayerPositions(deltaTime: number): void {\n    this.gameState.remotePlayers.forEach(remotePlayer => {\n      const player = remotePlayer.player;\n      \n      if (remotePlayer.serverPosition && remotePlayer.interpolationAlpha !== undefined) {\n        const INTERPOLATION_SPEED = 8;\n        remotePlayer.interpolationAlpha = Math.min(1, remotePlayer.interpolationAlpha + deltaTime * INTERPOLATION_SPEED);\n        \n        const startPos = player.position;\n        const targetPos = remotePlayer.serverPosition;\n        const alpha = this.smoothStep(remotePlayer.interpolationAlpha);\n        \n        player.position = {\n          x: startPos.x + (targetPos.x - startPos.x) * alpha,\n          y: startPos.y + (targetPos.y - startPos.y) * alpha\n        };\n        \n        if (remotePlayer.serverVelocity) {\n          player.velocity = remotePlayer.serverVelocity;\n        }\n        \n        if (remotePlayer.interpolationAlpha >= 1 && remotePlayer.serverVelocity) {\n          const extrapolation = vectorScale(remotePlayer.serverVelocity, deltaTime * 60);\n          player.position = vectorAdd(player.position, extrapolation);\n          remotePlayer.serverPosition = player.position;\n        }\n      } else {\n        player.position = vectorAdd(player.position, vectorScale(player.velocity, deltaTime * 60));\n      }\n      \n      const obstacles = this.getObstacles();\n      obstacles.forEach(obstacle => {\n        if (checkEntityObstacleCollision(player, obstacle)) {\n          resolveEntityObstacleCollision(player, obstacle);\n        }\n      });\n\n      player.equippedWeapons.forEach(weapon => {\n        if (weapon.cooldown > 0) {\n          weapon.cooldown -= deltaTime;\n        }\n      });\n    });\n  }\n\n  private smoothStep(t: number): number {\n    return t * t * (3 - 2 * t);\n  }\n\n  removeRemotePlayer(playerId: string): void {\n    this.gameState.remotePlayers = this.gameState.remotePlayers.filter(rp => rp.peerId !== playerId);\n  }\n\n  teleportToPlayer(targetPeerId: string): void {\n    const targetPlayer = this.gameState.remotePlayers.find(rp => rp.peerId === targetPeerId);\n    if (targetPlayer) {\n      this.gameState.player.position = { ...targetPlayer.player.position };\n      this.loadChunksAroundPlayer();\n    }\n  }\n\n  teleportRemotePlayerToMe(remotePeerId: string): void {\n    const remotePlayer = this.gameState.remotePlayers.find(rp => rp.peerId === remotePeerId);\n    if (remotePlayer) {\n      remotePlayer.player.position = { ...this.gameState.player.position };\n    }\n  }\n\n  getKeys(): Set<string> {\n    return this.keys;\n  }\n\n  getMousePos(): import('../types/game').Vector2 {\n    return this.mousePos;\n  }\n\n  getMouseDown(): boolean {\n    return this.mouseDown;\n  }\n\n  getWorldState(): any {\n    const worldGeneratorData = this.worldGenerator.serializeWorldData();\n    \n    return {\n      worldGenerator: worldGeneratorData,\n      chests: this.chests,\n    };\n  }\n\n  applyWorldState(worldState: any): void {\n    if (worldState.worldGenerator) {\n      this.worldGenerator.hydrateWorldData(worldState.worldGenerator);\n      this.biomeManager.setWorldGenerator(this.worldGenerator);\n      this.featureInteraction = new BiomeFeatureInteraction();\n    }\n\n    if (worldState.chests) {\n      this.chests = worldState.chests;\n    }\n\n    this.loadChunksAroundPlayer();\n  }\n\n  syncRemotePlayerPosition(playerId: string, position: Vector2, velocity: Vector2): void {\n    const remotePlayer = this.gameState.remotePlayers.find(rp => rp.peerId === playerId);\n    if (remotePlayer) {\n      remotePlayer.player.position = { ...position };\n      remotePlayer.player.velocity = { ...velocity };\n      remotePlayer.serverPosition = { ...position };\n      remotePlayer.serverVelocity = { ...velocity };\n      remotePlayer.interpolationAlpha = 1;\n      console.log('Synced remote player position:', playerId, position);\n    }\n  }\n}\n","size_bytes":149566},"src/game/WeaponDefinitions.ts":{"content":"import { Weapon, WeaponType } from '../types/game';\n\nexport const WEAPON_DEFINITIONS: Record<\n  WeaponType,\n  Omit<Weapon, 'id' | 'perks'>\n> = {\n  blaster: {\n    name: 'Blaster',\n    type: 'blaster',\n    damage: 10,\n    fireRate: 0.2,\n    projectileSpeed: 12,\n    projectileSize: 6,\n    spread: 0.05,\n    projectileCount: 1,\n    piercing: false,\n    color: '#00ffff',\n    firingMode: 'auto',\n    cooldown: 0,\n    description: 'Rapid-fire energy weapon',\n    maxRange: 480,\n  },\n  shotgun: {\n    name: 'Shotgun',\n    type: 'shotgun',\n    damage: 5,\n    fireRate: 0.6,\n    projectileSpeed: 10,\n    projectileSize: 5,\n    spread: 0.2,\n    projectileCount: 5,\n    piercing: false,\n    color: '#ff6600',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Close-range spread weapon',\n    maxRange: 160,\n  },\n  laser: {\n    name: 'Laser',\n    type: 'laser',\n    damage: 16,\n    fireRate: 0.15,\n    projectileSpeed: 18,\n    projectileSize: 4,\n    spread: 0,\n    projectileCount: 1,\n    piercing: true,\n    color: '#ff00ff',\n    firingMode: 'auto',\n    cooldown: 0,\n    description: 'High-speed piercing laser',\n    maxRange: 520,\n  },\n  missile: {\n    name: 'Missile',\n    type: 'missile',\n    damage: 25,\n    fireRate: 0.8,\n    projectileSpeed: 8,\n    projectileSize: 10,\n    spread: 0.1,\n    projectileCount: 1,\n    piercing: false,\n    color: '#ff0000',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Heavy explosive projectile',\n    explosive: true,\n    explosionRadius: 50,\n    maxRange: 480,\n  },\n  railgun: {\n    name: 'Railgun',\n    type: 'railgun',\n    damage: 100,\n    fireRate: 1.2,\n    projectileSpeed: 25,\n    projectileSize: 8,\n    spread: 0,\n    projectileCount: 1,\n    piercing: true,\n    color: '#00ff00',\n    firingMode: 'charge',\n    cooldown: 0,\n    description: 'Charge to fire devastating beam',\n    chargeTime: 1.5,\n    currentCharge: 0,\n    isCharging: false,\n    maxRange: 700,\n  },\n  flamethrower: {\n    name: 'Flamethrower',\n    type: 'flamethrower',\n    damage: 4,\n    fireRate: 0.08,\n    projectileSpeed: 8,\n    projectileSize: 7,\n    spread: 0.15,\n    projectileCount: 3,\n    piercing: false,\n    color: '#ff6600',\n    firingMode: 'auto',\n    cooldown: 0,\n    description: 'Short-range continuous fire',\n    maxRange: 120,\n  },\n  arc_cannon: {\n    name: 'Arc Cannon',\n    type: 'arc_cannon',\n    damage: 14,\n    fireRate: 0.4,\n    projectileSpeed: 14,\n    projectileSize: 6,\n    spread: 0.1,\n    projectileCount: 1,\n    piercing: false,\n    color: '#00ccff',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Electric discharge weapon',\n    homing: true,\n    homingStrength: 0.05,\n    maxRange: 480,\n  },\n  gravity_well: {\n    name: 'Gravity Well',\n    type: 'gravity_well',\n    damage: 22,\n    fireRate: 1.0,\n    projectileSpeed: 6,\n    projectileSize: 15,\n    spread: 0,\n    projectileCount: 1,\n    piercing: false,\n    color: '#9933ff',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Slow-moving gravitational bomb',\n    explosive: true,\n    explosionRadius: 80,\n    maxRange: 400,\n  },\n  shuriken_launcher: {\n    name: 'Shuriken Launcher',\n    type: 'shuriken_launcher',\n    damage: 12,\n    fireRate: 0.3,\n    projectileSpeed: 16,\n    projectileSize: 5,\n    spread: 0.08,\n    projectileCount: 3,\n    piercing: false,\n    color: '#cccccc',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Multi-projectile throwing weapon',\n    ricochet: true,\n    maxRange: 440,\n  },\n  beam_laser: {\n    name: 'Beam Laser',\n    type: 'beam_laser',\n    damage: 10,\n    fireRate: 0.05,\n    projectileSpeed: 30,\n    projectileSize: 3,\n    spread: 0,\n    projectileCount: 1,\n    piercing: true,\n    color: '#ff33cc',\n    firingMode: 'beam',\n    cooldown: 0,\n    description: 'Continuous beam that overheats',\n    beamDuration: 3.0,\n    beamCooldown: 2.0,\n    isBeaming: false,\n    beamTimer: 0,\n    maxRange: 480,\n    beamHeat: 0,\n    beamMaxHeat: 100,\n    beamOverheated: false,\n  },\n  charge_cannon: {\n    name: 'Charge Cannon',\n    type: 'charge_cannon',\n    damage: 55,\n    fireRate: 0.5,\n    projectileSpeed: 15,\n    projectileSize: 12,\n    spread: 0,\n    projectileCount: 1,\n    piercing: false,\n    color: '#ffff00',\n    firingMode: 'charge',\n    cooldown: 0,\n    description: 'Charge for massive damage',\n    chargeTime: 2.0,\n    currentCharge: 0,\n    isCharging: false,\n    maxRange: 520,\n  },\n  grappling_hook: {\n    name: 'Grappling Hook',\n    type: 'grappling_hook',\n    damage: 0,\n    fireRate: 1.2,\n    projectileSpeed: 20,\n    projectileSize: 8,\n    spread: 0,\n    projectileCount: 1,\n    piercing: false,\n    color: '#888888',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Hook onto enemies or obstacles to pull yourself',\n    maxRange: 400,\n    grapplingStats: {\n      maxRange: 400,\n      cooldown: 1.2,\n      pullSpeed: 10,\n      slamDamage: 0,\n      slamRadius: 0,\n      attachBonus: 0,\n    },\n  },\n  void_blade: {\n    name: 'Void Blade',\n    type: 'void_blade',\n    damage: 35,\n    fireRate: 0.4,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#9333ea',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Devastating melee strikes with combo potential',\n    maxRange: 80,\n    meleeStats: {\n      range: 80,\n      swingDuration: 0.5,\n      swingAngle: 90,\n      comboCount: 3,\n      comboDamageMultiplier: 1.5,\n      dashSlashBonus: 2.0,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'void_form',\n  },\n  crimson_scythe: {\n    name: 'Crimson Scythe',\n    type: 'crimson_scythe',\n    damage: 28,\n    fireRate: 0.25,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#dc2626',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Rapid slashing strikes that steal life',\n    maxRange: 85,\n    meleeStats: {\n      range: 85,\n      swingDuration: 0.375,\n      swingAngle: 100,\n      comboCount: 3,\n      comboDamageMultiplier: 1.4,\n      dashSlashBonus: 1.8,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'rapid_form',\n  },\n  titan_hammer: {\n    name: 'Titan Hammer',\n    type: 'titan_hammer',\n    damage: 55,\n    fireRate: 0.8,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#78716c',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Crushing blows that shatter enemies',\n    maxRange: 70,\n    meleeStats: {\n      range: 70,\n      swingDuration: 0.75,\n      swingAngle: 80,\n      comboCount: 3,\n      comboDamageMultiplier: 2.0,\n      dashSlashBonus: 2.5,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'heavy_form',\n  },\n  flowing_glaive: {\n    name: 'Flowing Glaive',\n    type: 'flowing_glaive',\n    damage: 32,\n    fireRate: 0.45,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#06b6d4',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Wide sweeping attacks with extended reach',\n    maxRange: 95,\n    meleeStats: {\n      range: 95,\n      swingDuration: 0.55,\n      swingAngle: 120,\n      comboCount: 3,\n      comboDamageMultiplier: 1.6,\n      dashSlashBonus: 2.2,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'flowing_form',\n  },\n  shadow_daggers: {\n    name: 'Shadow Daggers',\n    type: 'shadow_daggers',\n    damage: 22,\n    fireRate: 0.2,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#6366f1',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Precise strikes from the shadows',\n    maxRange: 60,\n    meleeStats: {\n      range: 60,\n      swingDuration: 0.375,\n      swingAngle: 60,\n      comboCount: 3,\n      comboDamageMultiplier: 2.0,\n      dashSlashBonus: 3.0,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'assassin_form',\n  },\n  berserker_axe: {\n    name: 'Berserker Axe',\n    type: 'berserker_axe',\n    damage: 45,\n    fireRate: 0.5,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#ef4444',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Wild, devastating swings fueled by rage',\n    maxRange: 75,\n    meleeStats: {\n      range: 75,\n      swingDuration: 0.625,\n      swingAngle: 110,\n      comboCount: 4,\n      comboDamageMultiplier: 1.8,\n      dashSlashBonus: 2.3,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'berserker_form',\n  },\n  guardian_blade: {\n    name: 'Guardian Blade',\n    type: 'guardian_blade',\n    damage: 30,\n    fireRate: 0.5,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    spread: 0,\n    projectileCount: 0,\n    piercing: false,\n    color: '#fbbf24',\n    firingMode: 'manual',\n    cooldown: 0,\n    description: 'Defensive strikes that protect and counter',\n    maxRange: 72,\n    meleeStats: {\n      range: 72,\n      swingDuration: 0.5,\n      swingAngle: 100,\n      comboCount: 3,\n      comboDamageMultiplier: 1.5,\n      dashSlashBonus: 2.0,\n    },\n    isSwinging: false,\n    swingTimer: 0,\n    comboCounter: 0,\n    comboResetTimer: 0,\n    meleeFormId: 'guardian_form',\n  },\n};\n","size_bytes":9499},"src/game/utils.ts":{"content":"import { Vector2, Entity } from '../types/game';\n\nexport function createVector(x: number = 0, y: number = 0): Vector2 {\n  return { x, y };\n}\n\nexport function vectorAdd(a: Vector2, b: Vector2): Vector2 {\n  return { x: a.x + b.x, y: a.y + b.y };\n}\n\nexport function vectorSubtract(a: Vector2, b: Vector2): Vector2 {\n  return { x: a.x - b.x, y: a.y - b.y };\n}\n\nexport function vectorScale(v: Vector2, scale: number): Vector2 {\n  return { x: v.x * scale, y: v.y * scale };\n}\n\nexport function vectorLength(v: Vector2): number {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\nexport function vectorNormalize(v: Vector2): Vector2 {\n  const len = vectorLength(v);\n  if (len === 0) return { x: 0, y: 0 };\n  return { x: v.x / len, y: v.y / len };\n}\n\nexport function vectorDistance(a: Vector2, b: Vector2): number {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport function vectorAngle(v: Vector2): number {\n  return Math.atan2(v.y, v.x);\n}\n\nexport function vectorFromAngle(angle: number, length: number = 1): Vector2 {\n  return {\n    x: Math.cos(angle) * length,\n    y: Math.sin(angle) * length,\n  };\n}\n\nexport function checkCollision(\n  a: Entity | { position: Vector2; size: number },\n  b: Entity | { position: Vector2; size: number }\n): boolean {\n  const distance = vectorDistance(a.position, b.position);\n  return distance < (a.size + b.size) / 2;\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function lerp(start: number, end: number, t: number): number {\n  return start + (end - start) * t;\n}\n\nexport function randomRange(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n\nexport function randomInt(min: number, max: number): number {\n  return Math.floor(randomRange(min, max + 1));\n}\n\nexport function generateId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport function formatResourceName(name: string): string {\n  if (!name) return '';\n  const result = name.replace(/([A-Z])/g, ' $1');\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport function getRandomAdjective() {\n  // 1. Define a list of adjectives\n  const adjectives = [\n    'Crimson',\n    'Arcane',\n    'Luminous',\n    'Silent',\n    'Shattered',\n    'Vicious',\n    'Fierce',\n    'Brilliant',\n    'Cursed',\n    'Warped',\n    'Ancient',\n    'Gilded',\n    'Obsidian',\n    'Mythic',\n    'Hallowed',\n    'Wobbly',\n    'Squishy',\n    'Electric',\n    'Fluffy',\n    'Invisible',\n    'Suspicious',\n    'Sparkly',\n    'Gooey',\n    'Clumsy',\n    'Zany',\n    'Tinkling',\n    'Purple',\n    'Unseen',\n    'Sassy',\n    'Glittering',\n    'Fermented',\n    'Chunky',\n    'Gigantic',\n    'Microscopic',\n    'Existential',\n    'Noodly',\n    'Verbose',\n    'Gaseous',\n    'Slippery',\n    'Bumbling',\n    'Cosmic',\n    'Timid',\n    'Jolly',\n    'Mysterious',\n    'Velvety',\n    'Obtuse',\n    'Rambunctious',\n    'Dapper',\n    'Fibrous',\n    'Quizzical',\n    'Melancholy',\n    'Kaleidoscopic',\n    'Uncouth',\n    'Wistful',\n    'Perplexed',\n    'Discombobulated',\n    'Ephemeral',\n    'Cantankerous',\n    'Pneumatic',\n    'Lethargic',\n  ];\n\n  // 2. Select a random index\n  const randomIndex = Math.floor(Math.random() * adjectives.length);\n\n  // 3. Return the word\n  return adjectives[randomIndex];\n}\n","size_bytes":3358},"src/components/Leaderboard.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Trophy, X, Award } from 'lucide-react';\n\ninterface LeaderboardEntry {\n  id: string;\n  player_name: string;\n  score: number;\n  wave: number;\n  created_at?: string;\n}\n\ninterface LeaderboardProps {\n  onClose: () => void;\n}\n\nconst getLeaderboard = async (_limit: number): Promise<LeaderboardEntry[]> => {\n  return [];\n};\n\nexport default function Leaderboard({ onClose }: LeaderboardProps) {\n  const [entries, setEntries] = useState<LeaderboardEntry[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadLeaderboard();\n  }, []);\n\n  const loadLeaderboard = async () => {\n    setLoading(true);\n    const data = await getLeaderboard(10);\n    setEntries(data);\n    setLoading(false);\n  };\n\n  const getMedalColor = (index: number) => {\n    if (index === 0) return 'text-yellow-400';\n    if (index === 1) return 'text-slate-300';\n    if (index === 2) return 'text-orange-400';\n    return 'text-slate-500';\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 animate-in fade-in duration-200\">\n      <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 border-2 border-yellow-500/30 rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n        <div className=\"bg-gradient-to-r from-yellow-900/50 to-orange-900/50 p-4 flex items-center justify-between border-b border-yellow-500/30\">\n          <div className=\"flex items-center gap-3\">\n            <Trophy className=\"w-6 h-6 text-yellow-400\" />\n            <h2 className=\"text-2xl font-bold text-yellow-300\">\n              GLOBAL LEADERBOARD\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"hover:bg-red-500/20 p-2 rounded-lg transition-colors border border-transparent hover:border-red-500/30\"\n          >\n            <X className=\"w-6 h-6 text-red-400\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-80px)]\">\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-12 h-12 border-4 border-cyan-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-slate-400\">Loading leaderboard...</p>\n            </div>\n          ) : entries.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Award className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">No entries yet. Be the first!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {entries.map((entry, index) => (\n                <div\n                  key={entry.id}\n                  className={`flex items-center gap-4 p-4 rounded-lg border transition-all ${\n                    index < 3\n                      ? 'bg-gradient-to-r from-slate-800 to-slate-700 border-yellow-500/30'\n                      : 'bg-slate-800/50 border-slate-700'\n                  }`}\n                >\n                  <div\n                    className={`text-3xl font-bold w-12 text-center ${getMedalColor(\n                      index\n                    )}`}\n                  >\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-bold text-white text-lg\">\n                      {entry.player_name}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">\n                      Wave {entry.wave}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-cyan-300\">\n                      {entry.score}\n                    </div>\n                    <div className=\"text-xs text-slate-500\">\n                      {new Date(entry.created_at || '').toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4119},"src/components/Minimap.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { GameState, Chest } from '../types/game';\nimport { ExtractionPoint, Portal } from '../game/WorldGeneration';\n\ninterface MinimapProps {\n  gameState: GameState;\n  chests: Chest[];\n  extractionPoints: ExtractionPoint[];\n  portals: Portal[];\n}\n\nconst MINIMAP_SIZE = 200;\nconst MINIMAP_SCALE = 10; // 1 pixel on map = 10 game units\nconst BLIP_SIZE = 3;\n\nexport default function Minimap({ gameState, chests, extractionPoints, portals }: MinimapProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { player, enemies } = gameState;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, MINIMAP_SIZE, MINIMAP_SIZE);\n\n    // Center of the minimap\n    const mapCenterX = MINIMAP_SIZE / 2;\n    const mapCenterY = MINIMAP_SIZE / 2;\n\n    // Translate context to center on player\n    ctx.save();\n    ctx.translate(mapCenterX, mapCenterY);\n\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    const gridSize = 500 / MINIMAP_SCALE; // Every 500 game units\n    for (let i = -5; i <= 5; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * gridSize, -mapCenterY);\n      ctx.lineTo(i * gridSize, mapCenterY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(-mapCenterX, i * gridSize);\n      ctx.lineTo(mapCenterX, i * gridSize);\n      ctx.stroke();\n    }\n\n    // Draw entities\n    const drawBlip = (entityPos: { x: number; y: number }, color: string, size: number = BLIP_SIZE, shape: 'circle' | 'square' = 'circle') => {\n      const mapX = (entityPos.x - player.position.x) / MINIMAP_SCALE;\n      const mapY = (entityPos.y - player.position.y) / MINIMAP_SCALE;\n\n      // Cull blips outside the minimap radius\n      if (Math.sqrt(mapX * mapX + mapY * mapY) > mapCenterX - size) {\n        return;\n      }\n\n      ctx.fillStyle = color;\n      if (shape === 'circle') {\n        ctx.beginPath();\n        ctx.arc(mapX, mapY, size, 0, Math.PI * 2);\n        ctx.fill();\n      } else {\n        ctx.fillRect(mapX - size / 2, mapY - size / 2, size, size);\n      }\n    };\n\n    // Draw enemies\n    enemies.forEach(enemy => drawBlip(enemy.position, '#ef4444'));\n\n    // Draw chests\n    chests.forEach(chest => drawBlip(chest.position, '#f59e0b', BLIP_SIZE + 1, 'square'));\n\n    // Draw extraction points\n    extractionPoints.forEach(point => drawBlip(point.position, '#10b981', BLIP_SIZE + 2, 'square'));\n\n    // Draw portals\n    portals.forEach(portal => drawBlip(portal.position, '#a855f7', BLIP_SIZE + 2));\n\n    ctx.restore();\n\n    // Draw player in the center\n    ctx.fillStyle = '#00ffff';\n    ctx.beginPath();\n    ctx.moveTo(mapCenterX, mapCenterY - 5);\n    ctx.lineTo(mapCenterX - 4, mapCenterY + 4);\n    ctx.lineTo(mapCenterX + 4, mapCenterY + 4);\n    ctx.closePath();\n    ctx.fill();\n\n  }, [gameState, chests, extractionPoints, portals, player.position]);\n\n  return (\n    <div className=\"bg-slate-900/80 backdrop-blur-sm border-2 border-cyan-500/30 rounded-full shadow-lg w-[200px] h-[200px] overflow-hidden relative\">\n      <canvas ref={canvasRef} width={MINIMAP_SIZE} height={MINIMAP_SIZE} />\n      <div className=\"absolute inset-0 rounded-full border-2 border-slate-800 pointer-events-none\" />\n      <div className=\"absolute top-2 left-1/2 -translate-x-1/2 text-xs font-bold text-cyan-300 tracking-widest\">N</div>\n    </div>\n  );\n}\n","size_bytes":3451},"src/components/UpgradeShop.tsx":{"content":"import { X, ShoppingCart, Package, Trash2, Cpu } from 'lucide-react';\nimport * as LucideIcons from 'lucide-react';\nimport { GameState, DroneType } from '../types/game';\nimport { useState } from 'react';\nimport { WeaponCrate, WeaponCrateSystem } from '../game/WeaponCrateSystem';\nimport { getRarityColor } from '../game/WeaponPerks';\nimport { PlayerInventory } from '../game/PlayerInventory';\nimport { MELEE_FORMS } from '../game/MeleeWeaponForms';\nimport { DRONE_DEFINITIONS } from '../game/DroneSystem';\n\ninterface UpgradeShopProps {\n  gameState: GameState;\n  inventory: PlayerInventory;\n  onPurchaseCrate: () => void;\n  onEquipWeapon: (weaponId: string) => void;\n  onUnequipWeapon: (weaponId: string) => void;\n  onDeleteWeapon: (weaponId: string) => void;\n  onEquipDrone: (droneType: DroneType) => void;\n  onUnequipDrone: (droneType: DroneType) => void;\n  onDeleteDrone: (droneType: DroneType) => void;\n  onClose: () => void;\n}\n\nexport default function UpgradeShop({\n  gameState,\n  inventory,\n  onPurchaseCrate,\n  onEquipWeapon,\n  onUnequipWeapon,\n  onDeleteWeapon,\n  onEquipDrone,\n  onUnequipDrone,\n  onDeleteDrone,\n  onClose\n}: UpgradeShopProps) {\n  const { player } = gameState;\n  const [previewCrate, setPreviewCrate] = useState<WeaponCrate | null>(null);\n  const [hoveredSlot, setHoveredSlot] = useState<number | null>(null);\n  const crateSystem = new WeaponCrateSystem();\n  const crateCost = crateSystem.getCrateCost();\n\n  const handleGeneratePreview = () => {\n    const crate = crateSystem.generateWeaponCrate();\n    setPreviewCrate(crate);\n  };\n\n  const handlePurchase = () => {\n    if (player.currency >= crateCost) {\n      onPurchaseCrate();\n      setPreviewCrate(null);\n    }\n  };\n\n  const weapons = inventory.getWeapons();\n  const equippedCount = weapons.filter((w) => w.equipped).length;\n  const maxEquipped = inventory.getMaxEquipped();\n\n  const equippedWeapons = weapons.filter(w => w.equipped);\n  const stowedWeapons = weapons.filter(w => !w.equipped);\n\n  const drones = inventory.getDrones();\n  const equippedDroneCount = drones.filter((d) => d.equipped).length;\n  const maxEquippedDrones = inventory.getMaxEquippedDrones();\n\n  const equippedDrones = drones.filter(d => d.equipped);\n  const stowedDrones = drones.filter(d => !d.equipped);\n\n  const renderIcon = (iconName: string) => {\n    const Icon = (LucideIcons as any)[iconName.split('-').map((word: string) =>\n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join('')];\n    return Icon ? <Icon className=\"w-4 h-4\" /> : <ShoppingCart className=\"w-4 h-4\" />;\n  };\n\n  const getMeleeForm = (meleeFormId: string | undefined) => {\n    if (meleeFormId) {\n      return MELEE_FORMS[meleeFormId];\n    }\n    return null;\n  };\n\n  const handleSwapWeapon = (slotIndex: number, stowedWeaponId: string) => {\n    const equippedWeapon = equippedWeapons[slotIndex];\n    if (equippedWeapon) {\n      onUnequipWeapon(equippedWeapon.weapon.id);\n    }\n    onEquipWeapon(stowedWeaponId);\n    setHoveredSlot(null);\n  };\n\n  const renderWeaponCard = (weapon: any, slotIndex?: number) => {\n    const meleeForm = getMeleeForm(weapon.meleeFormId);\n    const isRanged = weapon.projectileSpeed > 0;\n\n    return (\n      <div className=\"p-3 rounded-lg border-2 bg-slate-900/30 border-slate-700 transition-all\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <div className=\"flex items-center gap-2 flex-1\">\n            <div\n              className=\"w-3 h-3 rounded-full flex-shrink-0\"\n              style={{ backgroundColor: weapon.color, boxShadow: `0 0 10px ${weapon.color}` }}\n            />\n            <div className=\"min-w-0 flex-1\">\n              <h4 className=\"font-semibold text-white text-sm truncate\">{weapon.name}</h4>\n              <p className=\"text-[10px] text-slate-400 truncate\">{weapon.description || weapon.type}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-5 gap-1.5 mb-2 text-[10px]\">\n          <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n            <div className=\"text-red-400 font-bold\">{weapon.damage.toFixed(0)}</div>\n            <div className=\"text-slate-500\">DMG</div>\n          </div>\n          <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n            <div className=\"text-yellow-400 font-bold\">{(1/weapon.fireRate).toFixed(1)}</div>\n            <div className=\"text-slate-500\">RoF</div>\n          </div>\n          <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n            <div className=\"text-cyan-400 font-bold\">{isRanged ? weapon.projectileSpeed.toFixed(0) : '-'}</div>\n            <div className=\"text-slate-500\">SPD</div>\n          </div>\n          <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n            <div className=\"text-purple-400 font-bold\">{weapon.maxRange ? weapon.maxRange.toFixed(0) : '-'}</div>\n            <div className=\"text-slate-500\">RNG</div>\n          </div>\n          <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n            <div className=\"text-green-400 font-bold\">{isRanged ? weapon.projectileCount : '-'}</div>\n            <div className=\"text-slate-500\">CNT</div>\n          </div>\n        </div>\n\n        {meleeForm && (\n          <div className=\"mb-2 bg-purple-900/20 border border-purple-500/30 rounded p-2\">\n            <div className=\"flex items-center gap-1 mb-1\">\n              <span className=\"text-purple-400 font-bold text-[10px]\">Stance:</span>\n              <span className=\"text-purple-300 text-[10px]\">{meleeForm.name}</span>\n            </div>\n            <p className=\"text-[9px] text-slate-400\">{meleeForm.description}</p>\n          </div>\n        )}\n\n        {weapon.perks && weapon.perks.length > 0 && (\n          <div className=\"mb-2 space-y-1\">\n            {weapon.perks.slice(0, 2).map((perkId: string, idx: number) => (\n              <div\n                key={idx}\n                className=\"bg-slate-800/30 px-2 py-1 rounded text-[10px] text-cyan-300 border border-cyan-500/20\"\n              >\n                {perkId}\n              </div>\n            ))}\n            {weapon.perks.length > 2 && (\n              <div className=\"text-[9px] text-slate-500 px-2\">+{weapon.perks.length - 2} more</div>\n            )}\n          </div>\n        )}\n\n        {slotIndex === undefined && (\n          <button\n            onClick={() => onDeleteWeapon(weapon.id)}\n            className=\"w-full bg-red-500/20 hover:bg-red-500/30 text-red-400 border border-red-500/30 px-3 py-1.5 rounded text-xs font-bold transition-all flex items-center justify-center gap-1\"\n          >\n            <Trash2 className=\"w-3 h-3\" />\n            Delete\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 animate-in fade-in duration-200\" style={{ fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif' }}>\n      <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 border-2 border-cyan-500/30 rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden\">\n        <div className=\"bg-gradient-to-r from-cyan-900/50 to-blue-900/50 p-4 flex items-center justify-between border-b border-cyan-500/30\">\n          <div className=\"flex items-center gap-3\">\n            <Package className=\"w-6 h-6 text-cyan-400\" />\n            <h2 className=\"text-2xl font-bold text-cyan-300\">WEAPON CRATE SHOP</h2>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"bg-yellow-500/20 border border-yellow-500/30 rounded-lg px-4 py-2\">\n              <span className=\"text-yellow-300 font-bold text-lg\">{player.currency} Credits</span>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"hover:bg-red-500/20 p-2 rounded-lg transition-colors border border-transparent hover:border-red-500/30\"\n            >\n              <X className=\"w-6 h-6 text-red-400\" />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-80px)] space-y-6\">\n          <div className=\"bg-slate-800/50 border-2 border-cyan-500/30 rounded-lg p-6\">\n            <h3 className=\"text-xl font-bold text-cyan-300 mb-4 flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              Purchase Weapon Crate\n            </h3>\n            <p className=\"text-slate-400 text-sm mb-4\">\n              Each crate contains a random weapon with 1-5 random perks. Preview before you buy!\n            </p>\n\n            {!previewCrate ? (\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <Package className=\"w-16 h-16 text-cyan-400 mb-4 opacity-50\" />\n                <p className=\"text-slate-400 mb-4\">Generate a preview to see what you'll get</p>\n                <button\n                  onClick={handleGeneratePreview}\n                  className=\"bg-cyan-500 hover:bg-cyan-400 text-slate-900 px-6 py-3 rounded-lg font-bold transition-all shadow-lg\"\n                >\n                  Generate Preview\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div\n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: previewCrate.weapon.color, boxShadow: `0 0 15px ${previewCrate.weapon.color}` }}\n                      />\n                      <div>\n                        <h4 className=\"font-bold text-white text-lg\">{previewCrate.weapon.name}</h4>\n                        <p className=\"text-xs text-slate-400\">{previewCrate.weapon.description}</p>\n                      </div>\n                    </div>\n                    <div className={`text-xs px-2 py-1 rounded ${\n                      previewCrate.weapon.firingMode === 'auto'\n                        ? 'bg-green-500/20 text-green-300 border border-green-500/30'\n                        : 'bg-blue-500/20 text-blue-300 border border-blue-500/30'\n                    }`}>\n                      {previewCrate.weapon.firingMode.toUpperCase()}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-3 mb-4 text-xs\">\n                    <div className=\"bg-slate-800/50 p-2 rounded\">\n                      <div className=\"text-slate-400\">Damage</div>\n                      <div className=\"text-red-400 font-bold text-lg\">{previewCrate.weapon.damage.toFixed(1)}</div>\n                    </div>\n                    <div className=\"bg-slate-800/50 p-2 rounded\">\n                      <div className=\"text-slate-400\">Fire Rate</div>\n                      <div className=\"text-yellow-400 font-bold text-lg\">{(1/previewCrate.weapon.fireRate).toFixed(1)}/s</div>\n                    </div>\n                    <div className=\"bg-slate-800/50 p-2 rounded\">\n                      <div className=\"text-slate-400\">Speed</div>\n                      <div className=\"text-cyan-400 font-bold text-lg\">{previewCrate.weapon.projectileSpeed.toFixed(1)}</div>\n                    </div>\n                    <div className=\"bg-slate-800/50 p-2 rounded\">\n                      <div className=\"text-slate-400\">Range</div>\n                      <div className=\"text-purple-400 font-bold text-lg\">{previewCrate.weapon.maxRange || 'N/A'}</div>\n                    </div>\n                    <div className=\"bg-slate-800/50 p-2 rounded\">\n                      <div className=\"text-slate-400\">Count</div>\n                      <div className=\"text-green-400 font-bold text-lg\">{previewCrate.weapon.projectileCount}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm font-bold text-cyan-300 mb-2\">Perks ({previewCrate.perks.length})</div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {previewCrate.perks.map((perk) => (\n                        <div\n                          key={perk.id}\n                          className=\"bg-slate-800/30 border rounded p-2\"\n                          style={{ borderColor: getRarityColor(perk.rarity) }}\n                        >\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <div style={{ color: getRarityColor(perk.rarity) }}>\n                              {renderIcon(perk.icon)}\n                            </div>\n                            <div className=\"font-bold text-xs\" style={{ color: getRarityColor(perk.rarity) }}>\n                              {perk.name}\n                            </div>\n                            <div className=\"text-[10px] px-1.5 py-0.5 rounded uppercase font-bold\" style={{\n                              backgroundColor: `${getRarityColor(perk.rarity)}20`,\n                              color: getRarityColor(perk.rarity),\n                              border: `1px solid ${getRarityColor(perk.rarity)}40`\n                            }}>\n                              {perk.rarity}\n                            </div>\n                          </div>\n                          <p className=\"text-[11px] text-slate-400\">{perk.description}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={handleGeneratePreview}\n                    className=\"flex-1 bg-slate-700 hover:bg-slate-600 text-white px-4 py-3 rounded-lg font-bold transition-all\"\n                  >\n                    Re-Roll Preview\n                  </button>\n                  <button\n                    onClick={handlePurchase}\n                    disabled={player.currency < crateCost}\n                    className={`flex-1 px-6 py-3 rounded-lg font-bold transition-all shadow-lg ${\n                      player.currency >= crateCost\n                        ? 'bg-cyan-500 hover:bg-cyan-400 text-slate-900'\n                        : 'bg-slate-700 text-slate-500 cursor-not-allowed'\n                    }`}\n                  >\n                    {player.currency >= crateCost\n                      ? `Purchase Crate - ${crateCost} Credits`\n                      : 'Insufficient Credits'}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"bg-slate-800/50 border-2 border-slate-700 rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-bold text-cyan-300 flex items-center gap-2\">\n                <LucideIcons.Backpack className=\"w-5 h-5\" />\n                Your Arsenal ({weapons.length} weapons)\n              </h3>\n              <div className=\"text-sm text-slate-400\">\n                Equipped: <span className=\"text-cyan-400 font-bold\">{equippedCount}/{maxEquipped}</span>\n              </div>\n            </div>\n\n            {weapons.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Package className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                <p>No weapons yet. Purchase a crate to get started!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-bold text-cyan-300 uppercase\">Equipped Weapons</h4>\n                  \n                  {Array.from({ length: maxEquipped }).map((_, slotIndex) => {\n                    const equippedWeapon = equippedWeapons[slotIndex];\n                    const isHovered = hoveredSlot === slotIndex;\n\n                    return (\n                      <div key={slotIndex} className=\"relative\">\n                        <div\n                          className={`p-3 rounded-lg border-2 transition-all ${\n                            equippedWeapon\n                              ? 'bg-cyan-900/20 border-cyan-500/50'\n                              : 'bg-slate-900/10 border-slate-700 border-dashed'\n                          } ${isHovered ? 'ring-2 ring-cyan-400' : ''}`}\n                          onMouseEnter={() => setHoveredSlot(slotIndex)}\n                          onMouseLeave={() => setHoveredSlot(null)}\n                        >\n                          {equippedWeapon ? (\n                            <div>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center gap-2 flex-1\">\n                                  <div className=\"bg-cyan-500/20 border border-cyan-500/30 rounded px-2 py-1 text-xs font-bold text-cyan-300\">\n                                    SLOT {slotIndex + 1}\n                                  </div>\n                                  <div\n                                    className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                                    style={{ backgroundColor: equippedWeapon.weapon.color, boxShadow: `0 0 10px ${equippedWeapon.weapon.color}` }}\n                                  />\n                                  <div className=\"min-w-0 flex-1\">\n                                    <h4 className=\"font-semibold text-white text-sm truncate\">{equippedWeapon.weapon.name}</h4>\n                                    <p className=\"text-[10px] text-slate-400 truncate\">{equippedWeapon.weapon.description || equippedWeapon.weapon.type}</p>\n                                  </div>\n                                </div>\n                                <button\n                                  onClick={() => onUnequipWeapon(equippedWeapon.weapon.id)}\n                                  className=\"bg-slate-700 hover:bg-slate-600 text-white px-3 py-1.5 rounded text-xs font-bold transition-all\"\n                                >\n                                  Unequip\n                                </button>\n                              </div>\n                              {isHovered && <div className=\"text-[10px] text-cyan-300 mt-1\">Hover over stowed weapons to swap</div>}\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-4 text-slate-500 text-sm\">\n                              <div className=\"font-bold mb-1\">SLOT {slotIndex + 1}</div>\n                              <div className=\"text-xs\">Empty - Equip a weapon from stowed</div>\n                            </div>\n                          )}\n                        </div>\n\n                        {isHovered && stowedWeapons.length > 0 && (\n                          <div className=\"absolute left-full ml-4 top-0 w-80 bg-slate-800 border-2 border-cyan-500/50 rounded-lg p-4 shadow-2xl z-50 max-h-96 overflow-y-auto\">\n                            <h5 className=\"text-xs font-bold text-cyan-300 mb-3 uppercase\">Stowed Weapons - Click to Swap</h5>\n                            <div className=\"space-y-2\">\n                              {stowedWeapons.map(({ weapon }) => (\n                                <div\n                                  key={weapon.id}\n                                  onClick={() => handleSwapWeapon(slotIndex, weapon.id)}\n                                  className=\"cursor-pointer hover:bg-cyan-900/30 transition-all\"\n                                >\n                                  {renderWeaponCard(weapon, slotIndex)}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {equippedCount < maxEquipped && stowedWeapons.length > 0 && (\n                  <div className=\"space-y-3 mt-6\">\n                    <h4 className=\"text-sm font-bold text-slate-400 uppercase\">Stowed Weapons (Not Equipped)</h4>\n                    <p className=\"text-xs text-slate-500\">Hover over an equipped slot to swap weapons, or equip to an empty slot</p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {stowedWeapons.map(({ weapon }) => (\n                        <div key={weapon.id} className=\"space-y-2\">\n                          {renderWeaponCard(weapon)}\n                          {inventory.canEquipMore() && (\n                            <button\n                              onClick={() => onEquipWeapon(weapon.id)}\n                              className=\"w-full bg-cyan-500 hover:bg-cyan-400 text-slate-900 px-3 py-1.5 rounded text-xs font-bold transition-all\"\n                            >\n                              Equip to Next Slot\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <div className=\"bg-slate-800/50 border-2 border-slate-700 rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-bold text-cyan-300 flex items-center gap-2\">\n                <Cpu className=\"w-5 h-5\" />\n                Your Drones ({drones.length} drones)\n              </h3>\n              <div className=\"text-sm text-slate-400\">\n                Equipped: <span className=\"text-cyan-400 font-bold\">{equippedDroneCount}/{maxEquippedDrones}</span>\n              </div>\n            </div>\n\n            {drones.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Cpu className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                <p>No drones yet. Craft drones to deploy them!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-bold text-cyan-300 uppercase\">Equipped Drones</h4>\n                  \n                  {Array.from({ length: maxEquippedDrones }).map((_, slotIndex) => {\n                    const equippedDrone = equippedDrones[slotIndex];\n                    const droneDefinition = equippedDrone ? DRONE_DEFINITIONS[equippedDrone.droneType] : null;\n\n                    return (\n                      <div key={slotIndex} className=\"relative\">\n                        <div\n                          className={`p-3 rounded-lg border-2 transition-all ${\n                            equippedDrone\n                              ? 'bg-cyan-900/20 border-cyan-500/50'\n                              : 'bg-slate-900/10 border-slate-700 border-dashed'\n                          }`}\n                        >\n                          {equippedDrone && droneDefinition ? (\n                            <div>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center gap-2 flex-1\">\n                                  <div className=\"bg-cyan-500/20 border border-cyan-500/30 rounded px-2 py-1 text-xs font-bold text-cyan-300\">\n                                    SLOT {slotIndex + 1}\n                                  </div>\n                                  <div\n                                    className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                                    style={{ backgroundColor: droneDefinition.color, boxShadow: `0 0 10px ${droneDefinition.color}` }}\n                                  />\n                                  <div className=\"min-w-0 flex-1\">\n                                    <h4 className=\"font-semibold text-white text-sm truncate\">{droneDefinition.name}</h4>\n                                    <p className=\"text-[10px] text-slate-400 truncate\">{droneDefinition.description}</p>\n                                  </div>\n                                </div>\n                                <button\n                                  onClick={() => onUnequipDrone(equippedDrone.droneType)}\n                                  className=\"bg-slate-700 hover:bg-slate-600 text-white px-3 py-1.5 rounded text-xs font-bold transition-all\"\n                                >\n                                  Unequip\n                                </button>\n                              </div>\n                              \n                              <div className=\"grid grid-cols-3 gap-1.5 text-[10px]\">\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-red-400 font-bold\">{droneDefinition.damage.toFixed(0)}</div>\n                                  <div className=\"text-slate-500\">DMG</div>\n                                </div>\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-green-400 font-bold\">{droneDefinition.health.toFixed(0)}</div>\n                                  <div className=\"text-slate-500\">HP</div>\n                                </div>\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-cyan-400 font-bold\">{(1/droneDefinition.fireRate).toFixed(1)}</div>\n                                  <div className=\"text-slate-500\">RoF</div>\n                                </div>\n                              </div>\n                              \n                              {droneDefinition.specialAbility && (\n                                <div className=\"mt-2 bg-purple-900/20 border border-purple-500/30 rounded p-2\">\n                                  <span className=\"text-purple-400 font-bold text-[10px]\">Special: {droneDefinition.specialAbility}</span>\n                                </div>\n                              )}\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-4 text-slate-500 text-sm\">\n                              <div className=\"font-bold mb-1\">SLOT {slotIndex + 1}</div>\n                              <div className=\"text-xs\">Empty - Equip a drone from stowed</div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {stowedDrones.length > 0 && (\n                  <div className=\"space-y-3 mt-6\">\n                    <h4 className=\"text-sm font-bold text-slate-400 uppercase\">Stowed Drones (Not Equipped)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {stowedDrones.map(({ droneType }) => {\n                        const droneDefinition = DRONE_DEFINITIONS[droneType];\n                        return (\n                          <div key={droneType} className=\"space-y-2\">\n                            <div className=\"p-3 rounded-lg border-2 bg-slate-900/30 border-slate-700 transition-all\">\n                              <div className=\"flex items-start justify-between mb-2\">\n                                <div className=\"flex items-center gap-2 flex-1\">\n                                  <div\n                                    className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                                    style={{ backgroundColor: droneDefinition.color, boxShadow: `0 0 10px ${droneDefinition.color}` }}\n                                  />\n                                  <div className=\"min-w-0 flex-1\">\n                                    <h4 className=\"font-semibold text-white text-sm truncate\">{droneDefinition.name}</h4>\n                                    <p className=\"text-[10px] text-slate-400 truncate\">{droneDefinition.description}</p>\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"grid grid-cols-3 gap-1.5 mb-2 text-[10px]\">\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-red-400 font-bold\">{droneDefinition.damage.toFixed(0)}</div>\n                                  <div className=\"text-slate-500\">DMG</div>\n                                </div>\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-green-400 font-bold\">{droneDefinition.health.toFixed(0)}</div>\n                                  <div className=\"text-slate-500\">HP</div>\n                                </div>\n                                <div className=\"bg-slate-800/50 p-1 rounded text-center\">\n                                  <div className=\"text-cyan-400 font-bold\">{(1/droneDefinition.fireRate).toFixed(1)}</div>\n                                  <div className=\"text-slate-500\">RoF</div>\n                                </div>\n                              </div>\n\n                              {droneDefinition.specialAbility && (\n                                <div className=\"mb-2 bg-purple-900/20 border border-purple-500/30 rounded p-2\">\n                                  <span className=\"text-purple-400 font-bold text-[10px]\">Special: {droneDefinition.specialAbility}</span>\n                                </div>\n                              )}\n\n                              <div className=\"flex gap-2\">\n                                {inventory.canEquipMoreDrones() && (\n                                  <button\n                                    onClick={() => onEquipDrone(droneType)}\n                                    className=\"flex-1 bg-cyan-500 hover:bg-cyan-400 text-slate-900 px-3 py-1.5 rounded text-xs font-bold transition-all\"\n                                  >\n                                    Equip\n                                  </button>\n                                )}\n                                <button\n                                  onClick={() => onDeleteDrone(droneType)}\n                                  className=\"flex-1 bg-red-500/20 hover:bg-red-500/30 text-red-400 border border-red-500/30 px-3 py-1.5 rounded text-xs font-bold transition-all flex items-center justify-center gap-1\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                  Delete\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31084},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-slate-900 text-slate-100;\n  }\n}\n\n@keyframes fade-slide-down {\n  0% {\n    opacity: 0;\n    transform: translateY(-20px) translateX(-50%);\n  }\n  15% {\n    opacity: 1;\n    transform: translateY(0) translateX(-50%);\n  }\n  85% {\n    opacity: 1;\n    transform: translateY(0) translateX(-50%);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(10px) translateX(-50%);\n  }\n}\n\n.animate-fade-slide-down {\n  animation: fade-slide-down 4s ease-in-out forwards;\n}\n","size_bytes":552},"src/game/BiomeFeatureRenderer.ts":{"content":"import { Camera } from './Camera';\nimport {\n  AnyBiomeFeature,\n  IslandFeature,\n  VoidGapFeature,\n  RealityTearFeature,\n  GlacialSpireFeature,\n  LavaPillarFeature,\n  ToxicPoolFeature,\n  CrystalFormationFeature,\n  CoralReefFeature,\n  BloomTreeFeature,\n  GravityAnomalyFeature,\n} from './BiomeFeatures';\n\nexport class BiomeFeatureRenderer {\n  private time: number = 0;\n\n  update(deltaTime: number): void {\n    this.time += deltaTime;\n  }\n\n  private computeConvexHull(points: Array<{x: number, y: number}>): Array<{x: number, y: number}> {\n    if (points.length < 3) return points;\n\n    const sorted = [...points].sort((a, b) => a.x === b.x ? a.y - b.y : a.x - b.x);\n\n    const cross = (o: {x: number, y: number}, a: {x: number, y: number}, b: {x: number, y: number}) => {\n      return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x);\n    };\n\n    const lower: Array<{x: number, y: number}> = [];\n    for (const p of sorted) {\n      while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], p) <= 0) {\n        lower.pop();\n      }\n      lower.push(p);\n    }\n\n    const upper: Array<{x: number, y: number}> = [];\n    for (let i = sorted.length - 1; i >= 0; i--) {\n      const p = sorted[i];\n      while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0) {\n        upper.pop();\n      }\n      upper.push(p);\n    }\n\n    lower.pop();\n    upper.pop();\n    return lower.concat(upper);\n  }\n\n  renderFeature(\n    ctx: CanvasRenderingContext2D,\n    feature: AnyBiomeFeature,\n    camera: Camera\n  ): void {\n    if (!camera.isInView(feature.position, feature.size * 2)) return;\n\n    switch (feature.type) {\n      case 'island':\n        this.renderIsland(ctx, feature as IslandFeature, camera);\n        break;\n      case 'void-gap':\n        this.renderVoidGap(ctx, feature as VoidGapFeature, camera);\n        break;\n      case 'reality-tear':\n        this.renderRealityTear(ctx, feature as RealityTearFeature, camera);\n        break;\n      case 'glacial-spire':\n        this.renderGlacialSpire(ctx, feature as GlacialSpireFeature, camera);\n        break;\n      case 'lava-pillar':\n        this.renderLavaPillar(ctx, feature as LavaPillarFeature, camera);\n        break;\n      case 'toxic-pool':\n        this.renderToxicPool(ctx, feature as ToxicPoolFeature, camera);\n        break;\n      case 'crystal-formation':\n        this.renderCrystalFormation(\n          ctx,\n          feature as CrystalFormationFeature,\n          camera\n        );\n        break;\n      case 'coral-reef':\n        this.renderCoralReef(ctx, feature as CoralReefFeature, camera);\n        break;\n      case 'bloom-tree':\n        this.renderBloomTree(ctx, feature as BloomTreeFeature, camera);\n        break;\n      case 'gravity-anomaly':\n        this.renderGravityAnomaly(\n          ctx,\n          feature as GravityAnomalyFeature,\n          camera\n        );\n        break;\n    }\n  }\n\n  private renderIsland(\n    ctx: CanvasRenderingContext2D,\n    feature: IslandFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(feature.rotation);\n\n    ctx.fillStyle = feature.data.surfaceColor;\n    ctx.strokeStyle = feature.data.edgeColor;\n    ctx.lineWidth = 4;\n\n    ctx.beginPath();\n\n    if (feature.data.shape === 'circular') {\n      ctx.arc(0, 0, feature.data.width / 2, 0, Math.PI * 2);\n    } else if (feature.data.shape === 'elongated') {\n      ctx.ellipse(\n        0,\n        0,\n        feature.data.width / 2,\n        feature.data.height / 2,\n        0,\n        0,\n        Math.PI * 2\n      );\n    } else {\n      const points = 8;\n      for (let i = 0; i < points; i++) {\n        const angle = (i / points) * Math.PI * 2;\n        const variance = 0.8 + Math.sin(i * 2.5) * 0.2;\n        const radius = (feature.data.width / 2) * variance;\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * (feature.data.height / 2) * variance;\n        if (i === 0) ctx.moveTo(x, y);\n        else ctx.lineTo(x, y);\n      }\n      ctx.closePath();\n    }\n\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.shadowBlur = 30;\n    ctx.shadowColor = feature.data.edgeColor;\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private renderVoidGap(\n    ctx: CanvasRenderingContext2D,\n    feature: VoidGapFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    feature.data.voidTendrils.forEach((tendril, index) => {\n      const tendrilAngle = tendril.angle + this.time * tendril.speed;\n      const waveAmplitude = Math.sin(this.time * 2 + index) * 15;\n\n      ctx.strokeStyle = `rgba(138, 43, 226, ${0.4 + Math.sin(this.time * 3 + index) * 0.2})`;\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n\n      for (let i = 0; i <= 10; i++) {\n        const segmentLength = (tendril.length / 10) * i;\n        const waveOffset = Math.sin((i / 10) * Math.PI * 2 + this.time * 2) * waveAmplitude * (i / 10);\n        const x = Math.cos(tendrilAngle) * segmentLength + Math.cos(tendrilAngle + Math.PI / 2) * waveOffset;\n        const y = Math.sin(tendrilAngle) * segmentLength + Math.sin(tendrilAngle + Math.PI / 2) * waveOffset;\n        ctx.lineTo(x, y);\n      }\n\n      ctx.stroke();\n\n      const tipX = Math.cos(tendrilAngle) * tendril.length;\n      const tipY = Math.sin(tendrilAngle) * tendril.length;\n      const tipPulse = Math.sin(this.time * 4 + index) * 0.5 + 0.5;\n      ctx.fillStyle = `rgba(168, 85, 247, ${tipPulse})`;\n      ctx.shadowBlur = 15;\n      ctx.shadowColor = '#a855f7';\n      ctx.beginPath();\n      ctx.arc(tipX, tipY, 5, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    const gradient = ctx.createRadialGradient(\n      0,\n      0,\n      0,\n      0,\n      0,\n      feature.data.width / 2\n    );\n    gradient.addColorStop(0, 'rgba(0, 0, 0, 0.95)');\n    gradient.addColorStop(0.7, 'rgba(10, 5, 20, 0.7)');\n    gradient.addColorStop(1, 'rgba(30, 15, 60, 0.2)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.ellipse(\n      0,\n      0,\n      feature.data.width / 2,\n      feature.data.height / 2,\n      0,\n      0,\n      Math.PI * 2\n    );\n    ctx.fill();\n\n    const pulse = Math.sin(this.time * 2) * 0.3 + 0.7;\n    ctx.strokeStyle = `rgba(100, 50, 200, ${pulse * 0.5})`;\n    ctx.lineWidth = 3;\n    ctx.stroke();\n\n    if (feature.data.hasOminousTendril && feature.data.ominousTendrilAngle !== undefined) {\n      const ominousAngle = feature.data.ominousTendrilAngle;\n      const ominousLength = Math.max(feature.data.width, feature.data.height) * 0.8;\n      const pulse = feature.data.ominousTendrilPulse || 0;\n      const glowIntensity = Math.sin(pulse * 2) * 0.3 + 0.7;\n\n      ctx.shadowBlur = 30 * glowIntensity;\n      ctx.shadowColor = '#7c3aed';\n      ctx.strokeStyle = `rgba(124, 58, 237, ${0.8 * glowIntensity})`;\n      ctx.lineWidth = 8;\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n\n      for (let i = 0; i <= 15; i++) {\n        const segmentLength = (ominousLength / 15) * i;\n        const waveOffset = Math.sin((i / 15) * Math.PI * 4 + pulse * 3) * 25 * (i / 15);\n        const x = Math.cos(ominousAngle) * segmentLength + Math.cos(ominousAngle + Math.PI / 2) * waveOffset;\n        const y = Math.sin(ominousAngle) * segmentLength + Math.sin(ominousAngle + Math.PI / 2) * waveOffset;\n        ctx.lineTo(x, y);\n      }\n\n      ctx.stroke();\n\n      const tipX = Math.cos(ominousAngle) * ominousLength;\n      const tipY = Math.sin(ominousAngle) * ominousLength;\n\n      ctx.shadowBlur = 40;\n      ctx.fillStyle = `rgba(167, 139, 250, ${glowIntensity})`;\n      ctx.beginPath();\n      ctx.arc(tipX, tipY, 12, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.shadowBlur = 20;\n      ctx.fillStyle = `rgba(124, 58, 237, ${glowIntensity})`;\n      ctx.beginPath();\n      ctx.arc(tipX, tipY, 6, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.restore();\n  }\n\n  private renderRealityTear(\n    ctx: CanvasRenderingContext2D,\n    feature: RealityTearFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(feature.rotation);\n\n    const baseColor = feature.data.isPortal\n      ? 'rgba(192, 132, 252, '\n      : 'rgba(138, 43, 226, ';\n    const gradient = ctx.createLinearGradient(\n      -feature.data.width / 2,\n      0,\n      feature.data.width / 2,\n      0\n    );\n    gradient.addColorStop(0, baseColor + '0)');\n    gradient.addColorStop(0.5, baseColor + '0.8)');\n    gradient.addColorStop(1, baseColor + '0)');\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(\n      -feature.data.width / 2,\n      -feature.data.height / 2,\n      feature.data.width,\n      feature.data.height\n    );\n\n    const pulse = Math.sin(this.time * 3) * 0.3 + 0.7;\n    const strokeColor = feature.data.isPortal\n      ? `rgba(232, 121, 249, ${pulse})`\n      : `rgba(200, 100, 255, ${pulse})`;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = feature.data.isPortal ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-feature.data.width / 2, 0);\n    ctx.quadraticCurveTo(\n      0,\n      -feature.data.height / 3,\n      feature.data.width / 2,\n      0\n    );\n    ctx.quadraticCurveTo(\n      0,\n      feature.data.height / 3,\n      -feature.data.width / 2,\n      0\n    );\n    ctx.stroke();\n\n    if (feature.data.isPortal) {\n      ctx.fillStyle = `rgba(192, 132, 252, ${pulse * 0.3})`;\n      ctx.beginPath();\n      ctx.ellipse(\n        0,\n        0,\n        feature.data.width * 0.3,\n        feature.data.height * 0.3,\n        0,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    }\n\n    feature.data.particles.forEach((particle, index) => {\n      const particleTime = this.time * particle.speed + index;\n      const x = particle.offset.x + Math.cos(particleTime) * 20;\n      const y = particle.offset.y + Math.sin(particleTime * 1.5) * 30;\n\n      const particleColor = feature.data.isPortal\n        ? `rgba(232, 121, 249, ${0.7 * pulse})`\n        : `rgba(200, 150, 255, ${0.6 * pulse})`;\n      ctx.fillStyle = particleColor;\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    ctx.restore();\n  }\n\n  private renderGlacialSpire(\n    ctx: CanvasRenderingContext2D,\n    feature: GlacialSpireFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(feature.rotation);\n\n    feature.data.snowDrift.forEach((drift) => {\n      ctx.save();\n      ctx.translate(drift.offset.x, drift.offset.y);\n      ctx.rotate(drift.angle);\n\n      const driftGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, drift.size);\n      driftGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\n      driftGradient.addColorStop(0.6, 'rgba(160, 196, 255, 0.2)');\n      driftGradient.addColorStop(1, 'rgba(160, 196, 255, 0)');\n\n      ctx.fillStyle = driftGradient;\n      ctx.beginPath();\n      ctx.ellipse(0, 0, drift.size, drift.size * 0.6, 0, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.restore();\n    });\n\n    const segmentHeight = feature.data.height / feature.data.segments;\n\n    for (let i = feature.data.segments - 1; i >= 0; i--) {\n      const y = -feature.data.height / 2 + i * segmentHeight;\n      const widthFactor = 1 - i / feature.data.segments;\n      const width = feature.data.baseWidth * widthFactor;\n\n      const gradient = ctx.createLinearGradient(-width / 2, y, width / 2, y);\n      if (i % 2 === 0) {\n        gradient.addColorStop(0, '#a0c4ff');\n        gradient.addColorStop(0.5, feature.data.iceColor);\n        gradient.addColorStop(1, '#a0c4ff');\n      } else {\n        gradient.addColorStop(0, '#d0e7ff');\n        gradient.addColorStop(0.5, '#c7d2fe');\n        gradient.addColorStop(1, '#d0e7ff');\n      }\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(-width / 2, y + segmentHeight);\n      ctx.lineTo(width / 2, y + segmentHeight);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    }\n\n    const sparkle = Math.sin(this.time * 3) * 0.5 + 0.5;\n    for (let i = 0; i < 5; i++) {\n      const sparkleY = -feature.data.height / 2 + (i / 5) * feature.data.height;\n      const sparkleX = (Math.sin(this.time * 2 + i) * feature.data.baseWidth) / 3;\n      ctx.fillStyle = `rgba(255, 255, 255, ${sparkle * 0.8})`;\n      ctx.shadowBlur = 10;\n      ctx.shadowColor = '#ffffff';\n      ctx.beginPath();\n      ctx.arc(sparkleX, sparkleY, 2, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.shadowBlur = 40;\n    ctx.shadowColor = feature.data.iceColor;\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.beginPath();\n    ctx.arc(0, -feature.data.height / 2, 8, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.shadowBlur = 0;\n    ctx.fillStyle = feature.data.iceColor;\n    ctx.beginPath();\n    ctx.arc(0, -feature.data.height / 2, 5, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  /*\n  private renderGlacialSpire(\n    ctx: CanvasRenderingContext2D,\n    feature: GlacialSpireFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(Math.round(screenPos.x), Math.round(screenPos.y));\n    ctx.rotate(feature.rotation);\n\n    const segmentHeight = feature.data.height / feature.data.segments;\n    const baseWidth = feature.data.baseWidth;\n    const iceColor = feature.data.iceColor;\n    const lightColor = '#c7d2fe'; // A light, slightly blue-ish color\n    const shadowColor = 'rgba(0, 50, 100, 0.2)'; // A dark, subtle blue for the shadow\n\n    // --- 1. Draw Segments (Back to Front) ---\n    for (let i = feature.data.segments - 1; i >= 0; i--) {\n      const y = -feature.data.height / 2 + i * segmentHeight;\n\n      // Introduce randomness for a jagged, natural look\n      const taperFactor = 1 - i / feature.data.segments;\n      // Random variation: up to 20% of the baseWidth\n      const jaggedness =\n        ((Math.random() - 0.5) * 0.4 * baseWidth) / feature.data.segments;\n      const currentWidth = baseWidth * taperFactor + jaggedness;\n\n      const nextY = y + segmentHeight;\n\n      // --- Shadow Pass (Gives it a 3D effect) ---\n      // Draw a slightly darker, slightly offset version of the segment\n      ctx.fillStyle = shadowColor;\n      ctx.beginPath();\n      // Shift points slightly to the right (assuming light is from the top-left)\n      const shadowOffset = 3;\n      ctx.moveTo(shadowOffset, y);\n      ctx.lineTo(-currentWidth / 2 + shadowOffset, nextY);\n      ctx.lineTo(currentWidth / 2 + shadowOffset, nextY);\n      ctx.closePath();\n      ctx.fill();\n\n      // --- Main Segment Pass ---\n      // Alternating colors for depth/texture\n      ctx.fillStyle = i % 2 === 0 ? iceColor : lightColor;\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(-currentWidth / 2, nextY);\n      ctx.lineTo(currentWidth / 2, nextY);\n      ctx.closePath();\n      ctx.fill();\n\n      // --- Outline/Highlight (Optional: Adds more definition) ---\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n\n    // --- 2. Dramatic Tip Glow and Cap ---\n    const tipY = -feature.data.height / 2;\n\n    // Stronger, wider outer glow effect\n    ctx.shadowBlur = 50; // Increased blur for a more ethereal glow\n    ctx.shadowColor = iceColor;\n\n    // Draw a larger, semi-transparent circle for the intense core light\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.beginPath();\n    ctx.arc(0, tipY, 8, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw the final, sharp tip with the main ice color\n    ctx.shadowBlur = 0; // Turn off shadow for the absolute tip\n    ctx.fillStyle = iceColor;\n    ctx.beginPath();\n    ctx.arc(0, tipY, 2, 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.restore();\n  }\n*/\n  private renderLavaPillar(\n    ctx: CanvasRenderingContext2D,\n    feature: LavaPillarFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    const bubble = feature.data.isErupting\n      ? 1.2\n      : Math.sin(this.time * 10 + feature.position.x) * 0.1 + 0.9;\n\n    const gradient = ctx.createLinearGradient(\n      0,\n      -feature.data.height / 2,\n      0,\n      feature.data.height / 2\n    );\n    gradient.addColorStop(0, '#ffdd00');\n    gradient.addColorStop(0.2, '#ff6600');\n    gradient.addColorStop(0.5, '#f97316');\n    gradient.addColorStop(0.8, '#9a3412');\n    gradient.addColorStop(1, '#7c2d12');\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(\n      -feature.data.width / 2,\n      -feature.data.height / 2,\n      feature.data.width,\n      feature.data.height * bubble\n    );\n\n    const glowIntensity = feature.data.isErupting\n      ? feature.data.glowIntensity * 3\n      : feature.data.glowIntensity;\n    ctx.shadowBlur = glowIntensity;\n    ctx.shadowColor = '#ff6600';\n\n    ctx.strokeStyle = feature.data.isErupting ? '#fff5e6' : '#fdba74';\n    ctx.lineWidth = feature.data.isErupting ? 3 : 2;\n    ctx.strokeRect(\n      -feature.data.width / 2,\n      -feature.data.height / 2,\n      feature.data.width,\n      feature.data.height\n    );\n\n    if (feature.data.isErupting) {\n      feature.data.lavaParticles.forEach((particle) => {\n        ctx.fillStyle = `rgba(251, 146, 60, ${particle.lifetime / 1.5})`;\n        ctx.shadowBlur = 15;\n        ctx.beginPath();\n        ctx.arc(particle.offset.x, particle.offset.y, 6, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    } else {\n      for (let i = 0; i < 5; i++) {\n        const bubbleY =\n          ((this.time * 50 + i * 100) % feature.data.height) -\n          feature.data.height / 2;\n        const bubbleX = (Math.sin(this.time + i) * feature.data.width) / 4;\n\n        ctx.fillStyle = 'rgba(251, 146, 60, 0.6)';\n        ctx.beginPath();\n        ctx.arc(bubbleX, bubbleY, 5, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  private renderToxicPool(\n    ctx: CanvasRenderingContext2D,\n    feature: ToxicPoolFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    const gradient = ctx.createRadialGradient(\n      0,\n      0,\n      0,\n      0,\n      0,\n      feature.data.radius\n    );\n    gradient.addColorStop(0, 'rgba(132, 204, 22, 0.6)');\n    gradient.addColorStop(0.5, 'rgba(132, 204, 22, 0.4)');\n    gradient.addColorStop(1, 'rgba(132, 204, 22, 0.1)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, feature.data.radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    feature.data.miasma.forEach((miasma, index) => {\n      const miasmaPulse = Math.sin(this.time * miasma.pulseSpeed + index) * 0.3 + 0.7;\n      const miasmaGradient = ctx.createRadialGradient(\n        miasma.offset.x,\n        miasma.offset.y,\n        0,\n        miasma.offset.x,\n        miasma.offset.y,\n        miasma.radius * miasmaPulse\n      );\n      miasmaGradient.addColorStop(0, 'rgba(163, 230, 53, 0.3)');\n      miasmaGradient.addColorStop(0.7, 'rgba(101, 163, 13, 0.2)');\n      miasmaGradient.addColorStop(1, 'rgba(101, 163, 13, 0)');\n\n      ctx.fillStyle = miasmaGradient;\n      ctx.beginPath();\n      ctx.arc(miasma.offset.x, miasma.offset.y, miasma.radius * miasmaPulse, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    feature.data.bubbles.forEach((bubble, index) => {\n      const bubblePhase = (this.time * bubble.speed + index) % 3;\n      const scale =\n        bubblePhase < 1.5 ? bubblePhase / 1.5 : 1 - (bubblePhase - 1.5) / 1.5;\n\n      if (scale > 0.1) {\n        ctx.fillStyle = `rgba(163, 230, 53, ${0.5 * scale})`;\n        ctx.beginPath();\n        ctx.arc(\n          bubble.offset.x,\n          bubble.offset.y,\n          bubble.size * scale,\n          0,\n          Math.PI * 2\n        );\n        ctx.fill();\n\n        ctx.strokeStyle = `rgba(190, 242, 100, ${0.7 * scale})`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    });\n\n    ctx.restore();\n  }\n\n  private renderCrystalFormation(\n    ctx: CanvasRenderingContext2D,\n    feature: CrystalFormationFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    if (feature.data.isResonating) {\n      const resonancePulse = Math.sin(this.time * 8) * 0.5 + 0.5;\n      ctx.shadowBlur = 40 * resonancePulse;\n      ctx.shadowColor = feature.data.glowColor;\n      ctx.strokeStyle = feature.data.glowColor;\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(0, 0, 120, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    feature.data.crystals.forEach((crystal) => {\n      ctx.save();\n      ctx.translate(crystal.offset.x, crystal.offset.y);\n      ctx.rotate(crystal.angle);\n\n      const gradient = ctx.createLinearGradient(\n        0,\n        -crystal.height / 2,\n        0,\n        crystal.height / 2\n      );\n      gradient.addColorStop(0, feature.data.glowColor);\n      gradient.addColorStop(0.5, '#67e8f9');\n      gradient.addColorStop(1, '#0891b2');\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.moveTo(0, -crystal.height / 2);\n      ctx.lineTo(-crystal.width / 2, crystal.height / 2);\n      ctx.lineTo(crystal.width / 2, crystal.height / 2);\n      ctx.closePath();\n      ctx.fill();\n\n      const pulse =\n        Math.sin(this.time * 2 + crystal.offset.x * 0.1) * 0.3 + 0.7;\n      const glowMultiplier = feature.data.isResonating ? 1.5 : 1;\n      ctx.shadowBlur = 20 * glowMultiplier;\n      ctx.shadowColor = feature.data.glowColor;\n      ctx.strokeStyle = `rgba(34, 211, 238, ${pulse * glowMultiplier})`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      ctx.restore();\n    });\n\n    ctx.restore();\n  }\n\n  private renderCoralReef(\n    ctx: CanvasRenderingContext2D,\n    feature: CoralReefFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(feature.rotation);\n\n    if (feature.data.waterPools.length > 0) {\n      const avgX = feature.data.waterPools.reduce((sum, p) => sum + p.offset.x, 0) / feature.data.waterPools.length;\n      const avgY = feature.data.waterPools.reduce((sum, p) => sum + p.offset.y, 0) / feature.data.waterPools.length;\n      const maxRadius = Math.max(...feature.data.waterPools.map(p => p.radius));\n\n      const waterGradient = ctx.createRadialGradient(avgX, avgY, 0, avgX, avgY, maxRadius * 1.5);\n      waterGradient.addColorStop(0, 'rgba(34, 211, 238, 0.5)');\n      waterGradient.addColorStop(0.5, 'rgba(20, 184, 166, 0.35)');\n      waterGradient.addColorStop(1, 'rgba(20, 184, 166, 0.05)');\n\n      ctx.fillStyle = waterGradient;\n      ctx.beginPath();\n\n      const points: Array<{x: number, y: number}> = [];\n      const segments = 32;\n\n      feature.data.waterPools.forEach((pool) => {\n        for (let i = 0; i < segments; i++) {\n          const angle = (i / segments) * Math.PI * 2;\n          const blobVariation = 0.95 + Math.sin(angle * 3 + this.time * 0.3) * 0.05;\n          const x = pool.offset.x + Math.cos(angle) * pool.radius * blobVariation;\n          const y = pool.offset.y + Math.sin(angle) * pool.radius * blobVariation;\n          points.push({x, y});\n        }\n      });\n\n      if (points.length > 0) {\n        const hull = this.computeConvexHull(points);\n\n        if (hull.length > 0) {\n          ctx.moveTo(hull[0].x, hull[0].y);\n          for (let i = 0; i < hull.length; i++) {\n            const current = hull[i];\n            const next = hull[(i + 1) % hull.length];\n            const nextNext = hull[(i + 2) % hull.length];\n\n            const cpX = next.x + (nextNext.x - current.x) * 0.15;\n            const cpY = next.y + (nextNext.y - current.y) * 0.15;\n\n            ctx.quadraticCurveTo(next.x, next.y, cpX, cpY);\n          }\n          ctx.closePath();\n          ctx.fill();\n\n          const ripple = Math.sin(this.time * 2) * 0.3 + 0.7;\n          ctx.strokeStyle = `rgba(94, 234, 212, ${ripple * 0.5})`;\n          ctx.lineWidth = 3;\n          ctx.stroke();\n\n          for (let sandPatch = 0; sandPatch < 3; sandPatch++) {\n            const patchAngle = (sandPatch / 3) * Math.PI * 2;\n            const patchDist = maxRadius * 1.2 + sandPatch * 30;\n            const patchX = avgX + Math.cos(patchAngle) * patchDist;\n            const patchY = avgY + Math.sin(patchAngle) * patchDist;\n\n            const sandGradient = ctx.createRadialGradient(patchX, patchY, 0, patchX, patchY, 40);\n            sandGradient.addColorStop(0, 'rgba(222, 184, 135, 0.6)');\n            sandGradient.addColorStop(0.7, 'rgba(210, 170, 120, 0.3)');\n            sandGradient.addColorStop(1, 'rgba(210, 170, 120, 0)');\n\n            ctx.fillStyle = sandGradient;\n            ctx.beginPath();\n            ctx.ellipse(patchX, patchY, 45 + sandPatch * 10, 30 + sandPatch * 5, patchAngle, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        }\n      }\n    }\n\n    const sway = Math.sin(this.time * feature.data.swaySpeed) * 0.15;\n\n    feature.data.branches.forEach((branch, index) => {\n      ctx.save();\n      ctx.translate(branch.offset.x, branch.offset.y);\n      ctx.rotate(branch.angle + sway * (1 + index * 0.1));\n\n      const gradient = ctx.createLinearGradient(0, 0, 0, branch.length);\n      gradient.addColorStop(0, '#14b8a6');\n      gradient.addColorStop(0.5, '#2dd4bf');\n      gradient.addColorStop(1, '#5eead4');\n\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = branch.thickness;\n      ctx.lineCap = 'round';\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(0, branch.length);\n      ctx.stroke();\n\n      for (let i = 0; i < 3; i++) {\n        const subBranchY = (branch.length * (i + 1)) / 4;\n        const subBranchLength = branch.length * 0.3;\n        const subAngle = (i % 2 === 0 ? 0.5 : -0.5) + sway * 0.5;\n\n        ctx.save();\n        ctx.translate(0, subBranchY);\n        ctx.rotate(subAngle);\n        ctx.lineWidth = branch.thickness * 0.6;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, subBranchLength);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      ctx.restore();\n    });\n\n    feature.data.fishSchools.forEach((school, schoolIndex) => {\n      for (let i = 0; i < school.count; i++) {\n        const turnTime = this.time * 0.3 + i * 2.5 + schoolIndex * 3.7;\n        const turnAngle = Math.sin(turnTime) * 0.8;\n\n        const baseAngle = school.angle + turnAngle;\n        const swimSpeed = school.speed * 0.4;\n        const swimDistance = 60 + i * 20;\n\n        const pathX = Math.cos(baseAngle) * swimDistance;\n        const pathY = Math.sin(baseAngle) * swimDistance;\n        const offsetX = Math.sin(this.time * swimSpeed + i) * 15;\n        const offsetY = Math.cos(this.time * swimSpeed * 0.7 + i) * 10;\n\n        const x = school.offset.x + pathX + offsetX;\n        const y = school.offset.y + pathY + offsetY;\n\n        const prevX = school.offset.x + Math.cos(baseAngle - 0.1) * swimDistance + Math.sin((this.time - 0.05) * swimSpeed + i) * 15;\n        const prevY = school.offset.y + Math.sin(baseAngle - 0.1) * swimDistance + Math.cos((this.time - 0.05) * swimSpeed * 0.7 + i) * 10;\n\n        const swimAngle = Math.atan2(y - prevY, x - prevX);\n\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.rotate(swimAngle);\n\n        const fishPulse = Math.sin(this.time * 4 + i) * 0.2 + 0.8;\n        ctx.fillStyle = `rgba(94, 234, 212, ${fishPulse * 0.7})`;\n        ctx.beginPath();\n        ctx.ellipse(0, 0, 8, 4, 0, 0, Math.PI * 2);\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.moveTo(-8, 0);\n        ctx.lineTo(-12, -3);\n        ctx.lineTo(-12, 3);\n        ctx.closePath();\n        ctx.fill();\n\n        ctx.restore();\n      }\n    });\n\n    ctx.restore();\n  }\n\n  private renderBloomTree(\n    ctx: CanvasRenderingContext2D,\n    feature: BloomTreeFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    feature.data.fallingPetals.forEach((petal, index) => {\n      const animatedY = petal.offset.y + (this.time * 30 + index * 10) % 200;\n      const animatedX = petal.offset.x + Math.sin(this.time * 2 + index) * 20;\n      const rotation = petal.rotation + this.time * 2;\n\n      ctx.save();\n      ctx.translate(animatedX, animatedY);\n      ctx.rotate(rotation);\n\n      const petalPulse = Math.sin(this.time * 3 + index) * 0.3 + 0.7;\n      ctx.fillStyle = `rgba(253, 224, 71, ${petalPulse * 0.8})`;\n      ctx.shadowBlur = 8;\n      ctx.shadowColor = '#fde047';\n\n      ctx.beginPath();\n      ctx.ellipse(0, 0, petal.size, petal.size * 0.6, 0, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.restore();\n    });\n\n    const gradient = ctx.createLinearGradient(\n      0,\n      0,\n      0,\n      feature.data.trunkHeight\n    );\n    gradient.addColorStop(0, '#065f46');\n    gradient.addColorStop(0.5, '#047857');\n    gradient.addColorStop(1, '#064e3b');\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(\n      -feature.data.trunkWidth / 2,\n      0,\n      feature.data.trunkWidth,\n      feature.data.trunkHeight\n    );\n\n    ctx.strokeStyle = '#059669';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(\n      -feature.data.trunkWidth / 2,\n      0,\n      feature.data.trunkWidth,\n      feature.data.trunkHeight\n    );\n\n    ctx.translate(0, -feature.data.trunkHeight * 0.2);\n\n    const pulse = Math.sin(this.time * 2) * 0.2 + 0.8;\n    const canopyGradient = ctx.createRadialGradient(\n      0,\n      0,\n      0,\n      0,\n      0,\n      feature.data.canopyRadius\n    );\n    canopyGradient.addColorStop(0, '#fde047');\n    canopyGradient.addColorStop(0.3, '#10b981');\n    canopyGradient.addColorStop(0.6, '#059669');\n    canopyGradient.addColorStop(1, 'rgba(5, 150, 105, 0.2)');\n\n    ctx.shadowBlur = 30 * pulse;\n    ctx.shadowColor = '#fde047';\n    ctx.fillStyle = canopyGradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, feature.data.canopyRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    for (let i = 0; i < feature.data.petalCount; i++) {\n      const angle = (i / feature.data.petalCount) * Math.PI * 2;\n      const pulse = Math.sin(this.time * 2 + i) * 0.2 + 0.8;\n      const distance = feature.data.canopyRadius * 0.7;\n      const x = Math.cos(angle) * distance;\n      const y = Math.sin(angle) * distance;\n\n      ctx.fillStyle = feature.data.glowColor;\n      ctx.shadowBlur = 15;\n      ctx.shadowColor = feature.data.glowColor;\n      ctx.beginPath();\n      ctx.arc(x, y, 8 * pulse, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.restore();\n  }\n\n  private renderGravityAnomaly(\n    ctx: CanvasRenderingContext2D,\n    feature: GravityAnomalyFeature,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(feature.position);\n\n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n\n    const gradient = ctx.createRadialGradient(\n      0,\n      0,\n      0,\n      0,\n      0,\n      feature.data.radius\n    );\n    gradient.addColorStop(0, 'rgba(99, 102, 241, 0.8)');\n    gradient.addColorStop(0.5, 'rgba(99, 102, 241, 0.4)');\n    gradient.addColorStop(1, 'rgba(99, 102, 241, 0)');\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, feature.data.radius, 0, Math.PI * 2);\n    ctx.fill();\n\n    const pulse = Math.sin(this.time * 3) * 0.3 + 0.7;\n    ctx.strokeStyle = `rgba(165, 180, 252, ${pulse})`;\n    ctx.lineWidth = 3;\n\n    for (let i = 0; i < 3; i++) {\n      const ringRadius = feature.data.radius * (0.3 + i * 0.3);\n      ctx.beginPath();\n      ctx.arc(0, 0, ringRadius, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    feature.data.orbitingDebris.forEach((debris, index) => {\n      const currentAngle = debris.angle + this.time * debris.speed * debris.orbitDirection;\n      const x = Math.cos(currentAngle) * debris.distance;\n      const y = Math.sin(currentAngle) * debris.distance;\n\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(currentAngle * 3);\n\n      ctx.fillStyle = '#818cf8';\n      ctx.shadowBlur = 10;\n      ctx.shadowColor = '#6366f1';\n\n      ctx.beginPath();\n      ctx.moveTo(-debris.size, -debris.size * 0.5);\n      ctx.lineTo(debris.size, -debris.size * 0.3);\n      ctx.lineTo(debris.size * 0.7, debris.size);\n      ctx.lineTo(-debris.size * 0.8, debris.size * 0.6);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.strokeStyle = '#a5b4fc';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      ctx.restore();\n\n      if (index === 0) {\n        ctx.strokeStyle = 'rgba(165, 180, 252, 0.15)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(0, 0, debris.distance, 0, Math.PI * 2);\n        ctx.stroke();\n      }\n    });\n\n    feature.data.gravitonResources.forEach((resource, index) => {\n      const currentAngle = resource.angle + this.time * resource.orbitSpeed;\n      const x = Math.cos(currentAngle) * resource.distance;\n      const y = Math.sin(currentAngle) * resource.distance;\n\n      const pulse = Math.sin(this.time * 3 + index) * 0.3 + 0.7;\n      ctx.fillStyle = `rgba(147, 51, 234, ${pulse})`;\n      ctx.shadowBlur = 15;\n      ctx.shadowColor = '#a855f7';\n      ctx.beginPath();\n      ctx.arc(x, y, resource.size, 0, Math.PI * 2);\n      ctx.fill();\n\n      ctx.strokeStyle = `rgba(216, 180, 254, ${pulse * 0.8})`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      const innerPulse = Math.sin(this.time * 5 + index * 1.5) * 0.5 + 0.5;\n      ctx.fillStyle = `rgba(253, 224, 71, ${innerPulse * 0.6})`;\n      ctx.beginPath();\n      ctx.arc(x, y, resource.size * 0.4, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    ctx.restore();\n  }\n}\n","size_bytes":33627},"src/game/UpgradeSystem.ts":{"content":"import { Upgrade, UpgradeEffect, Player, Weapon, Projectile } from '../types/game';\n\nexport class UpgradeSystem {\n  private appliedUpgrades: Upgrade[] = [];\n\n  applyUpgrade(upgrade: Upgrade, player: Player): Player {\n    const existingIndex = this.appliedUpgrades.findIndex(u => u.id === upgrade.id);\n\n    if (existingIndex >= 0) {\n      this.appliedUpgrades[existingIndex] = { ...upgrade, level: upgrade.level + 1 };\n    } else {\n      this.appliedUpgrades.push({ ...upgrade, level: 1 });\n    }\n\n    return this.recalculatePlayerStats(player);\n  }\n\n  recalculatePlayerStats(player: Player): Player {\n    \n    let updatedPlayer = {...player};\n\n    updatedPlayer.upgrades = [...this.appliedUpgrades];\n\n    for (const upgrade of this.appliedUpgrades) {\n      for (const effect of upgrade.effects) {\n        if (effect.target === 'player') {\n          updatedPlayer = this.applyEffectToPlayer(updatedPlayer, effect, upgrade.level);\n        }\n      }\n    }\n\n    updatedPlayer.equippedWeapons = updatedPlayer.equippedWeapons.map(weapon =>\n      this.applyUpgradesToWeapon(weapon, this.appliedUpgrades)\n    );\n\n    return updatedPlayer;\n  }\n\n  private applyEffectToPlayer(player: Player, effect: UpgradeEffect, level: number): Player {\n    const updated = { ...player };\n\n    if (effect.condition && !effect.condition({ player })) {\n      return updated;\n    }\n\n    const key = effect.property as keyof Player;\n    const currentValue = player[key] as number;\n\n    switch (effect.operation) {\n      case 'add':\n        (updated[key] as number) = currentValue + (effect.value * level);\n        break;\n      case 'multiply':\n        (updated[key] as number) = currentValue * (1 + effect.value * level);\n        break;\n      case 'set':\n        (updated[key] as number) = effect.value;\n        break;\n    }\n\n    return updated;\n  }\n\n  applyUpgradesToWeapon(weapon: Weapon, upgrades: Upgrade[]): Weapon {\n    let updated = { ...weapon };\n\n    for (const upgrade of upgrades) {\n      for (const effect of upgrade.effects) {\n        if (effect.target === 'weapon') {\n          updated = this.applyEffectToWeapon(updated, effect, upgrade.level);\n        }\n      }\n    }\n\n    return updated;\n  }\n\n  private applyEffectToWeapon(weapon: Weapon, effect: UpgradeEffect, level: number): Weapon {\n    const updated = { ...weapon };\n\n    if (effect.condition && !effect.condition({ weapon })) {\n      return updated;\n    }\n\n    const key = effect.property as keyof Weapon;\n    const currentValue = weapon[key] as number;\n\n    switch (effect.operation) {\n      case 'add':\n        (updated[key] as number) = currentValue + (effect.value * level);\n        break;\n      case 'multiply':\n        (updated[key] as number) = currentValue * (1 + effect.value * level);\n        break;\n      case 'set':\n        (updated[key] as number) = effect.value;\n        break;\n    }\n\n    return updated;\n  }\n\n  applyUpgradesToProjectile(projectile: Projectile, upgrades: Upgrade[]): Projectile {\n    let updated = { ...projectile };\n\n    for (const upgrade of upgrades) {\n      for (const effect of upgrade.effects) {\n        if (effect.target === 'projectile') {\n          updated = this.applyEffectToProjectile(updated, effect);\n        }\n      }\n    }\n\n    return updated;\n  }\n\n  private applyEffectToProjectile(projectile: Projectile, effect: UpgradeEffect): Projectile {\n    const updated = { ...projectile };\n\n    if (effect.condition && !effect.condition({ projectile })) {\n      return updated;\n    }\n\n    const key = effect.property as keyof Projectile;\n\n    switch (effect.operation) {\n      case 'add':\n        (updated[key] as number) = (projectile[key] as number) + effect.value;\n        break;\n      case 'multiply':\n        (updated[key] as number) = (projectile[key] as number) * (1 + effect.value);\n        break;\n      case 'set':\n        if (key === 'piercing') {\n          updated.piercing = effect.value === 1;\n        } else {\n          (updated[key] as number) = effect.value;\n        }\n        break;\n    }\n\n    return updated;\n  }\n\n  getAppliedUpgrades(): Upgrade[] {\n    return [...this.appliedUpgrades];\n  }\n\n  reset(): void {\n    this.appliedUpgrades = [];\n  }\n}\n","size_bytes":4151},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n","size_bytes":170},"src/game/Camera.ts":{"content":"import { Vector2 } from '../types/game';\nimport { createVector, vectorAdd, vectorScale, vectorSubtract } from './utils';\n\nexport class Camera {\n  position: Vector2;\n  targetPosition: Vector2;\n  smoothing: number;\n  viewportWidth: number;\n  viewportHeight: number;\n\n  constructor(viewportWidth: number, viewportHeight: number, smoothing: number = 0.1) {\n    this.position = createVector(0, 0);\n    this.targetPosition = createVector(0, 0);\n    this.smoothing = smoothing;\n    this.viewportWidth = viewportWidth;\n    this.viewportHeight = viewportHeight;\n  }\n\n  follow(target: Vector2): void {\n    this.targetPosition = { ...target };\n  }\n\n  update(): void {\n    const offset = vectorSubtract(this.targetPosition, this.position);\n    const movement = vectorScale(offset, this.smoothing);\n    this.position = vectorAdd(this.position, movement);\n  }\n\n  worldToScreen(worldPos: Vector2): Vector2 {\n    return {\n      x: worldPos.x - this.position.x + this.viewportWidth / 2,\n      y: worldPos.y - this.position.y + this.viewportHeight / 2,\n    };\n  }\n\n  screenToWorld(screenPos: Vector2): Vector2 {\n    return {\n      x: screenPos.x + this.position.x - this.viewportWidth / 2,\n      y: screenPos.y + this.position.y - this.viewportHeight / 2,\n    };\n  }\n\n  isInView(worldPos: Vector2, padding: number = 100): boolean {\n    const screenPos = this.worldToScreen(worldPos);\n    return (\n      screenPos.x > -padding &&\n      screenPos.x < this.viewportWidth + padding &&\n      screenPos.y > -padding &&\n      screenPos.y < this.viewportHeight + padding\n    );\n  }\n\n  getVisibleBounds(): { minX: number; maxX: number; minY: number; maxY: number } {\n    const topLeft = this.screenToWorld(createVector(0, 0));\n    const bottomRight = this.screenToWorld(createVector(this.viewportWidth, this.viewportHeight));\n\n    return {\n      minX: topLeft.x,\n      maxX: bottomRight.x,\n      minY: topLeft.y,\n      maxY: bottomRight.y,\n    };\n  }\n}\n","size_bytes":1926},"src/game/PlayerInventory.ts":{"content":"import { Weapon, Consumable, DroneType } from '../types/game';\n\nexport interface InventoryWeapon {\n  weapon: Weapon;\n  equipped: boolean;\n}\n\nexport interface InventoryDrone {\n  droneType: DroneType;\n  equipped: boolean;\n}\n\nexport class PlayerInventory {\n  private weapons: InventoryWeapon[] = [];\n  private drones: InventoryDrone[] = [];\n  private consumables: Consumable[] = [];\n  private readonly maxEquipped = 3;\n  private readonly maxEquippedDrones = 3;\n\n  addWeapon(weapon: Weapon): void {\n    this.weapons.push({\n      weapon,\n      equipped: false,\n    });\n  }\n\n  removeWeapon(weaponId: string): void {\n    this.weapons = this.weapons.filter((w) => w.weapon.id !== weaponId);\n  }\n\n  getWeapons(): InventoryWeapon[] {\n    return this.weapons;\n  }\n\n  getEquippedWeapons(): Weapon[] {\n    return this.weapons\n      .filter((w) => w.equipped)\n      .map((w) => w.weapon);\n  }\n\n  equipWeapon(weaponId: string): boolean {\n    const equippedCount = this.weapons.filter((w) => w.equipped).length;\n\n    if (equippedCount >= this.maxEquipped) {\n      return false;\n    }\n\n    const weapon = this.weapons.find((w) => w.weapon.id === weaponId);\n    if (weapon && !weapon.equipped) {\n      weapon.equipped = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  unequipWeapon(weaponId: string): void {\n    const weapon = this.weapons.find((w) => w.weapon.id === weaponId);\n    if (weapon) {\n      weapon.equipped = false;\n    }\n  }\n\n  isWeaponEquipped(weaponId: string): boolean {\n    const weapon = this.weapons.find((w) => w.weapon.id === weaponId);\n    return weapon?.equipped || false;\n  }\n\n  getMaxEquipped(): number {\n    return this.maxEquipped;\n  }\n\n  canEquipMore(): boolean {\n    const equippedCount = this.weapons.filter((w) => w.equipped).length;\n    return equippedCount < this.maxEquipped;\n  }\n\n  addConsumable(consumable: Consumable): void {\n    if (consumable.stackable) {\n      const existingStack = this.consumables.find(\n        (c) => c.name === consumable.name && c.stackable\n      );\n      if (existingStack) {\n        existingStack.quantity = (existingStack.quantity || 1) + (consumable.quantity || 1);\n        return;\n      }\n      this.consumables.push({ ...consumable, quantity: consumable.quantity || 1 });\n    } else {\n      this.consumables.push({ ...consumable, id: `${consumable.id}_${Date.now()}` });\n    }\n  }\n\n  removeConsumable(consumableId: string): void {\n    const index = this.consumables.findIndex((c) => c.id === consumableId);\n    if (index !== -1) {\n      const consumable = this.consumables[index];\n      if (consumable.stackable && consumable.quantity && consumable.quantity > 1) {\n        consumable.quantity -= 1;\n      } else {\n        this.consumables.splice(index, 1);\n      }\n    }\n  }\n\n  getConsumables(): Consumable[] {\n    return this.consumables;\n  }\n\n  getConsumable(consumableId: string): Consumable | undefined {\n    return this.consumables.find((c) => c.id === consumableId);\n  }\n\n  addDrone(droneType: DroneType): void {\n    const existingDrone = this.drones.find((d) => d.droneType === droneType);\n    if (!existingDrone) {\n      this.drones.push({\n        droneType,\n        equipped: false,\n      });\n    }\n  }\n\n  removeDrone(droneType: DroneType): void {\n    this.drones = this.drones.filter((d) => d.droneType !== droneType);\n  }\n\n  getDrones(): InventoryDrone[] {\n    return this.drones;\n  }\n\n  getEquippedDrones(): DroneType[] {\n    return this.drones\n      .filter((d) => d.equipped)\n      .map((d) => d.droneType);\n  }\n\n  equipDrone(droneType: DroneType): boolean {\n    const equippedCount = this.drones.filter((d) => d.equipped).length;\n\n    if (equippedCount >= this.maxEquippedDrones) {\n      return false;\n    }\n\n    const drone = this.drones.find((d) => d.droneType === droneType);\n    if (drone && !drone.equipped) {\n      drone.equipped = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  unequipDrone(droneType: DroneType): void {\n    const drone = this.drones.find((d) => d.droneType === droneType);\n    if (drone) {\n      drone.equipped = false;\n    }\n  }\n\n  isDroneEquipped(droneType: DroneType): boolean {\n    const drone = this.drones.find((d) => d.droneType === droneType);\n    return drone?.equipped || false;\n  }\n\n  getMaxEquippedDrones(): number {\n    return this.maxEquippedDrones;\n  }\n\n  canEquipMoreDrones(): boolean {\n    const equippedCount = this.drones.filter((d) => d.equipped).length;\n    return equippedCount < this.maxEquippedDrones;\n  }\n}\n","size_bytes":4441},"src/game/BiomeSystem.ts":{"content":"import { Vector2, Enemy } from '../types/game';\nimport { generateId } from './utils';\nimport { WorldGenerator, CHUNK_SIZE, ResourceType } from './WorldGeneration';\n\nexport interface BiomeParticle {\n  id: string;\n  position: Vector2;\n  velocity: Vector2;\n  size: number;\n  color: string;\n  lifetime: number;\n  maxLifetime: number;\n  type: 'snow' | 'ember' | 'leaf' | 'spark' | 'spore' | 'dust' | 'bubble';\n  opacity: number;\n}\n\nexport interface BiomeConfig {\n  id: string;\n  name: string;\n  backgroundColor: string;\n  floorColor: string;\n  gridColor: string;\n  accentColor: string;\n  particleColor: string;\n  theme: {\n    primaryColor: string;\n    secondaryColor: string;\n    dangerColor: string;\n  };\n  obstacleColors: string[];\n  resourceColors: {\n    [key in ResourceType]?: string;\n  };\n  particleSystem: {\n    type: BiomeParticle['type'];\n    spawnRate: number;\n    maxParticles: number;\n  };\n  environmentalEffects: {\n    fog?: { density: number; color: string };\n    wind?: { strength: number; direction: number };\n    lighting?: { ambient: number; contrast: number };\n  };\n  uniqueEnemyTypes: Array<Enemy['type']>;\n  uniqueResources: Array<ResourceType>;\n  transitionDistance: number;\n}\n\nexport const BIOMES: BiomeConfig[] = [\n  {\n    id: 'frozen-tundra',\n    name: 'Frozen Tundra',\n    backgroundColor: '#0a1929',\n    floorColor: '#1a2942',\n    gridColor: '#60a5fa40',\n    accentColor: '#60a5fa',\n    particleColor: '#93c5fd',\n    theme: {\n      primaryColor: '#60a5fa',\n      secondaryColor: '#93c5fd',\n      dangerColor: '#3b82f6',\n    },\n    obstacleColors: ['#475569', '#64748b', '#94a3b8', '#526A8A', '#3B597A'],\n    resourceColors: {\n      cryoKelp: '#7dd3fc',\n      alloyFragments: '#94a3b8',\n      energy: '#bae6fd',\n    },\n    particleSystem: {\n      type: 'snow',\n      spawnRate: 0.5,\n      maxParticles: 80,\n    },\n    environmentalEffects: {\n      wind: { strength: 0.5, direction: Math.PI / 4 },\n      lighting: { ambient: 0.9, contrast: 1.2 },\n    },\n    uniqueEnemyTypes: ['tank', 'grunt', 'weaver'],\n    uniqueResources: ['cryoKelp', 'alloyFragments'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'volcanic-wastes',\n    name: 'Volcanic Wastes',\n    backgroundColor: '#1f0a0a',\n    floorColor: '#3f1a0a',\n    gridColor: '#fb923c40',\n    accentColor: '#f97316',\n    particleColor: '#fb923c',\n    theme: {\n      primaryColor: '#f97316',\n      secondaryColor: '#fdba74',\n      dangerColor: '#dc2626',\n    },\n    obstacleColors: ['#7c2d12', '#9a3412', '#c2410c', '#5A1D0C', '#E55A0C'],\n    resourceColors: {\n      obsidianHeart: '#fb923c',\n      alloyFragments: '#ea580c',\n      energy: '#f97316',\n    },\n    particleSystem: { type: 'ember', spawnRate: 0.3, maxParticles: 60 },\n    environmentalEffects: {\n      fog: { density: 0.15, color: '#9a3412' },\n      lighting: { ambient: 1.1, contrast: 1.3 },\n    },\n    uniqueEnemyTypes: ['artillery', 'dasher', 'grunt'],\n    uniqueResources: ['obsidianHeart', 'alloyFragments'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'toxic-swamp',\n    name: 'Toxic Swamp',\n    backgroundColor: '#0f1a0a',\n    floorColor: '#1a2a12',\n    gridColor: '#a3e63540',\n    accentColor: '#84cc16',\n    particleColor: '#a3e635',\n    theme: {\n      primaryColor: '#84cc16',\n      secondaryColor: '#bef264',\n      dangerColor: '#65a30d',\n    },\n    obstacleColors: ['#365314', '#3f6212', '#4d7c0f', '#2A400F', '#6A9915'],\n    resourceColors: { gloomRoot: '#a3e635', coreDust: '#4d7c0f', energy: '#bef264' },\n    particleSystem: { type: 'spore', spawnRate: 0.4, maxParticles: 70 },\n    environmentalEffects: {\n      fog: { density: 0.25, color: '#365314' },\n      lighting: { ambient: 0.85, contrast: 1.1 },\n    },\n    uniqueEnemyTypes: ['weaver', 'burst', 'laser'],\n    uniqueResources: ['gloomRoot', 'coreDust'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'crystal-caverns',\n    name: 'Crystal Caverns',\n    backgroundColor: '#0a1a1f',\n    floorColor: '#1a2a3f',\n    gridColor: '#22d3ee40',\n    accentColor: '#06b6d4',\n    particleColor: '#22d3ee',\n    theme: {\n      primaryColor: '#06b6d4',\n      secondaryColor: '#67e8f9',\n      dangerColor: '#0e7490',\n    },\n    obstacleColors: ['#155e75', '#0e7490', '#0891b2', '#0E6A80', '#164e63'],\n    resourceColors: { resonantCrystal: '#22d3ee', geoShards: '#67e8f9', energy: '#a5f3fc' },\n    particleSystem: { type: 'spark', spawnRate: 0.35, maxParticles: 50 },\n    environmentalEffects: { lighting: { ambient: 1.15, contrast: 1.4 } },\n    uniqueEnemyTypes: ['sniper', 'speedy', 'burst'],\n    uniqueResources: ['resonantCrystal', 'geoShards'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'void-nebula',\n    name: 'Void Nebula',\n    backgroundColor: '#1a0a2e',\n    floorColor: '#2a1a3e',\n    gridColor: '#c084fc40',\n    accentColor: '#a855f7',\n    particleColor: '#c084fc',\n    theme: {\n      primaryColor: '#a855f7',\n      secondaryColor: '#c084fc',\n      dangerColor: '#7e22ce',\n    },\n    obstacleColors: ['#6b21a8', '#7e22ce', '#9333ea', '#581c87', '#A040F0'],\n    resourceColors: { voidEssence: '#c084fc', flux: '#a855f7', energy: '#e9d5ff' },\n    particleSystem: { type: 'dust', spawnRate: 0.6, maxParticles: 90 },\n    environmentalEffects: {\n      fog: { density: 0.2, color: '#6b21a8' },\n      lighting: { ambient: 0.95, contrast: 1.5 },\n    },\n    uniqueEnemyTypes: ['laser', 'tank', 'artillery'],\n    uniqueResources: ['voidEssence', 'flux'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'coral-depths',\n    name: 'Coral Depths',\n    backgroundColor: '#0a1f29',\n    floorColor: '#1a2f42',\n    gridColor: '#5eead440',\n    accentColor: '#14b8a6',\n    particleColor: '#5eead4',\n    theme: {\n      primaryColor: '#14b8a6',\n      secondaryColor: '#5eead4',\n      dangerColor: '#0f766e',\n    },\n    obstacleColors: ['#115e59', '#0f766e', '#14b8a6', '#0C4B4A', '#2dd4bf'],\n    resourceColors: { bioluminescentPearl: '#5eead4', coreDust: '#2dd4bf', energy: '#99f6e4' },\n    particleSystem: { type: 'bubble', spawnRate: 0.25, maxParticles: 40 },\n    environmentalEffects: {\n      fog: { density: 0.3, color: '#115e59' },\n      lighting: { ambient: 0.8, contrast: 1.0 },\n    },\n    uniqueEnemyTypes: ['weaver', 'speedy', 'dasher'],\n    uniqueResources: ['bioluminescentPearl', 'coreDust'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'radiant-gardens',\n    name: 'Radiant Gardens',\n    backgroundColor: '#0a1f1a',\n    floorColor: '#1a3f2a',\n    gridColor: '#34d39940',\n    accentColor: '#10b981',\n    particleColor: '#6ee7b7',\n    theme: {\n      primaryColor: '#10b981',\n      secondaryColor: '#6ee7b7',\n      dangerColor: '#059669',\n    },\n    obstacleColors: ['#064e3b', '#047857', '#059669', '#065f46', '#022c22'],\n    resourceColors: { sunpetalBloom: '#fde047', geoShards: '#6ee7b7', energy: '#a7f3d0' },\n    particleSystem: { type: 'leaf', spawnRate: 0.4, maxParticles: 70 },\n    environmentalEffects: {\n      lighting: { ambient: 1.2, contrast: 1.1 },\n    },\n    uniqueEnemyTypes: ['speedy', 'burst', 'weaver'],\n    uniqueResources: ['sunpetalBloom', 'geoShards'],\n    transitionDistance: 2000,\n  },\n  {\n    id: 'shattered-expanse',\n    name: 'Shattered Expanse',\n    backgroundColor: '#1e1b4b',\n    floorColor: '#312e81',\n    gridColor: '#818cf840',\n    accentColor: '#6366f1',\n    particleColor: '#a5b4fc',\n    theme: {\n      primaryColor: '#6366f1',\n      secondaryColor: '#a5b4fc',\n      dangerColor: '#4338ca',\n    },\n    obstacleColors: ['#4338ca', '#4f46e5', '#6366f1', '#3730a3', '#312e81'],\n    resourceColors: { aetheriumShard: '#a5b4fc', flux: '#818cf8', energy: '#c7d2fe' },\n    particleSystem: { type: 'spark', spawnRate: 0.5, maxParticles: 60 },\n    environmentalEffects: {\n      wind: { strength: 0.8, direction: Math.PI },\n      lighting: { ambient: 1.0, contrast: 1.6 },\n    },\n    uniqueEnemyTypes: ['dasher', 'sniper', 'laser'],\n    uniqueResources: ['aetheriumShard', 'flux'],\n    transitionDistance: 2000,\n  },\n];\n\nexport class BiomeManager {\n  private currentBiomeIndex: number = 0;\n  private previousBiomeIndex: number = 0;\n  private transitionProgress: number = 1.0;\n  private readonly transitionDuration: number = 3.0; // 3 seconds for a smoother transition\n  private environmentalParticles: BiomeParticle[] = [];\n  private particleSpawnTimer: number = 0;\n  private lastNotifiedBiome: string | null = null;\n  private worldGenerator?: WorldGenerator;\n\n  public setWorldGenerator(worldGenerator: WorldGenerator) {\n    this.worldGenerator = worldGenerator;\n  }\n\n  getBiomes(): BiomeConfig[] {\n    return BIOMES;\n  }\n\n  getBiomeByIndex(index: number): BiomeConfig {\n    return BIOMES[index] || BIOMES[0];\n  }\n\n  getCurrentBiome(): BiomeConfig {\n    return BIOMES[this.currentBiomeIndex];\n  }\n\n  updateBiome(playerPosition: Vector2, onBiomeChange?: (biome: BiomeConfig) => void): void {\n    if (!this.worldGenerator) return;\n\n    const chunkX = Math.floor(playerPosition.x / CHUNK_SIZE);\n    const chunkY = Math.floor(playerPosition.y / CHUNK_SIZE);\n\n    const newBiomeIndex = this.worldGenerator.getOrAssignChunkBiomeIndex(chunkX, chunkY);\n\n    if (newBiomeIndex !== this.currentBiomeIndex) {\n      this.previousBiomeIndex = this.currentBiomeIndex;\n      this.currentBiomeIndex = newBiomeIndex;\n      this.transitionProgress = 0; // Start transition\n      const newBiome = this.getCurrentBiome();\n\n      if (this.lastNotifiedBiome !== newBiome.id) {\n        if (onBiomeChange) {\n          onBiomeChange(newBiome);\n        }\n        this.lastNotifiedBiome = newBiome.id;\n      }\n\n      this.environmentalParticles = [];\n    }\n  }\n\n  update(deltaTime: number, canvasWidth: number, canvasHeight: number, cameraOffset: Vector2): void {\n    // Update transition\n    if (this.transitionProgress < 1.0) {\n      this.transitionProgress = Math.min(1.0, this.transitionProgress + deltaTime / this.transitionDuration);\n    }\n\n    // Update particles\n    const biome = this.getCurrentBiome();\n    this.particleSpawnTimer += deltaTime;\n    if (this.particleSpawnTimer >= biome.particleSystem.spawnRate && this.environmentalParticles.length < biome.particleSystem.maxParticles) {\n      this.spawnEnvironmentalParticle(canvasWidth, canvasHeight, cameraOffset);\n      this.particleSpawnTimer = 0;\n    }\n\n    this.environmentalParticles = this.environmentalParticles.filter(particle => {\n      particle.position.x += particle.velocity.x * deltaTime * 60;\n      particle.position.y += particle.velocity.y * deltaTime * 60;\n      particle.lifetime -= deltaTime;\n      const screenX = particle.position.x - cameraOffset.x;\n      const screenY = particle.position.y - cameraOffset.y;\n      if (screenX < -50 || screenX > canvasWidth + 50 || screenY < -50 || screenY > canvasHeight + 50) {\n        return false;\n      }\n      return particle.lifetime > 0;\n    });\n  }\n\n  private spawnEnvironmentalParticle(canvasWidth: number, canvasHeight: number, cameraOffset: Vector2): void {\n    const biome = this.getCurrentBiome();\n    const side = Math.floor(Math.random() * 4);\n    let x = 0, y = 0;\n\n    switch (side) {\n      case 0: x = cameraOffset.x + Math.random() * canvasWidth; y = cameraOffset.y - 20; break;\n      case 1: x = cameraOffset.x + canvasWidth + 20; y = cameraOffset.y + Math.random() * canvasHeight; break;\n      case 2: x = cameraOffset.x + Math.random() * canvasWidth; y = cameraOffset.y + canvasHeight + 20; break;\n      case 3: x = cameraOffset.x - 20; y = cameraOffset.y + Math.random() * canvasHeight; break;\n    }\n\n    let velocity = { x: 0, y: 0 };\n    let size = 2;\n    let lifetime = 5;\n\n    switch (biome.particleSystem.type) {\n      case 'snow': velocity = { x: (Math.random() - 0.5) * 0.5, y: Math.random() * 0.5 + 0.3 }; size = Math.random() * 3 + 1; lifetime = 10; break;\n      case 'ember': velocity = { x: (Math.random() - 0.5) * 0.3, y: -Math.random() * 0.8 - 0.5 }; size = Math.random() * 4 + 2; lifetime = 4; break;\n      case 'spore': velocity = { x: (Math.random() - 0.5) * 0.4, y: (Math.random() - 0.5) * 0.4 }; size = Math.random() * 3 + 2; lifetime = 8; break;\n      case 'spark': velocity = { x: (Math.random() - 0.5) * 1.5, y: (Math.random() - 0.5) * 1.5 }; size = Math.random() * 2 + 1; lifetime = 2; break;\n      case 'dust': velocity = { x: (Math.random() - 0.5) * 0.2, y: (Math.random() - 0.5) * 0.2 }; size = Math.random() * 2 + 1; lifetime = 15; break;\n      case 'bubble': velocity = { x: (Math.random() - 0.5) * 0.3, y: -Math.random() * 0.5 - 0.2 }; size = Math.random() * 5 + 3; lifetime = 6; break;\n      case 'leaf': velocity = { x: (Math.random() - 0.5) * 0.6, y: Math.random() * 0.4 + 0.2 }; size = Math.random() * 4 + 2; lifetime = 7; break;\n    }\n\n    const particle: BiomeParticle = {\n      id: generateId(),\n      position: { x, y },\n      velocity,\n      size,\n      color: biome.particleColor,\n      lifetime,\n      maxLifetime: lifetime,\n      type: biome.particleSystem.type,\n      opacity: 0.6,\n    };\n    this.environmentalParticles.push(particle);\n  }\n\n  getEnvironmentalParticles(): BiomeParticle[] {\n    return this.environmentalParticles;\n  }\n\n  private interpolateColor(color1: string, color2: string, factor: number): string {\n    const hexToRgb = (hex: string) => {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n        a: result[4] ? parseInt(result[4], 16) / 255 : 1\n      } : { r: 0, g: 0, b: 0, a: 1 };\n    };\n\n    const c1 = hexToRgb(color1);\n    const c2 = hexToRgb(color2);\n\n    const r = Math.round(c1.r + factor * (c2.r - c1.r));\n    const g = Math.round(c1.g + factor * (c2.g - c1.g));\n    const b = Math.round(c1.b + factor * (c2.b - c1.b));\n    const a = c1.a + factor * (c2.a - c1.a);\n\n    const componentToHex = (c: number) => {\n      const hex = c.toString(16);\n      return hex.length === 1 ? \"0\" + hex : hex;\n    };\n    \n    const alphaToHex = (a: number) => {\n        const hex = Math.round(a * 255).toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n\n    return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}${alphaToHex(a)}`;\n  }\n\n  getDisplayColors(): { backgroundColor: string; floorColor: string; gridColor: string } {\n    if (this.transitionProgress >= 1.0) {\n      const biome = this.getCurrentBiome();\n      return {\n        backgroundColor: biome.backgroundColor,\n        floorColor: biome.floorColor,\n        gridColor: biome.gridColor,\n      };\n    }\n\n    const fromBiome = this.getBiomeByIndex(this.previousBiomeIndex);\n    const toBiome = this.getCurrentBiome();\n    const easeFactor = this.transitionProgress * this.transitionProgress * (3 - 2 * this.transitionProgress); // Ease-in-out\n\n    return {\n      backgroundColor: this.interpolateColor(fromBiome.backgroundColor, toBiome.backgroundColor, easeFactor),\n      floorColor: this.interpolateColor(fromBiome.floorColor, toBiome.floorColor, easeFactor),\n      gridColor: this.interpolateColor(fromBiome.gridColor, toBiome.gridColor, easeFactor),\n    };\n  }\n\n  modifyEnemyForBiome(enemy: Enemy, biome: BiomeConfig): Enemy {\n    // This function can be used later to apply biome-specific effects,\n    // but for now, it just returns the enemy as-is to prevent color overrides.\n    return {\n      ...enemy,\n      // Example of a potential future modifier:\n      // speed: enemy.speed * (biome.speedModifier || 1),\n    };\n  }\n\n  reset(): void {\n    this.currentBiomeIndex = 0;\n    this.environmentalParticles = [];\n    this.particleSpawnTimer = 0;\n    this.lastNotifiedBiome = null;\n  }\n}\n","size_bytes":15460},"src/game/Pathfinding.ts":{"content":"import { Vector2 } from '../types/game';\nimport { Obstacle } from './Environments';\nimport { vectorDistance, vectorNormalize, vectorSubtract, createVector } from './utils';\nimport { checkCircleRectCollision, checkCircleCircleCollision } from './CollisionSystem';\n\nexport function findPathAroundObstacles(\n  start: Vector2,\n  target: Vector2,\n  obstacles: Obstacle[],\n  entityRadius: number\n): Vector2 {\n  const directPath = vectorSubtract(target, start);\n  const distance = Math.sqrt(directPath.x * directPath.x + directPath.y * directPath.y);\n\n  if (distance === 0) return createVector();\n\n  const normalized = vectorNormalize(directPath);\n\n  const blockingObstacle = findBlockingObstacle(start, target, obstacles, entityRadius);\n\n  if (!blockingObstacle) {\n    return normalized;\n  }\n\n  const avoidanceDirection = calculateAvoidanceDirection(\n    start,\n    target,\n    blockingObstacle,\n    entityRadius\n  );\n\n  return vectorNormalize(avoidanceDirection);\n}\n\nfunction findBlockingObstacle(\n  start: Vector2,\n  target: Vector2,\n  obstacles: Obstacle[],\n  entityRadius: number\n): Obstacle | null {\n  const direction = vectorSubtract(target, start);\n  const distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n\n  if (distance === 0) return null;\n\n  const steps = Math.ceil(distance / 10);\n\n  for (const obstacle of obstacles) {\n    for (let i = 1; i <= steps; i++) {\n      const t = i / steps;\n      const checkPoint = {\n        x: start.x + direction.x * t,\n        y: start.y + direction.y * t,\n      };\n\n      const collides =\n        obstacle.shape === 'circle'\n          ? checkCircleCircleCollision(\n              checkPoint,\n              entityRadius,\n              obstacle.position,\n              obstacle.size.x / 2\n            )\n          : checkCircleRectCollision(\n              checkPoint,\n              entityRadius,\n              obstacle.position,\n              obstacle.size,\n              obstacle.rotation\n            );\n\n      if (collides) {\n        return obstacle;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction calculateAvoidanceDirection(\n  start: Vector2,\n  target: Vector2,\n  obstacle: Obstacle,\n  entityRadius: number\n): Vector2 {\n  const toTarget = vectorSubtract(target, start);\n  const toObstacle = vectorSubtract(obstacle.position, start);\n\n  const perpendicular = { x: -toObstacle.y, y: toObstacle.x };\n\n  const dotProduct = toTarget.x * perpendicular.x + toTarget.y * perpendicular.y;\n  const avoidDirection = dotProduct >= 0 ? perpendicular : { x: -perpendicular.x, y: -perpendicular.y };\n\n  const obstacleSize = obstacle.shape === 'circle'\n    ? obstacle.size.x / 2\n    : Math.max(obstacle.size.x, obstacle.size.y) / 2;\n\n  const avoidanceWeight = 1 / (vectorDistance(start, obstacle.position) / (obstacleSize + entityRadius + 50));\n\n  const blended = {\n    x: toTarget.x * 0.3 + avoidDirection.x * avoidanceWeight * 0.7,\n    y: toTarget.y * 0.3 + avoidDirection.y * avoidanceWeight * 0.7,\n  };\n\n  return blended;\n}\n","size_bytes":2977},"src/components/TouchControls.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Sword, Zap } from 'lucide-react';\n\ninterface TouchControlsProps {\n  onMove: (x: number, y: number) => void;\n  onShoot: (x: number, y: number, active: boolean) => void;\n  onDash: () => void;\n  onInteract: () => void;\n  onWeaponSwitch: (index: number) => void;\n  weaponCount: number;\n  isVisible: boolean;\n  onToggleVisibility: () => void;\n}\n\ninterface JoystickState {\n  x: number;\n  y: number;\n  active: boolean;\n  startX: number;\n  startY: number;\n}\n\nexport default function TouchControls({\n  onMove,\n  onShoot,\n  onDash,\n  onInteract,\n  onWeaponSwitch,\n  weaponCount,\n  isVisible,\n  onToggleVisibility,\n}: TouchControlsProps) {\n  const [moveJoystick, setMoveJoystick] = useState<JoystickState>({\n    x: 0,\n    y: 0,\n    active: false,\n    startX: 0,\n    startY: 0,\n  });\n\n  const [shootJoystick, setShootJoystick] = useState<JoystickState>({\n    x: 0,\n    y: 0,\n    active: false,\n    startX: 0,\n    startY: 0,\n  });\n\n  const moveZoneRef = useRef<HTMLDivElement>(null);\n  const shootZoneRef = useRef<HTMLDivElement>(null);\n  const moveActiveTouchId = useRef<number | null>(null);\n  const shootActiveTouchId = useRef<number | null>(null);\n\n  const JOYSTICK_MAX_DISTANCE = 50;\n\n  const onMoveRef = useRef(onMove);\n  const onShootRef = useRef(onShoot);\n  \n  useEffect(() => {\n    onMoveRef.current = onMove;\n    onShootRef.current = onShoot;\n  }, [onMove, onShoot]);\n\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      Array.from(e.changedTouches).forEach((touch) => {\n        const target = document.elementFromPoint(touch.clientX, touch.clientY);\n\n        if (moveZoneRef.current?.contains(target) && moveActiveTouchId.current === null) {\n          e.preventDefault();\n          const rect = moveZoneRef.current.getBoundingClientRect();\n          const centerX = rect.left + rect.width / 2;\n          const centerY = rect.top + rect.height / 2;\n\n          moveActiveTouchId.current = touch.identifier;\n          setMoveJoystick({\n            x: 0,\n            y: 0,\n            active: true,\n            startX: centerX,\n            startY: centerY,\n          });\n        }\n\n        if (shootZoneRef.current?.contains(target) && shootActiveTouchId.current === null) {\n          e.preventDefault();\n          const rect = shootZoneRef.current.getBoundingClientRect();\n          const centerX = rect.left + rect.width / 2;\n          const centerY = rect.top + rect.height / 2;\n\n          shootActiveTouchId.current = touch.identifier;\n          setShootJoystick({\n            x: 0,\n            y: 0,\n            active: true,\n            startX: centerX,\n            startY: centerY,\n          });\n        }\n      });\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      let needsPreventDefault = false;\n      \n      Array.from(e.changedTouches).forEach((touch) => {\n        if (touch.identifier === moveActiveTouchId.current) {\n          needsPreventDefault = true;\n          const currentJoystick = moveJoystick.active ? moveJoystick : \n            { startX: moveZoneRef.current!.getBoundingClientRect().left + 64, \n              startY: moveZoneRef.current!.getBoundingClientRect().top + 64 };\n          \n          const dx = touch.clientX - currentJoystick.startX;\n          const dy = touch.clientY - currentJoystick.startY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const clampedDistance = Math.min(distance, JOYSTICK_MAX_DISTANCE);\n          const angle = Math.atan2(dy, dx);\n\n          const clampedX = Math.cos(angle) * clampedDistance;\n          const clampedY = Math.sin(angle) * clampedDistance;\n\n          setMoveJoystick((prev) => ({\n            ...prev,\n            x: clampedX,\n            y: clampedY,\n          }));\n\n          onMoveRef.current(clampedX / JOYSTICK_MAX_DISTANCE, clampedY / JOYSTICK_MAX_DISTANCE);\n        }\n\n        if (touch.identifier === shootActiveTouchId.current) {\n          needsPreventDefault = true;\n          const currentJoystick = shootJoystick.active ? shootJoystick :\n            { startX: shootZoneRef.current!.getBoundingClientRect().left + 64,\n              startY: shootZoneRef.current!.getBoundingClientRect().top + 64 };\n              \n          const dx = touch.clientX - currentJoystick.startX;\n          const dy = touch.clientY - currentJoystick.startY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const clampedDistance = Math.min(distance, JOYSTICK_MAX_DISTANCE);\n          const angle = Math.atan2(dy, dx);\n\n          const clampedX = Math.cos(angle) * clampedDistance;\n          const clampedY = Math.sin(angle) * clampedDistance;\n\n          setShootJoystick((prev) => ({\n            ...prev,\n            x: clampedX,\n            y: clampedY,\n          }));\n\n          onShootRef.current(clampedX / JOYSTICK_MAX_DISTANCE, clampedY / JOYSTICK_MAX_DISTANCE, true);\n        }\n      });\n      \n      if (needsPreventDefault) {\n        e.preventDefault();\n      }\n    };\n\n    const handleTouchEnd = (e: TouchEvent) => {\n      Array.from(e.changedTouches).forEach((touch) => {\n        if (touch.identifier === moveActiveTouchId.current) {\n          moveActiveTouchId.current = null;\n          setMoveJoystick({\n            x: 0,\n            y: 0,\n            active: false,\n            startX: 0,\n            startY: 0,\n          });\n          onMoveRef.current(0, 0);\n        }\n\n        if (touch.identifier === shootActiveTouchId.current) {\n          shootActiveTouchId.current = null;\n          setShootJoystick({\n            x: 0,\n            y: 0,\n            active: false,\n            startX: 0,\n            startY: 0,\n          });\n          onShootRef.current(0, 0, false);\n        }\n      });\n    };\n\n    document.addEventListener('touchstart', handleTouchStart, { passive: false });\n    document.addEventListener('touchmove', handleTouchMove, { passive: false });\n    document.addEventListener('touchend', handleTouchEnd, { passive: true });\n    document.addEventListener('touchcancel', handleTouchEnd, { passive: true });\n\n    return () => {\n      document.removeEventListener('touchstart', handleTouchStart);\n      document.removeEventListener('touchmove', handleTouchMove);\n      document.removeEventListener('touchend', handleTouchEnd);\n      document.removeEventListener('touchcancel', handleTouchEnd);\n    };\n  }, [isVisible, moveJoystick.active, moveJoystick.startX, moveJoystick.startY, shootJoystick.active, shootJoystick.startX, shootJoystick.startY]);\n\n  if (!isVisible) {\n    return (\n      <button\n        onClick={onToggleVisibility}\n        className=\"fixed bottom-4 left-1/2 -translate-x-1/2 z-50 bg-slate-800/90 backdrop-blur-sm border-2 border-cyan-500/50 rounded-full p-3 shadow-lg\"\n      >\n        <span className=\"text-xs text-cyan-300 font-bold px-2\">SHOW TOUCH CONTROLS</span>\n      </button>\n    );\n  }\n\n  return (\n    <>\n      <button\n        onClick={onToggleVisibility}\n        className=\"fixed top-20 left-1/2 -translate-x-1/2 z-50 bg-slate-800/70 backdrop-blur-sm border border-cyan-500/30 rounded-full px-3 py-1 shadow-lg\"\n      >\n        <span className=\"text-xs text-slate-400\">Hide Controls</span>\n      </button>\n\n      <div\n        ref={moveZoneRef}\n        className=\"fixed bottom-8 left-8 z-50 w-32 h-32 bg-slate-800/50 backdrop-blur-sm border-2 border-cyan-500/30 rounded-full flex items-center justify-center touch-none\"\n        style={{ pointerEvents: 'auto' }}\n      >\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-24 h-24 border border-cyan-500/20 rounded-full\" />\n        </div>\n        {moveJoystick.active && (\n          <div\n            className=\"absolute w-12 h-12 bg-cyan-500/60 rounded-full border-2 border-cyan-300 shadow-lg transition-transform\"\n            style={{\n              transform: `translate(${moveJoystick.x}px, ${moveJoystick.y}px)`,\n            }}\n          />\n        )}\n        {!moveJoystick.active && (\n          <div className=\"w-12 h-12 bg-cyan-500/30 rounded-full border-2 border-cyan-400/50\" />\n        )}\n        <span className=\"absolute -bottom-6 text-xs text-slate-400 font-bold\">MOVE</span>\n      </div>\n\n      <div\n        ref={shootZoneRef}\n        className=\"fixed bottom-8 right-8 z-50 w-32 h-32 bg-slate-800/50 backdrop-blur-sm border-2 border-red-500/30 rounded-full flex items-center justify-center touch-none\"\n        style={{ pointerEvents: 'auto' }}\n      >\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-24 h-24 border border-red-500/20 rounded-full\" />\n        </div>\n        {shootJoystick.active && (\n          <div\n            className=\"absolute w-12 h-12 bg-red-500/60 rounded-full border-2 border-red-300 shadow-lg transition-transform\"\n            style={{\n              transform: `translate(${shootJoystick.x}px, ${shootJoystick.y}px)`,\n            }}\n          />\n        )}\n        {!shootJoystick.active && (\n          <div className=\"w-12 h-12 bg-red-500/30 rounded-full border-2 border-red-400/50\" />\n        )}\n        <span className=\"absolute -bottom-6 text-xs text-slate-400 font-bold\">AIM</span>\n      </div>\n\n      <div className=\"fixed bottom-48 left-8 z-50 flex flex-col gap-2\">\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onDash();\n          }}\n          className=\"w-16 h-16 bg-slate-800/70 backdrop-blur-sm border-2 border-yellow-500/50 rounded-full flex items-center justify-center shadow-lg active:bg-yellow-500/30 transition-colors touch-none\"\n        >\n          <Zap className=\"w-6 h-6 text-yellow-400\" />\n        </button>\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onInteract();\n          }}\n          className=\"w-16 h-16 bg-slate-800/70 backdrop-blur-sm border-2 border-purple-500/50 rounded-full flex items-center justify-center shadow-lg active:bg-purple-500/30 transition-colors touch-none\"\n        >\n          <span className=\"text-xl font-bold text-purple-400\">F</span>\n        </button>\n      </div>\n\n      <div className=\"fixed bottom-48 right-8 z-50 flex flex-col gap-2\">\n        {Array.from({ length: Math.min(weaponCount, 4) }).map((_, i) => (\n          <button\n            key={i}\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onWeaponSwitch(i);\n            }}\n            className=\"w-12 h-12 bg-slate-800/70 backdrop-blur-sm border-2 border-cyan-500/50 rounded-lg flex items-center justify-center shadow-lg active:bg-cyan-500/30 transition-colors text-sm font-bold text-cyan-300 touch-none\"\n          >\n            {i + 1}\n          </button>\n        ))}\n      </div>\n    </>\n  );\n}\n","size_bytes":10711},"src/game/CraftingSystem.ts":{"content":"import { CraftingRecipe, Consumable, Player, DroneType } from '../types/game';\n\nexport class CraftingSystem {\n  private recipes: CraftingRecipe[] = [];\n  private discoveredRecipes: Set<string> = new Set();\n\n  constructor() {\n    this.initializeRecipes();\n  }\n\n  private initializeRecipes(): void {\n    const healingPackRecipe: CraftingRecipe = {\n      id: 'healing_pack',\n      name: 'Minor Healing Pack',\n      description: 'Restores 10 HP when used',\n      ingredients: [\n        { resource: 'energy', amount: 3 },\n        { resource: 'coreDust', amount: 1 },\n        { resource: 'flux', amount: 2 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'healing_pack',\n          name: 'Minor Healing Pack',\n          description: 'Restores 10 HP',\n          effect: 'heal',\n          value: 10,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['energy', 'energy'], ['coreDust'], ['energy']],\n        [['flux'], null, ['flux']],\n        [null, null, null],\n      ],\n      patternDescription: 'Row 1: [Energy x2][Core Dust][Energy] | Row 2: [Flux][Empty][Flux]',\n    };\n\n    const mediumHealingPackRecipe: CraftingRecipe = {\n      id: 'medium_healing_pack',\n      name: 'Medium Healing Pack',\n      description: 'Restores 25 HP when used',\n      ingredients: [\n        { resource: 'energy', amount: 3 },\n        { resource: 'coreDust', amount: 3 },\n        { resource: 'flux', amount: 3 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'medium_healing_pack',\n          name: 'Medium Healing Pack',\n          description: 'Restores 25 HP',\n          effect: 'heal',\n          value: 25,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['flux'], ['coreDust'], ['flux']],\n        [['energy'], ['coreDust'], ['energy']],\n        [['flux'], ['coreDust'], ['energy']],\n      ],\n      patternDescription: 'Row 1: [Flux][Core Dust][Flux] | Row 2: [Energy][Core Dust][Energy] | Row 3: [Flux][Core Dust][Energy]',\n    };\n\n    const largeHealingPackRecipe: CraftingRecipe = {\n      id: 'large_healing_pack',\n      name: 'Large Healing Pack',\n      description: 'Restores 50 HP when used',\n      ingredients: [\n        { resource: 'energy', amount: 5 },\n        { resource: 'coreDust', amount: 5 },\n        { resource: 'alloyFragments', amount: 3 },\n        { resource: 'geoShards', amount: 2 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'large_healing_pack',\n          name: 'Large Healing Pack',\n          description: 'Restores 50 HP',\n          effect: 'heal',\n          value: 50,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['geoShards'], ['alloyFragments'], ['geoShards']],\n        [['energy'], ['coreDust', 'coreDust'], ['energy']],\n        [['energy'], ['alloyFragments'], ['energy']],\n      ],\n      patternDescription: 'Row 1: [Geo Shards][Alloy][Geo Shards] | Row 2: [Energy][Core Dust x2][Energy] | Row 3: [Energy][Alloy][Energy]',\n    };\n\n    const energyBoostRecipe: CraftingRecipe = {\n      id: 'energy_boost',\n      name: 'Energy Boost',\n      description: 'Restores 5 HP over time',\n      ingredients: [\n        { resource: 'energy', amount: 8 },\n        { resource: 'flux', amount: 2 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'energy_boost',\n          name: 'Energy Boost',\n          description: 'Restores 5 HP',\n          effect: 'heal',\n          value: 5,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['energy'], ['energy'], ['energy']],\n        [['energy'], ['flux'], ['energy']],\n        [['energy'], ['flux'], ['energy']],\n      ],\n      patternDescription: 'Row 1: [Energy][Energy][Energy] | Row 2: [Energy][Flux][Energy] | Row 3: [Energy][Flux][Energy]',\n    };\n\n    const shieldPackRecipe: CraftingRecipe = {\n      id: 'shield_pack',\n      name: 'Shield Pack',\n      description: 'Provides temporary shield (Coming Soon)',\n      ingredients: [\n        { resource: 'alloyFragments', amount: 5 },\n        { resource: 'geoShards', amount: 3 },\n        { resource: 'flux', amount: 4 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'shield_pack',\n          name: 'Shield Pack',\n          description: 'Adds +10 temporary HP',\n          effect: 'heal',\n          value: 10,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['alloyFragments'], ['geoShards'], ['alloyFragments']],\n        [['flux'], ['geoShards'], ['flux']],\n        [['alloyFragments'], ['flux', 'flux'], ['alloyFragments']],\n      ],\n      patternDescription: 'Row 1: [Alloy][Geo Shards][Alloy] | Row 2: [Flux][Geo Shards][Flux] | Row 3: [Alloy][Flux x2][Alloy]',\n    };\n\n    const biomeElixirRecipe: CraftingRecipe = {\n      id: 'biome_elixir',\n      name: 'Biome Elixir',\n      description: 'Restores 15 HP using rare biome resources',\n      ingredients: [\n        { resource: 'cryoKelp', amount: 2 },\n        { resource: 'obsidianHeart', amount: 1 },\n        { resource: 'gloomRoot', amount: 2 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'biome_elixir',\n          name: 'Biome Elixir',\n          description: 'Restores 15 HP',\n          effect: 'heal',\n          value: 15,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [['cryoKelp'], null, ['cryoKelp']],\n        [null, ['obsidianHeart'], null],\n        [['gloomRoot'], null, ['gloomRoot']],\n      ],\n      patternDescription: 'Row 1: [Cryo Kelp][Empty][Cryo Kelp] | Row 2: [Empty][Obsidian Heart][Empty] | Row 3: [Gloom Root][Empty][Gloom Root]',\n    };\n\n    const crateKeyRecipe: CraftingRecipe = {\n      id: 'crate_key',\n      name: 'Crate Key',\n      description: 'Unlocks locked crates',\n      ingredients: [\n        { resource: 'alloyFragments', amount: 3 },\n        { resource: 'geoShards', amount: 2 },\n        { resource: 'energy', amount: 5 },\n      ],\n      output: {\n        type: 'consumable',\n        item: {\n          id: 'crate_key_item',\n          name: 'Crate Key',\n          description: 'Used to unlock locked crates',\n          effect: 'key',\n          value: 1,\n          stackable: true,\n        },\n      },\n      gridPattern: [\n        [null, ['alloyFragments'], null],\n        [['geoShards'], ['alloyFragments'], ['geoShards']],\n        [['energy', 'energy'], ['alloyFragments'], ['energy', 'energy', 'energy']],\n      ],\n      patternDescription: 'Row 1: [Empty][Alloy][Empty] | Row 2: [Geo][Alloy][Geo] | Row 3: [Energy x2][Alloy][Energy x3]',\n    };\n\n    const assaultDroneRecipe: CraftingRecipe = {\n      id: 'assault_drone_recipe',\n      name: 'Assault Drone',\n      description: 'Aggressive drone that fires rapid projectiles',\n      ingredients: [\n        { resource: 'energy', amount: 15 },\n        { resource: 'alloyFragments', amount: 8 },\n        { resource: 'coreDust', amount: 10 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'assault_drone',\n      },\n      gridPattern: [\n        [['alloyFragments'], ['coreDust'], ['alloyFragments']],\n        [['energy', 'energy', 'energy'], ['coreDust', 'coreDust'], ['energy', 'energy', 'energy']],\n        [['alloyFragments'], ['coreDust'], ['alloyFragments']],\n      ],\n      patternDescription: 'Row 1: [Alloy][Core Dust][Alloy] | Row 2: [Energy x3][Core Dust x2][Energy x3] | Row 3: [Alloy][Core Dust][Alloy]',\n    };\n\n    const shieldDroneRecipe: CraftingRecipe = {\n      id: 'shield_drone_recipe',\n      name: 'Shield Drone',\n      description: 'Defensive drone that absorbs damage',\n      ingredients: [\n        { resource: 'energy', amount: 12 },\n        { resource: 'geoShards', amount: 10 },\n        { resource: 'alloyFragments', amount: 10 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'shield_drone',\n      },\n      gridPattern: [\n        [['geoShards'], ['alloyFragments'], ['geoShards']],\n        [['energy', 'energy'], ['alloyFragments', 'alloyFragments'], ['energy', 'energy']],\n        [['geoShards'], ['energy', 'energy'], ['geoShards']],\n      ],\n      patternDescription: 'Row 1: [Geo][Alloy][Geo] | Row 2: [Energy x2][Alloy x2][Energy x2] | Row 3: [Geo][Energy x2][Geo]',\n    };\n\n    const repairDroneRecipe: CraftingRecipe = {\n      id: 'repair_drone_recipe',\n      name: 'Repair Drone',\n      description: 'Support drone that repairs player health',\n      ingredients: [\n        { resource: 'energy', amount: 10 },\n        { resource: 'coreDust', amount: 8 },\n        { resource: 'cryoKelp', amount: 3 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'repair_drone',\n      },\n      gridPattern: [\n        [['cryoKelp'], null, ['cryoKelp']],\n        [['energy', 'energy'], ['coreDust', 'coreDust'], ['energy', 'energy']],\n        [['coreDust'], ['cryoKelp'], ['coreDust']],\n      ],\n      patternDescription: 'Row 1: [Cryo Kelp][Empty][Cryo Kelp] | Row 2: [Energy x2][Core Dust x2][Energy x2] | Row 3: [Core Dust][Cryo Kelp][Core Dust]',\n    };\n\n    const scoutDroneRecipe: CraftingRecipe = {\n      id: 'scout_drone_recipe',\n      name: 'Scout Drone',\n      description: 'Fast drone with extended detection',\n      ingredients: [\n        { resource: 'energy', amount: 8 },\n        { resource: 'flux', amount: 12 },\n        { resource: 'coreDust', amount: 6 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'scout_drone',\n      },\n      gridPattern: [\n        [['flux'], ['coreDust'], ['flux']],\n        [['energy'], ['flux', 'flux'], ['energy']],\n        [['flux'], ['energy', 'energy', 'energy', 'energy'], ['flux']],\n      ],\n      patternDescription: 'Row 1: [Flux][Core Dust][Flux] | Row 2: [Energy][Flux x2][Energy] | Row 3: [Flux][Energy x4][Flux]',\n    };\n\n    const plasmaDroneRecipe: CraftingRecipe = {\n      id: 'plasma_drone_recipe',\n      name: 'Plasma Drone',\n      description: 'Fires piercing plasma bolts',\n      ingredients: [\n        { resource: 'energy', amount: 18 },\n        { resource: 'flux', amount: 15 },\n        { resource: 'voidEssence', amount: 5 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'plasma_drone',\n      },\n      gridPattern: [\n        [['voidEssence'], ['flux'], ['voidEssence']],\n        [['energy', 'energy', 'energy'], ['flux', 'flux'], ['energy', 'energy', 'energy']],\n        [['voidEssence'], ['flux', 'flux', 'flux'], ['voidEssence']],\n      ],\n      patternDescription: 'Row 1: [Void Essence][Flux][Void Essence] | Row 2: [Energy x3][Flux x2][Energy x3] | Row 3: [Void Essence][Flux x3][Void Essence]',\n    };\n\n    const cryoDroneRecipe: CraftingRecipe = {\n      id: 'cryo_drone_recipe',\n      name: 'Cryo Drone',\n      description: 'Slows enemies with freezing projectiles',\n      ingredients: [\n        { resource: 'energy', amount: 12 },\n        { resource: 'cryoKelp', amount: 8 },\n        { resource: 'resonantCrystal', amount: 4 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'cryo_drone',\n      },\n      gridPattern: [\n        [['cryoKelp'], ['resonantCrystal'], ['cryoKelp']],\n        [['energy', 'energy'], ['cryoKelp'], ['energy', 'energy']],\n        [['cryoKelp'], ['resonantCrystal'], ['cryoKelp']],\n      ],\n      patternDescription: 'Row 1: [Cryo Kelp][Resonant Crystal][Cryo Kelp] | Row 2: [Energy x2][Cryo Kelp][Energy x2] | Row 3: [Cryo Kelp][Resonant Crystal][Cryo Kelp]',\n    };\n\n    const explosiveDroneRecipe: CraftingRecipe = {\n      id: 'explosive_drone_recipe',\n      name: 'Explosive Drone',\n      description: 'Launches explosive rounds',\n      ingredients: [\n        { resource: 'energy', amount: 15 },\n        { resource: 'obsidianHeart', amount: 6 },\n        { resource: 'alloyFragments', amount: 10 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'explosive_drone',\n      },\n      gridPattern: [\n        [['obsidianHeart'], ['alloyFragments'], ['obsidianHeart']],\n        [['energy', 'energy'], ['obsidianHeart'], ['energy', 'energy']],\n        [['alloyFragments'], ['energy', 'energy', 'energy'], ['alloyFragments']],\n      ],\n      patternDescription: 'Row 1: [Obsidian Heart][Alloy][Obsidian Heart] | Row 2: [Energy x2][Obsidian Heart][Energy x2] | Row 3: [Alloy][Energy x3][Alloy]',\n    };\n\n    const medicDroneRecipe: CraftingRecipe = {\n      id: 'medic_drone_recipe',\n      name: 'Medic Drone',\n      description: 'Advanced healing drone',\n      ingredients: [\n        { resource: 'energy', amount: 20 },\n        { resource: 'bioluminescentPearl', amount: 8 },\n        { resource: 'sunpetalBloom', amount: 5 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'medic_drone',\n      },\n      gridPattern: [\n        [['sunpetalBloom'], ['bioluminescentPearl'], ['sunpetalBloom']],\n        [['energy', 'energy', 'energy'], ['bioluminescentPearl', 'bioluminescentPearl'], ['energy', 'energy', 'energy']],\n        [['sunpetalBloom'], ['bioluminescentPearl'], ['sunpetalBloom']],\n      ],\n      patternDescription: 'Row 1: [Sunpetal Bloom][Pearl][Sunpetal Bloom] | Row 2: [Energy x3][Pearl x2][Energy x3] | Row 3: [Sunpetal Bloom][Pearl][Sunpetal Bloom]',\n    };\n\n    const empDroneRecipe: CraftingRecipe = {\n      id: 'emp_drone_recipe',\n      name: 'EMP Drone',\n      description: 'Disrupts enemy shields and systems',\n      ingredients: [\n        { resource: 'energy', amount: 14 },\n        { resource: 'flux', amount: 10 },\n        { resource: 'singularityCore', amount: 4 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'emp_drone',\n      },\n      gridPattern: [\n        [['singularityCore'], ['flux'], ['singularityCore']],\n        [['energy', 'energy'], ['flux', 'flux'], ['energy', 'energy']],\n        [['singularityCore'], ['energy', 'energy', 'energy'], ['singularityCore']],\n      ],\n      patternDescription: 'Row 1: [Singularity Core][Flux][Singularity Core] | Row 2: [Energy x2][Flux x2][Energy x2] | Row 3: [Singularity Core][Energy x3][Singularity Core]',\n    };\n\n    const sniperDroneRecipe: CraftingRecipe = {\n      id: 'sniper_drone_recipe',\n      name: 'Sniper Drone',\n      description: 'Precise long-range shots',\n      ingredients: [\n        { resource: 'energy', amount: 16 },\n        { resource: 'resonantCrystal', amount: 8 },\n        { resource: 'alloyFragments', amount: 12 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'sniper_drone',\n      },\n      gridPattern: [\n        [['resonantCrystal'], ['alloyFragments'], ['resonantCrystal']],\n        [['energy', 'energy'], ['resonantCrystal'], ['energy', 'energy']],\n        [['alloyFragments'], ['resonantCrystal'], ['alloyFragments']],\n      ],\n      patternDescription: 'Row 1: [Resonant Crystal][Alloy][Resonant Crystal] | Row 2: [Energy x2][Resonant Crystal][Energy x2] | Row 3: [Alloy][Resonant Crystal][Alloy]',\n    };\n\n    const laserDroneRecipe: CraftingRecipe = {\n      id: 'laser_drone_recipe',\n      name: 'Laser Drone',\n      description: 'Continuous laser beam',\n      ingredients: [\n        { resource: 'energy', amount: 18 },\n        { resource: 'resonantCrystal', amount: 10 },\n        { resource: 'flux', amount: 8 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'laser_drone',\n      },\n      gridPattern: [\n        [['resonantCrystal'], ['flux'], ['resonantCrystal']],\n        [['energy', 'energy', 'energy'], ['resonantCrystal', 'resonantCrystal'], ['energy', 'energy', 'energy']],\n        [['flux'], ['resonantCrystal'], ['flux']],\n      ],\n      patternDescription: 'Row 1: [Resonant Crystal][Flux][Resonant Crystal] | Row 2: [Energy x3][Resonant Crystal x2][Energy x3] | Row 3: [Flux][Resonant Crystal][Flux]',\n    };\n\n    const swarmDroneRecipe: CraftingRecipe = {\n      id: 'swarm_drone_recipe',\n      name: 'Swarm Drone',\n      description: 'Deploys mini-drones',\n      ingredients: [\n        { resource: 'energy', amount: 12 },\n        { resource: 'coreDust', amount: 15 },\n        { resource: 'gloomRoot', amount: 6 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'swarm_drone',\n      },\n      gridPattern: [\n        [['gloomRoot'], ['coreDust'], ['gloomRoot']],\n        [['energy'], ['coreDust', 'coreDust', 'coreDust'], ['energy']],\n        [['gloomRoot'], ['energy', 'energy', 'energy', 'energy', 'energy'], ['gloomRoot']],\n      ],\n      patternDescription: 'Row 1: [Gloom Root][Core Dust][Gloom Root] | Row 2: [Energy][Core Dust x3][Energy] | Row 3: [Gloom Root][Energy x5][Gloom Root]',\n    };\n\n    const gravityDroneRecipe: CraftingRecipe = {\n      id: 'gravity_drone_recipe',\n      name: 'Gravity Drone',\n      description: 'Creates gravity wells',\n      ingredients: [\n        { resource: 'energy', amount: 20 },\n        { resource: 'singularityCore', amount: 8 },\n        { resource: 'voidEssence', amount: 6 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'gravity_drone',\n      },\n      gridPattern: [\n        [['voidEssence'], ['singularityCore'], ['voidEssence']],\n        [['energy', 'energy', 'energy'], ['singularityCore', 'singularityCore'], ['energy', 'energy', 'energy']],\n        [['voidEssence'], ['singularityCore', 'singularityCore'], ['voidEssence']],\n      ],\n      patternDescription: 'Row 1: [Void Essence][Singularity Core][Void Essence] | Row 2: [Energy x3][Singularity Core x2][Energy x3] | Row 3: [Void Essence][Singularity Core x2][Void Essence]',\n    };\n\n    const teslaDroneRecipe: CraftingRecipe = {\n      id: 'tesla_drone_recipe',\n      name: 'Tesla Drone',\n      description: 'Chains lightning between enemies',\n      ingredients: [\n        { resource: 'energy', amount: 16 },\n        { resource: 'flux', amount: 12 },\n        { resource: 'aetheriumShard', amount: 6 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'tesla_drone',\n      },\n      gridPattern: [\n        [['aetheriumShard'], ['flux'], ['aetheriumShard']],\n        [['energy', 'energy'], ['flux', 'flux'], ['energy', 'energy']],\n        [['aetheriumShard'], ['energy', 'energy', 'energy', 'energy'], ['aetheriumShard']],\n      ],\n      patternDescription: 'Row 1: [Aetherium Shard][Flux][Aetherium Shard] | Row 2: [Energy x2][Flux x2][Energy x2] | Row 3: [Aetherium Shard][Energy x4][Aetherium Shard]',\n    };\n\n    const voidDroneRecipe: CraftingRecipe = {\n      id: 'void_drone_recipe',\n      name: 'Void Drone',\n      description: 'Dark energy projectiles',\n      ingredients: [\n        { resource: 'energy', amount: 22 },\n        { resource: 'voidEssence', amount: 10 },\n        { resource: 'singularityCore', amount: 5 },\n      ],\n      output: {\n        type: 'drone',\n        droneType: 'void_drone',\n      },\n      gridPattern: [\n        [['voidEssence'], ['singularityCore'], ['voidEssence']],\n        [['energy', 'energy', 'energy', 'energy'], ['voidEssence', 'voidEssence'], ['energy', 'energy', 'energy', 'energy']],\n        [['voidEssence'], ['singularityCore'], ['voidEssence']],\n      ],\n      patternDescription: 'Row 1: [Void Essence][Singularity Core][Void Essence] | Row 2: [Energy x4][Void Essence x2][Energy x4] | Row 3: [Void Essence][Singularity Core][Void Essence]',\n    };\n\n    this.recipes.push(\n      healingPackRecipe,\n      mediumHealingPackRecipe,\n      largeHealingPackRecipe,\n      energyBoostRecipe,\n      shieldPackRecipe,\n      biomeElixirRecipe,\n      crateKeyRecipe,\n      assaultDroneRecipe,\n      shieldDroneRecipe,\n      repairDroneRecipe,\n      scoutDroneRecipe,\n      plasmaDroneRecipe,\n      cryoDroneRecipe,\n      explosiveDroneRecipe,\n      medicDroneRecipe,\n      empDroneRecipe,\n      sniperDroneRecipe,\n      laserDroneRecipe,\n      swarmDroneRecipe,\n      gravityDroneRecipe,\n      teslaDroneRecipe,\n      voidDroneRecipe\n    );\n  }\n\n  checkDiscoveredRecipes(player: Player): void {\n    for (const recipe of this.recipes) {\n      if (!this.discoveredRecipes.has(recipe.id)) {\n        if (this.hasRequiredResources(player, recipe)) {\n          this.discoveredRecipes.add(recipe.id);\n        }\n      }\n    }\n  }\n\n  private hasRequiredResources(player: Player, recipe: CraftingRecipe): boolean {\n    return recipe.ingredients.every((ingredient) => {\n      const resourceAmount = player.resources[ingredient.resource as keyof typeof player.resources];\n      return resourceAmount >= ingredient.amount;\n    });\n  }\n\n  canCraft(player: Player, recipeId: string): boolean {\n    const recipe = this.recipes.find((r) => r.id === recipeId);\n    if (!recipe) return false;\n    return this.hasRequiredResources(player, recipe);\n  }\n\n  craftItem(player: Player, recipeId: string): Consumable | DroneType | null {\n    const recipe = this.recipes.find((r) => r.id === recipeId);\n    if (!recipe || !this.canCraft(player, recipeId)) {\n      return null;\n    }\n\n    for (const ingredient of recipe.ingredients) {\n      const resourceKey = ingredient.resource as keyof typeof player.resources;\n      (player.resources[resourceKey] as number) -= ingredient.amount;\n    }\n\n    if (recipe.output.type === 'drone') {\n      return recipe.output.droneType as DroneType;\n    }\n\n    const baseItem = recipe.output.item;\n    if (!baseItem) return null;\n\n    if (baseItem.effect === 'key') {\n      player.resources.crateKey += 1;\n      return null;\n    }\n\n    return { ...baseItem, id: baseItem.id, quantity: 1 };\n  }\n\n  craftFromGrid(player: Player, grid: (string[] | null)[][]): Consumable | DroneType | null {\n    for (const recipe of this.recipes) {\n      if (this.matchesPattern(grid, recipe.gridPattern)) {\n        return this.craftItem(player, recipe.id);\n      }\n    }\n    return null;\n  }\n\n  private matchesPattern(grid: (string[] | null)[][], pattern: (string[] | null)[][]): boolean {\n    if (grid.length !== pattern.length) return false;\n\n    for (let row = 0; row < grid.length; row++) {\n      if (grid[row].length !== pattern[row].length) return false;\n      for (let col = 0; col < grid[row].length; col++) {\n        const gridCell = grid[row][col];\n        const patternCell = pattern[row][col];\n\n        if (patternCell === null) {\n          if (gridCell !== null && gridCell.length > 0) return false;\n        } else if (gridCell === null || gridCell.length === 0) {\n          return false;\n        } else {\n          const sortedGrid = [...gridCell].sort();\n          const sortedPattern = [...patternCell].sort();\n          if (sortedGrid.length !== sortedPattern.length) return false;\n          for (let i = 0; i < sortedGrid.length; i++) {\n            if (sortedGrid[i] !== sortedPattern[i]) return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  getRecipePattern(recipeId: string): (string[] | null)[][] | null {\n    const recipe = this.recipes.find((r) => r.id === recipeId);\n    return recipe ? recipe.gridPattern : null;\n  }\n\n  getDiscoveredRecipes(): CraftingRecipe[] {\n    return this.recipes.filter((recipe) => this.discoveredRecipes.has(recipe.id));\n  }\n\n  getAllRecipes(): CraftingRecipe[] {\n    return this.recipes;\n  }\n\n  isRecipeDiscovered(recipeId: string): boolean {\n    return this.discoveredRecipes.has(recipeId);\n  }\n}\n","size_bytes":23031},"src/game/WorldGeneration.ts":{"content":"import { Vector2, Enemy, Chest, Player } from '../types/game';\nimport { createVector, generateId, randomRange } from './utils';\nimport { BASE_ENEMY_CONFIGS } from './WaveSystem';\nimport { Obstacle as EnvObstacle } from './Environments';\nimport { BiomeManager, BiomeConfig } from './BiomeSystem';\nimport { BiomeFeatureGenerator, AnyBiomeFeature } from './BiomeFeatures';\nimport { EnemyModifierSystem } from './EnemyModifierSystem';\n\nexport type ResourceType = keyof Player['resources'];\n\nexport interface Chunk {\n  x: number;\n  y: number;\n  id: string;\n  biomeId: string;\n  obstacles: EnvObstacle[];\n  enemies: Enemy[];\n  resourceNodes: ResourceNode[];\n  portals: Portal[];\n  extractionPoint?: ExtractionPoint;\n  chests: Chest[];\n  biomeFeatures: AnyBiomeFeature[];\n}\n\nexport interface ResourceNode {\n  id: string;\n  position: Vector2;\n  size: number;\n  health: number;\n  maxHealth: number;\n  resourceType: ResourceType;\n  shape: 'crystal' | 'boulder' | 'geode' | 'kelp' | 'heart' | 'root' | 'pearl' | 'bloom' | 'shard' | 'graviton';\n  color: string;\n  value: number;\n  bobPhase: number;\n}\n\nexport interface Portal {\n  id: string;\n  position: Vector2;\n  size: number;\n  color: string;\n  linkedPortalId?: string;\n}\n\nexport interface ExtractionPoint {\n  id: string;\n  position: Vector2;\n  size: number;\n  active: boolean;\n}\n\nexport const CHUNK_SIZE = 1200;\n\nexport class WorldGenerator {\n  private chunks: Map<string, Chunk> = new Map();\n  private chunkBiomeMap: Map<string, number> = new Map();\n  private seed: number;\n  private biomeManager: BiomeManager;\n  private allPortals: Portal[] = [];\n  private unlinkedPortal: Portal | null = null;\n  private killedEnemyIds: Set<string> = new Set();\n  private featureGenerator: BiomeFeatureGenerator;\n  private modifierSystem: EnemyModifierSystem;\n\n  constructor(seed?: number) {\n    this.seed = seed || Math.random() * 10000;\n    this.biomeManager = new BiomeManager();\n    this.featureGenerator = new BiomeFeatureGenerator(this.seed);\n    this.modifierSystem = new EnemyModifierSystem();\n  }\n\n  private getChunkKey(chunkX: number, chunkY: number): string {\n    return `${chunkX},${chunkY}`;\n  }\n\n  private seededRandom(x: number, y: number, offset: number = 0): number {\n    const seed = this.seed + x * 73856093 + y * 19349663 + offset * 83492791;\n    const value = Math.sin(seed) * 43758.5453123;\n    return value - Math.floor(value);\n  }\n\n  public getOrAssignChunkBiomeIndex(chunkX: number, chunkY: number): number {\n    const key = this.getChunkKey(chunkX, chunkY);\n    if (this.chunkBiomeMap.has(key)) {\n      return this.chunkBiomeMap.get(key)!;\n    }\n\n    const BIOMES_COUNT = this.biomeManager.getBiomes().length;\n    const availableBiomeIndices = Array.from({ length: BIOMES_COUNT }, (_, i) => i);\n\n    const neighbors = [\n      { x: chunkX - 1, y: chunkY }, { x: chunkX + 1, y: chunkY },\n      { x: chunkX, y: chunkY - 1 }, { x: chunkX, y: chunkY + 1 },\n    ];\n\n    const neighborBiomes = neighbors\n      .map(n => this.chunkBiomeMap.get(this.getChunkKey(n.x, n.y)))\n      .filter(b => b !== undefined && availableBiomeIndices.includes(b!)) as number[];\n\n    let biomeIndex: number;\n    if (neighborBiomes.length > 0 && this.seededRandom(chunkX, chunkY, 1000) < 0.9) {\n      biomeIndex = neighborBiomes[Math.floor(this.seededRandom(chunkX, chunkY, 1001) * neighborBiomes.length)];\n    } else {\n      const randIndex = Math.floor(this.seededRandom(chunkX, chunkY, 1002) * availableBiomeIndices.length);\n      biomeIndex = availableBiomeIndices[randIndex];\n    }\n\n    this.chunkBiomeMap.set(key, biomeIndex);\n    return biomeIndex;\n  }\n\n  getOrGenerateChunk(chunkX: number, chunkY: number): Chunk {\n    const key = this.getChunkKey(chunkX, chunkY);\n    if (this.chunks.has(key)) {\n      return this.chunks.get(key)!;\n    }\n    const chunk = this.generateChunk(chunkX, chunkY);\n    this.chunks.set(key, chunk);\n    return chunk;\n  }\n\n  private generateChunk(chunkX: number, chunkY: number): Chunk {\n    const worldX = chunkX * CHUNK_SIZE;\n    const worldY = chunkY * CHUNK_SIZE;\n\n    const biomeIndex = this.getOrAssignChunkBiomeIndex(chunkX, chunkY);\n    const biome = this.biomeManager.getBiomeByIndex(biomeIndex);\n\n    const biomeFeatures = this.featureGenerator.generateFeaturesForChunk(chunkX, chunkY, worldX, worldY, CHUNK_SIZE, biome);\n    const obstacles = this.generateObstacles(chunkX, chunkY, worldX, worldY, biome, biomeFeatures);\n    const enemies = this.generateEnemies(chunkX, chunkY, worldX, worldY, biome);\n    const resourceNodes = this.generateResourceNodes(chunkX, chunkY, worldX, worldY, biome, biomeFeatures);\n    const portals = this.generatePortals(chunkX, chunkY, worldX, worldY, biome);\n    const extractionPoint = this.generateExtractionPoint(chunkX, chunkY, worldX, worldY, biome);\n    const chests = this.generateChests(chunkX, chunkY, worldX, worldY, biome);\n\n    return {\n      x: chunkX,\n      y: chunkY,\n      id: this.getChunkKey(chunkX, chunkY),\n      biomeId: biome.id,\n      obstacles,\n      enemies,\n      resourceNodes,\n      portals,\n      extractionPoint,\n      chests,\n      biomeFeatures,\n    };\n  }\n\n  private generateObstacles(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig, biomeFeatures: AnyBiomeFeature[]): EnvObstacle[] {\n    const obstacles: EnvObstacle[] = [];\n    const obstacleCount = Math.floor(this.seededRandom(chunkX, chunkY, 1) * 8) + 3;\n\n    for (let i = 0; i < obstacleCount; i++) {\n      const x = worldX + this.seededRandom(chunkX, chunkY, i * 2) * CHUNK_SIZE;\n      const y = worldY + this.seededRandom(chunkX, chunkY, i * 2 + 1) * CHUNK_SIZE;\n      const typeRand = this.seededRandom(chunkX, chunkY, i * 3);\n      const color = biome.obstacleColors[Math.floor(this.seededRandom(chunkX, chunkY, i * 6) * biome.obstacleColors.length)];\n      let size: number;\n      let shape: 'rectangle' | 'circle';\n\n      if (typeRand < 0.5) {\n        size = 30 + this.seededRandom(chunkX, chunkY, i * 4) * 40;\n        shape = 'circle';\n      } else {\n        size = 40 + this.seededRandom(chunkX, chunkY, i * 4) * 60;\n        shape = 'rectangle';\n      }\n\n      const obstacle: EnvObstacle = {\n        id: generateId(),\n        position: createVector(x, y),\n        size: shape === 'circle' ? { x: size, y: size } : { x: size, y: size * 0.6 },\n        rotation: this.seededRandom(chunkX, chunkY, i * 5) * Math.PI * 2,\n        color,\n        shape,\n      };\n\n      const gravityAnomalies = biomeFeatures.filter(f => f.type === 'gravity-anomaly');\n      for (const anomaly of gravityAnomalies) {\n        const dx = x - anomaly.position.x;\n        const dy = y - anomaly.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance > 120 && distance < 300) {\n          const angle = Math.atan2(dy, dx);\n          const direction = this.seededRandom(chunkX, chunkY, i * 7 + 500) > 0.5 ? 1 : -1;\n          const speed = 0.3 + this.seededRandom(chunkX, chunkY, i * 8 + 600) * 0.8;\n\n          obstacle.orbitData = {\n            centerX: anomaly.position.x,\n            centerY: anomaly.position.y,\n            distance,\n            angle,\n            speed,\n            direction,\n          };\n          break;\n        }\n      }\n\n      obstacles.push(obstacle);\n    }\n    return obstacles;\n  }\n\n  private generateEnemies(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig): Enemy[] {\n    const potentialEnemies: Enemy[] = [];\n    const distanceFromOrigin = Math.sqrt(chunkX * chunkX + chunkY * chunkY);\n    const enemyCount = Math.floor(this.seededRandom(chunkX, chunkY, 10) * 5) + Math.floor(distanceFromOrigin * 0.5);\n\n    let enemyTypes = [...biome.uniqueEnemyTypes];\n\n    if (distanceFromOrigin > 3) {\n      enemyTypes.push('orbiter', 'fragmenter', 'pulsar', 'spiraler', 'replicator', 'vortex');\n    }\n\n    const MIN_SPAWN_SPACING = 200;\n\n    for (let i = 0; i < enemyCount; i++) {\n      let x: number;\n      let y: number;\n      let attempts = 0;\n      let validPosition = false;\n\n      do {\n        x = worldX + this.seededRandom(chunkX, chunkY, i * 20 + 100 + attempts * 7777) * (CHUNK_SIZE * 0.8) + (CHUNK_SIZE * 0.1);\n        y = worldY + this.seededRandom(chunkX, chunkY, i * 20 + 101 + attempts * 7777) * (CHUNK_SIZE * 0.8) + (CHUNK_SIZE * 0.1);\n\n        validPosition = true;\n        for (const existing of potentialEnemies) {\n          const dist = Math.sqrt(Math.pow(x - existing.position.x, 2) + Math.pow(y - existing.position.y, 2));\n          if (dist < MIN_SPAWN_SPACING) {\n            validPosition = false;\n            break;\n          }\n        }\n\n        attempts++;\n      } while (!validPosition && attempts < 20);\n\n      if (!validPosition) continue;\n\n      const typeIndex = Math.floor(this.seededRandom(chunkX, chunkY, i * 21) * enemyTypes.length);\n      const enemyType = enemyTypes[typeIndex];\n      const config = BASE_ENEMY_CONFIGS[enemyType];\n      const scaleFactor = 1 + distanceFromOrigin * 0.05;\n\n      let detectionRadius: number;\n      if (enemyType === 'sniper' || enemyType === 'artillery') {\n        detectionRadius = 180 + this.seededRandom(chunkX, chunkY, i * 22) * 20;\n      } else if (enemyType === 'tank') {\n        detectionRadius = 50 + this.seededRandom(chunkX, chunkY, i * 22) * 20;\n      } else {\n        detectionRadius = 80 + this.seededRandom(chunkX, chunkY, i * 22) * 30;\n      }\n\n      const uniqueSeed = this.seededRandom(chunkX, chunkY, i * 99 + 777);\n      let enemy: Enemy = {\n        id: `enemy-${chunkX}-${chunkY}-${i}-${Math.floor(uniqueSeed * 10000)}`,\n        position: createVector(x, y),\n        velocity: createVector(),\n        rotation: 0,\n        health: Math.floor(config.health * scaleFactor),\n        maxHealth: Math.floor(config.health * scaleFactor),\n        damage: Math.floor(config.damage * scaleFactor),\n        size: config.size,\n        speed: config.speed,\n        color: config.color,\n        type: enemyType,\n        attackCooldown: 1,\n        currencyDrop: Math.floor(config.currency * (1 + distanceFromOrigin * 0.1)),\n        detectionRadius: detectionRadius,\n        isAggro: false,\n      };\n\n      enemy = this.biomeManager.modifyEnemyForBiome(enemy, biome);\n\n      if (this.modifierSystem.shouldApplyModifier() && distanceFromOrigin > 1) {\n        const modifierCount = distanceFromOrigin > 4 ? 2 : 1;\n        const modifiers = this.modifierSystem.getRandomModifiers(modifierCount);\n        enemy.modifiers = modifiers;\n      }\n\n      potentialEnemies.push(enemy);\n    }\n\n\n    const eliteRoll = this.seededRandom(chunkX, chunkY, 9997);\n    if (eliteRoll < 0.08 && distanceFromOrigin > 2) {\n      const x = worldX + this.seededRandom(chunkX, chunkY, 9996) * CHUNK_SIZE;\n      const y = worldY + this.seededRandom(chunkX, chunkY, 9995) * CHUNK_SIZE;\n      const wave = Math.floor(distanceFromOrigin);\n    }\n\n    return potentialEnemies.filter(e => !this.killedEnemyIds.has(e.id));\n  }\n\n  private generateResourceNodes(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig, biomeFeatures: AnyBiomeFeature[]): ResourceNode[] {\n    const nodes: ResourceNode[] = [];\n    const nodeCount = Math.floor(this.seededRandom(chunkX, chunkY, 50) * 4) + 2;\n\n    const availableResources = ['energy', 'geoShards', ...biome.uniqueResources];\n    if (this.seededRandom(chunkX, chunkY, 51) < 0.5) availableResources.push('coreDust');\n    if (this.seededRandom(chunkX, chunkY, 52) < 0.6) availableResources.push('alloyFragments');\n    if (this.seededRandom(chunkX, chunkY, 53) < 0.05) availableResources.push('singularityCore');\n\n    for (let i = 0; i < nodeCount; i++) {\n      const resourceType = availableResources[Math.floor(this.seededRandom(chunkX, chunkY, i * 31) * availableResources.length)] as ResourceType;\n\n      let x: number;\n      let y: number;\n      let positioned = false;\n\n      if (resourceType === 'cryoKelp') {\n        const glacialSpires = biomeFeatures.filter(f => f.type === 'glacial-spire');\n        if (glacialSpires.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 5000) < 0.95) {\n          const spire = glacialSpires[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 5001) * glacialSpires.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 5002) * Math.PI * 2;\n          const distance = 30 + this.seededRandom(chunkX, chunkY, i * 103 + 5003) * 60;\n          x = spire.position.x + Math.cos(angle) * distance;\n          y = spire.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'voidEssence') {\n        const gravityAnomalies = biomeFeatures.filter(f => f.type === 'gravity-anomaly');\n        if (gravityAnomalies.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 6000) < 0.75) {\n          const anomaly = gravityAnomalies[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 6001) * gravityAnomalies.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 6002) * Math.PI * 2;\n          const distance = 50 + this.seededRandom(chunkX, chunkY, i * 103 + 6003) * 100;\n          x = anomaly.position.x + Math.cos(angle) * distance;\n          y = anomaly.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'obsidianHeart') {\n        const lavaPillars = biomeFeatures.filter(f => f.type === 'lava-pillar');\n        if (lavaPillars.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 7000) < 0.7) {\n          const pillar = lavaPillars[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 7001) * lavaPillars.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 7002) * Math.PI * 2;\n          const distance = 60 + this.seededRandom(chunkX, chunkY, i * 103 + 7003) * 70;\n          x = pillar.position.x + Math.cos(angle) * distance;\n          y = pillar.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'gloomRoot') {\n        const voidGaps = biomeFeatures.filter(f => f.type === 'void-gap');\n        if (voidGaps.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 8000) < 0.65) {\n          const voidGap = voidGaps[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 8001) * voidGaps.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 8002) * Math.PI * 2;\n          const distance = 80 + this.seededRandom(chunkX, chunkY, i * 103 + 8003) * 90;\n          x = voidGap.position.x + Math.cos(angle) * distance;\n          y = voidGap.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'resonantCrystal') {\n        const crystalFormations = biomeFeatures.filter(f => f.type === 'crystal-formation');\n        if (crystalFormations.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 9000) < 0.8) {\n          const formation = crystalFormations[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 9001) * crystalFormations.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 9002) * Math.PI * 2;\n          const distance = 70 + this.seededRandom(chunkX, chunkY, i * 103 + 9003) * 100;\n          x = formation.position.x + Math.cos(angle) * distance;\n          y = formation.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'bioluminescentPearl') {\n        const coralReefs = biomeFeatures.filter(f => f.type === 'coral-reef');\n        if (coralReefs.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 10000) < 0.95) {\n          const reef = coralReefs[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 10001) * coralReefs.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 10002) * Math.PI * 2;\n          const distance = 20 + this.seededRandom(chunkX, chunkY, i * 103 + 10003) * 50;\n          x = reef.position.x + Math.cos(angle) * distance;\n          y = reef.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'sunpetalBloom') {\n        const bloomTrees = biomeFeatures.filter(f => f.type === 'bloom-tree');\n        if (bloomTrees.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 11000) < 0.75) {\n          const tree = bloomTrees[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 11001) * bloomTrees.length)];\n          const ringIndex = Math.floor(this.seededRandom(chunkX, chunkY, i * 102 + 11002) * 3);\n          const angle = this.seededRandom(chunkX, chunkY, i * 103 + 11003) * Math.PI * 2;\n          const distance = 80 + ringIndex * 50 + this.seededRandom(chunkX, chunkY, i * 104 + 11004) * 30;\n          x = tree.position.x + Math.cos(angle) * distance;\n          y = tree.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'aetheriumShard') {\n        const realityTears = biomeFeatures.filter(f => f.type === 'reality-tear');\n        if (realityTears.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 12000) < 0.7) {\n          const tear = realityTears[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 12001) * realityTears.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 12002) * Math.PI * 2;\n          const distance = 100 + this.seededRandom(chunkX, chunkY, i * 103 + 12003) * 150;\n          x = tear.position.x + Math.cos(angle) * distance;\n          y = tear.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      } else if (resourceType === 'gravitonEssence') {\n        const gravityAnomalies = biomeFeatures.filter(f => f.type === 'gravity-anomaly');\n        if (gravityAnomalies.length > 0 && this.seededRandom(chunkX, chunkY, i * 100 + 13000) < 0.9) {\n          const anomaly = gravityAnomalies[Math.floor(this.seededRandom(chunkX, chunkY, i * 101 + 13001) * gravityAnomalies.length)];\n          const angle = this.seededRandom(chunkX, chunkY, i * 102 + 13002) * Math.PI * 2;\n          const distance = 120 + this.seededRandom(chunkX, chunkY, i * 103 + 13003) * 80;\n          x = anomaly.position.x + Math.cos(angle) * distance;\n          y = anomaly.position.y + Math.sin(angle) * distance;\n          positioned = true;\n        }\n      }\n\n      if (!positioned) {\n        x = worldX + this.seededRandom(chunkX, chunkY, i * 30 + 200) * CHUNK_SIZE;\n        y = worldY + this.seededRandom(chunkX, chunkY, i * 30 + 201) * CHUNK_SIZE;\n      }\n\n      const color = biome.resourceColors[resourceType] || '#ffffff';\n      let shape: ResourceNode['shape'] = 'boulder';\n\n      if (resourceType === 'energy') shape = 'crystal';\n      if (resourceType === 'coreDust') shape = 'shard';\n      if (resourceType === 'flux') shape = 'crystal';\n      if (resourceType === 'geoShards') shape = 'geode';\n      if (resourceType === 'alloyFragments') shape = 'shard';\n      if (resourceType === 'singularityCore') shape = 'boulder';\n      if (resourceType === 'cryoKelp') shape = 'kelp';\n      if (resourceType === 'obsidianHeart') shape = 'heart';\n      if (resourceType === 'gloomRoot') shape = 'root';\n      if (resourceType === 'resonantCrystal') shape = 'crystal';\n      if (resourceType === 'voidEssence') shape = 'shard';\n      if (resourceType === 'bioluminescentPearl') shape = 'pearl';\n      if (resourceType === 'sunpetalBloom') shape = 'bloom';\n      if (resourceType === 'aetheriumShard') shape = 'crystal';\n      if (resourceType === 'gravitonEssence') shape = 'graviton';\n\n      const health = 1;\n      nodes.push({\n        id: generateId(),\n        position: createVector(x, y),\n        size: 30,\n        health,\n        maxHealth: health,\n        resourceType,\n        shape,\n        color,\n        value: randomRange(1, 5),\n        bobPhase: randomRange(0, Math.PI * 2),\n      });\n    }\n    return nodes;\n  }\n\n  private generateChests(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig): Chest[] {\n    const chests: Chest[] = [];\n    const chestCount = Math.floor(this.seededRandom(chunkX, chunkY, 300) * 3);\n\n    for (let i = 0; i < chestCount; i++) {\n      const x = worldX + this.seededRandom(chunkX, chunkY, i * 40 + 300) * CHUNK_SIZE;\n      const y = worldY + this.seededRandom(chunkX, chunkY, i * 40 + 301) * CHUNK_SIZE;\n      const typeRand = this.seededRandom(chunkX, chunkY, i * 41);\n\n      if (typeRand < 0.2) {\n        chests.push({\n          id: generateId(),\n          position: createVector(x, y),\n          size: 30,\n          type: 'timed',\n          isOpen: false,\n          timer: 0,\n          maxTime: 5,\n          radius: 120,\n          rotation: 0,\n        });\n      } else if (typeRand < 0.4) {\n        chests.push({\n          id: generateId(),\n          position: createVector(x, y),\n          size: 28,\n          type: 'locked',\n          isOpen: false,\n          rotation: 0,\n          requiresKey: true,\n        });\n      } else {\n        chests.push({\n          id: generateId(),\n          position: createVector(x, y),\n          size: 25,\n          type: 'regular',\n          isOpen: false,\n          rotation: 0,\n        });\n      }\n    }\n    return chests;\n  }\n\n  private generatePortals(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig): Portal[] {\n    const portals: Portal[] = [];\n    const distanceFromOrigin = Math.sqrt(chunkX * chunkX + chunkY * chunkY);\n    if (distanceFromOrigin > 2 && this.seededRandom(chunkX, chunkY, 80) < 0.1) {\n      const x = worldX + this.seededRandom(chunkX, chunkY, 81) * (CHUNK_SIZE - 400) + 200;\n      const y = worldY + this.seededRandom(chunkX, chunkY, 82) * (CHUNK_SIZE - 400) + 200;\n      \n      const newPortal: Portal = {\n        id: generateId(),\n        position: createVector(x, y),\n        size: 40,\n        color: biome.accentColor,\n      };\n\n      this.allPortals.push(newPortal);\n      portals.push(newPortal);\n\n      if (this.unlinkedPortal) {\n        newPortal.linkedPortalId = this.unlinkedPortal.id;\n        this.unlinkedPortal.linkedPortalId = newPortal.id;\n        this.unlinkedPortal = null;\n      } else {\n        this.unlinkedPortal = newPortal;\n      }\n    }\n    return portals;\n  }\n\n  private generateExtractionPoint(chunkX: number, chunkY: number, worldX: number, worldY: number, biome: BiomeConfig): ExtractionPoint | undefined {\n    const distanceFromOrigin = Math.sqrt(chunkX * chunkX + chunkY * chunkY);\n    if (distanceFromOrigin > 2 && this.seededRandom(chunkX, chunkY, 90) < 0.1) {\n      const x = worldX + CHUNK_SIZE / 2;\n      const y = worldY + CHUNK_SIZE / 2;\n      return {\n        id: generateId(),\n        position: createVector(x, y),\n        size: 50,\n        active: true,\n      };\n    }\n    return undefined;\n  }\n\n  getActiveChunks(centerX: number, centerY: number, radius: number = 2): Chunk[] {\n    const chunkX = Math.floor(centerX / CHUNK_SIZE);\n    const chunkY = Math.floor(centerY / CHUNK_SIZE);\n    const chunks: Chunk[] = [];\n    for (let dx = -radius; dx <= radius; dx++) {\n      for (let dy = -radius; dy <= radius; dy++) {\n        chunks.push(this.getOrGenerateChunk(chunkX + dx, chunkY + dy));\n      }\n    }\n    return chunks;\n  }\n\n  unloadDistantChunks(centerX: number, centerY: number, unloadRadius: number = 4): void {\n    const chunkX = Math.floor(centerX / CHUNK_SIZE);\n    const chunkY = Math.floor(centerY / CHUNK_SIZE);\n    const toRemove: string[] = [];\n    this.chunks.forEach((chunk, key) => {\n      const dx = Math.abs(chunk.x - chunkX);\n      const dy = Math.abs(chunk.y - chunkY);\n      if (dx > unloadRadius || dy > unloadRadius) {\n        toRemove.push(key);\n      }\n    });\n    toRemove.forEach(key => this.chunks.delete(key));\n  }\n\n  public getAllPortals(): Portal[] {\n    return this.allPortals;\n  }\n\n  public registerEnemyKill(enemyId: string): void {\n    this.killedEnemyIds.add(enemyId);\n  }\n\n  public getSeed(): number {\n    return this.seed;\n  }\n\n  public reset(): void {\n    this.chunks.clear();\n    this.chunkBiomeMap.clear();\n    this.allPortals = [];\n    this.unlinkedPortal = null;\n    this.killedEnemyIds.clear();\n  }\n\n  public serializeWorldData(): any {\n    const chunksArray = Array.from(this.chunks.entries()).map(([key, chunk]) => ({\n      key,\n      chunk,\n    }));\n\n    const chunkBiomeMapArray = Array.from(this.chunkBiomeMap.entries()).map(([key, value]) => ({\n      key,\n      value,\n    }));\n\n    return {\n      seed: this.seed,\n      chunks: chunksArray,\n      chunkBiomeMap: chunkBiomeMapArray,\n      allPortals: this.allPortals,\n      unlinkedPortal: this.unlinkedPortal,\n      killedEnemyIds: Array.from(this.killedEnemyIds),\n    };\n  }\n\n  public hydrateWorldData(worldData: any): void {\n    this.seed = worldData.seed;\n    \n    this.featureGenerator = new BiomeFeatureGenerator(this.seed);\n    \n    this.chunks.clear();\n    worldData.chunks.forEach(({ key, chunk }: any) => {\n      this.chunks.set(key, chunk);\n    });\n\n    this.chunkBiomeMap.clear();\n    worldData.chunkBiomeMap.forEach(({ key, value }: any) => {\n      this.chunkBiomeMap.set(key, value);\n    });\n\n    this.allPortals = worldData.allPortals || [];\n    this.unlinkedPortal = worldData.unlinkedPortal || null;\n    this.killedEnemyIds = new Set(worldData.killedEnemyIds || []);\n  }\n}\n","size_bytes":25162},"src/game/VoidSubdivider.ts":{"content":"import { Vector2, Enemy } from '../types/game';\nimport { createVector, generateId, vectorDistance, vectorNormalize, vectorScale, vectorAdd, vectorSubtract, vectorFromAngle } from './utils';\n\nexport interface VoidSubdivider extends Enemy {\n  type: 'boss';\n  bossType: 'void_subdivider';\n  segments: VoidSegment[];\n  attackTimer: number;\n  attackPhase: 'idle' | 'dash' | 'teleport' | 'breath' | 'coil' | 'tendril_strike';\n  phaseTimer: number;\n  breathDirection?: number;\n  breathTimer?: number;\n  dashDirection?: Vector2;\n  dashSpeed?: number;\n  dashDuration?: number;\n  teleportCooldown: number;\n  tendrilAttacks: TendrilAttack[];\n  spawnAnimation: number;\n  isFullySpawned: boolean;\n}\n\nexport interface VoidSegment {\n  position: Vector2;\n  targetPosition: Vector2;\n  rotation: number;\n  size: number;\n  offset: Vector2;\n}\n\nexport interface TendrilAttack {\n  id: string;\n  startPos: Vector2;\n  endPos: Vector2;\n  progress: number;\n  damage: number;\n  width: number;\n}\n\nexport function createVoidSubdivider(spawnPos: Vector2): VoidSubdivider {\n  const segmentCount = 24;\n  const segments: VoidSegment[] = [];\n\n  for (let i = 0; i < segmentCount; i++) {\n    const offsetDistance = i * 45;\n    const angle = Math.PI * 1.5;\n    const offset = createVector(\n      Math.cos(angle) * offsetDistance,\n      Math.sin(angle) * offsetDistance\n    );\n\n    segments.push({\n      position: createVector(spawnPos.x, spawnPos.y),\n      targetPosition: createVector(spawnPos.x, spawnPos.y),\n      rotation: 0,\n      size: 50 - (i * 1.5),\n      offset,\n    });\n  }\n\n  return {\n    id: generateId(),\n    type: 'boss',\n    bossType: 'void_subdivider',\n    position: createVector(spawnPos.x, spawnPos.y),\n    velocity: createVector(0, 0),\n    size: 60,\n    health: 15000,\n    maxHealth: 15000,\n    damage: 40,\n    speed: 2.5,\n    rotation: 0,\n    color: '#1a0a2e',\n    attackCooldown: 0,\n    currencyDrop: 2500,\n    segments,\n    attackTimer: 0,\n    attackPhase: 'idle',\n    phaseTimer: 0,\n    teleportCooldown: 0,\n    tendrilAttacks: [],\n    spawnAnimation: 0,\n    isFullySpawned: false,\n  };\n}\n\nexport function updateVoidSubdivider(\n  boss: VoidSubdivider,\n  dt: number,\n  playerPos: Vector2,\n  createParticlesFn: (pos: Vector2, count: number, color: string, lifetime: number) => void\n): void {\n  if (!boss.isFullySpawned) {\n    boss.spawnAnimation += dt * 0.8;\n\n    if (boss.spawnAnimation >= 1) {\n      boss.isFullySpawned = true;\n    }\n\n    for (let i = 0; i < boss.segments.length; i++) {\n      const segment = boss.segments[i];\n      const targetY = boss.position.y + i * 45;\n      const progress = Math.min(boss.spawnAnimation, 1);\n      segment.position.y = boss.position.y + (targetY - boss.position.y) * progress;\n      segment.position.x = boss.position.x;\n    }\n\n    if (Math.random() < 0.1) {\n      createParticlesFn(boss.segments[0].position, 3, '#7c3aed', 0.4);\n    }\n\n    return;\n  }\n\n  boss.attackTimer += dt;\n  boss.phaseTimer += dt;\n  boss.teleportCooldown = Math.max(0, boss.teleportCooldown - dt);\n\n  const distanceToPlayer = vectorDistance(boss.position, playerPos);\n\n  if (boss.phaseTimer >= 2 && boss.attackPhase === 'idle') {\n    const rand = Math.random();\n\n    if (boss.teleportCooldown <= 0 && rand < 0.15) {\n      boss.attackPhase = 'teleport';\n      boss.phaseTimer = 0;\n    } else if (rand < 0.3) {\n      boss.attackPhase = 'dash';\n      boss.phaseTimer = 0;\n      const dirToPlayer = vectorNormalize(vectorSubtract(playerPos, boss.position));\n      boss.dashDirection = dirToPlayer;\n      boss.dashSpeed = 18;\n      boss.dashDuration = 0.6;\n    } else if (rand < 0.5) {\n      boss.attackPhase = 'breath';\n      boss.phaseTimer = 0;\n      boss.breathTimer = 0;\n      boss.breathDirection = Math.atan2(\n        playerPos.y - boss.position.y,\n        playerPos.x - boss.position.x\n      );\n    } else if (rand < 0.7) {\n      boss.attackPhase = 'coil';\n      boss.phaseTimer = 0;\n    } else {\n      boss.attackPhase = 'tendril_strike';\n      boss.phaseTimer = 0;\n    }\n  }\n\n  switch (boss.attackPhase) {\n    case 'idle':\n      if (distanceToPlayer > 100) {\n        const dirToPlayer = vectorNormalize(vectorSubtract(playerPos, boss.position));\n        boss.velocity = vectorScale(dirToPlayer, boss.speed * 0.7);\n      } else {\n        const angle = Math.atan2(\n          playerPos.y - boss.position.y,\n          playerPos.x - boss.position.x\n        );\n        const orbitDir = vectorFromAngle(angle + Math.PI / 2);\n        boss.velocity = vectorScale(orbitDir, boss.speed * 0.5);\n      }\n      break;\n\n    case 'dash':\n      if (boss.dashDirection && boss.dashSpeed && boss.dashDuration) {\n        boss.velocity = vectorScale(boss.dashDirection, boss.dashSpeed);\n\n        if (boss.phaseTimer >= boss.dashDuration) {\n          boss.attackPhase = 'idle';\n          boss.phaseTimer = 0;\n          boss.velocity = createVector(0, 0);\n        }\n\n        if (Math.random() < 0.3) {\n          createParticlesFn(boss.position, 4, '#7c3aed', 0.3);\n        }\n      }\n      break;\n\n    case 'teleport':\n      if (boss.phaseTimer < 0.5) {\n        boss.velocity = createVector(0, 0);\n        if (Math.random() < 0.4) {\n          createParticlesFn(boss.position, 8, '#a78bfa', 0.5);\n        }\n      } else if (boss.phaseTimer >= 0.5 && boss.phaseTimer < 0.6) {\n        const angle = Math.random() * Math.PI * 2;\n        const distance = 300 + Math.random() * 200;\n        boss.position.x = playerPos.x + Math.cos(angle) * distance;\n        boss.position.y = playerPos.y + Math.sin(angle) * distance;\n\n        createParticlesFn(boss.position, 30, '#7c3aed', 0.8);\n\n        for (const segment of boss.segments) {\n          segment.position = { ...boss.position };\n        }\n      } else if (boss.phaseTimer >= 1.2) {\n        boss.attackPhase = 'idle';\n        boss.phaseTimer = 0;\n        boss.teleportCooldown = 8;\n      }\n      break;\n\n    case 'breath':\n      boss.velocity = createVector(0, 0);\n      boss.breathTimer = (boss.breathTimer || 0) + dt;\n\n      if (boss.breathTimer >= 2.5) {\n        boss.attackPhase = 'idle';\n        boss.phaseTimer = 0;\n      }\n      break;\n\n    case 'coil':\n      const coilCenter = {\n        x: playerPos.x + Math.cos(boss.phaseTimer * 2) * 150,\n        y: playerPos.y + Math.sin(boss.phaseTimer * 2) * 150,\n      };\n      const dirToCoil = vectorNormalize(vectorSubtract(coilCenter, boss.position));\n      boss.velocity = vectorScale(dirToCoil, boss.speed * 1.5);\n\n      if (boss.phaseTimer >= 3) {\n        boss.attackPhase = 'idle';\n        boss.phaseTimer = 0;\n      }\n      break;\n\n    case 'tendril_strike':\n      if (boss.phaseTimer < 0.8) {\n        boss.velocity = createVector(0, 0);\n\n        if (boss.phaseTimer > 0.3 && boss.tendrilAttacks.length === 0) {\n          const attackCount = 5 + Math.floor(Math.random() * 4);\n          for (let i = 0; i < attackCount; i++) {\n            const angle = (i / attackCount) * Math.PI * 2 + Math.random() * 0.5;\n            const distance = 400 + Math.random() * 300;\n            const endPos = {\n              x: boss.position.x + Math.cos(angle) * distance,\n              y: boss.position.y + Math.sin(angle) * distance,\n            };\n\n            boss.tendrilAttacks.push({\n              id: generateId(),\n              startPos: { ...boss.position },\n              endPos,\n              progress: 0,\n              damage: 30,\n              width: 20,\n            });\n          }\n        }\n      } else if (boss.phaseTimer >= 2) {\n        boss.attackPhase = 'idle';\n        boss.phaseTimer = 0;\n        boss.tendrilAttacks = [];\n      }\n      break;\n  }\n\n  boss.position = vectorAdd(boss.position, vectorScale(boss.velocity, dt * 60));\n\n  updateBossSegments(boss, dt);\n  updateTendrilAttacks(boss, dt);\n}\n\nfunction updateBossSegments(boss: VoidSubdivider, dt: number): void {\n  if (boss.segments.length === 0) return;\n\n  boss.segments[0].targetPosition = { ...boss.position };\n\n  for (let i = 0; i < boss.segments.length; i++) {\n    const segment = boss.segments[i];\n\n    if (i === 0) {\n      const distance = vectorDistance(segment.position, segment.targetPosition);\n      if (distance > 5) {\n        const dir = vectorNormalize(vectorSubtract(segment.targetPosition, segment.position));\n        const moveSpeed = Math.min(distance * 8, 600);\n        segment.position = vectorAdd(segment.position, vectorScale(dir, moveSpeed * dt));\n      } else {\n        segment.position = { ...segment.targetPosition };\n      }\n    } else {\n      const prevSegment = boss.segments[i - 1];\n      const idealDistance = 45;\n      const dir = vectorSubtract(prevSegment.position, segment.position);\n      const currentDistance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n\n      if (currentDistance > 0) {\n        const normalizedDir = {\n          x: dir.x / currentDistance,\n          y: dir.y / currentDistance,\n        };\n\n        const targetPos = {\n          x: prevSegment.position.x - normalizedDir.x * idealDistance,\n          y: prevSegment.position.y - normalizedDir.y * idealDistance,\n        };\n\n        const moveAmount = 0.3;\n        segment.position.x += (targetPos.x - segment.position.x) * moveAmount;\n        segment.position.y += (targetPos.y - segment.position.y) * moveAmount;\n      }\n\n      segment.rotation = Math.atan2(dir.y, dir.x);\n    }\n  }\n}\n\nfunction updateTendrilAttacks(boss: VoidSubdivider, dt: number): void {\n  boss.tendrilAttacks = boss.tendrilAttacks.filter(attack => {\n    attack.progress += dt * 1.5;\n    return attack.progress < 1;\n  });\n}\n\nexport function checkVoidSubdividerCollision(\n  boss: VoidSubdivider,\n  point: Vector2,\n  size: number\n): boolean {\n  if (!boss.isFullySpawned) return false;\n\n  for (const segment of boss.segments) {\n    const distance = vectorDistance(segment.position, point);\n    if (distance < segment.size / 2 + size / 2) {\n      return true;\n    }\n  }\n\n  for (const tendril of boss.tendrilAttacks) {\n    if (tendril.progress < 0.2 || tendril.progress > 0.9) continue;\n\n    const currentEnd = {\n      x: tendril.startPos.x + (tendril.endPos.x - tendril.startPos.x) * tendril.progress,\n      y: tendril.startPos.y + (tendril.endPos.y - tendril.startPos.y) * tendril.progress,\n    };\n\n    const distToLine = pointToLineDistance(point, tendril.startPos, currentEnd);\n    if (distToLine < tendril.width / 2 + size / 2) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction pointToLineDistance(point: Vector2, lineStart: Vector2, lineEnd: Vector2): number {\n  const dx = lineEnd.x - lineStart.x;\n  const dy = lineEnd.y - lineStart.y;\n  const length = Math.sqrt(dx * dx + dy * dy);\n\n  if (length === 0) {\n    return vectorDistance(point, lineStart);\n  }\n\n  const t = Math.max(0, Math.min(1, ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / (length * length)));\n  const projX = lineStart.x + t * dx;\n  const projY = lineStart.y + t * dy;\n\n  return vectorDistance(point, { x: projX, y: projY });\n}\n","size_bytes":10846},"src/App.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport GameCanvas from './components/GameCanvas';\nimport HUD from './components/HUD';\nimport { GameEngine } from './game/GameEngine';\nimport { GameState, Weapon } from './types/game';\nimport { X, Archive, ShoppingCart, FlaskConical, Users, Cpu } from 'lucide-react';\nimport Minimap from './components/Minimap';\nimport CraftingMenu from './components/CraftingMenu';\nimport TouchControls from './components/TouchControls';\nimport ConnectionMenu from './components/ConnectionMenu';\nimport { MultiplayerManager } from './game/MultiplayerManager';\nimport { DRONE_DEFINITIONS } from './game/DroneSystem';\nimport { DroneAbilities } from './components/DroneAbilities';\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState | null>(null);\n  const gameEngineRef = useRef<GameEngine | null>(null);\n  const animationFrameId = useRef<number>();\n  const lastTime = useRef<number>(0);\n\n  const [isInventoryOpen, setInventoryOpen] = useState(false);\n  const [isCraftingOpen, setCraftingOpen] = useState(false);\n  const [isAdminOpen, setAdminOpen] = useState(false);\n  const [isAdminMode, setAdminMode] = useState(false);\n  const [adminPassword, setAdminPassword] = useState('');\n  const [touchControlsVisible, setTouchControlsVisible] = useState(false);\n  const touchMoveRef = useRef({ x: 0, y: 0 });\n  const touchShootRef = useRef({ x: 0, y: 0, active: false });\n  \n  const [isMultiplayerOpen, setMultiplayerOpen] = useState(false);\n  const [multiplayerManager] = useState(() => new MultiplayerManager());\n  const [multiplayerRole, setMultiplayerRole] = useState<'host' | 'client' | 'none'>('none');\n  const [peerId, setPeerId] = useState('');\n  const [connectionCount, setConnectionCount] = useState(0);\n  const lastSyncTime = useRef(0);\n\n  useEffect(() => {\n    const engine = new GameEngine();\n    gameEngineRef.current = engine;\n    setGameState(engine.getState());\n    lastTime.current = performance.now();\n\n    multiplayerManager.onStateUpdate((state) => {\n      if (gameEngineRef.current) {\n        gameEngineRef.current.applyMultiplayerState(state, multiplayerManager.getPeerId());\n      }\n    });\n\n    multiplayerManager.onPlayerInput((input) => {\n      if (gameEngineRef.current && multiplayerManager.getRole() === 'host') {\n        gameEngineRef.current.updateRemotePlayerFromInput(input.playerId, input);\n      }\n    });\n\n    multiplayerManager.onConnectionChange(() => {\n      setConnectionCount(multiplayerManager.getConnectionCount());\n    });\n\n    multiplayerManager.onWorldInit((worldData) => {\n      if (gameEngineRef.current) {\n        console.log('Applying world state from host');\n        gameEngineRef.current.applyWorldState(worldData);\n      }\n    });\n\n    multiplayerManager.onClientConnected((peerId) => {\n      if (gameEngineRef.current && multiplayerManager.getRole() === 'host') {\n        console.log('Sending world state to new client:', peerId);\n        const worldState = gameEngineRef.current.getWorldState();\n        multiplayerManager.sendWorldInit(worldState, peerId);\n      }\n    });\n\n    multiplayerManager.onPositionSync((playerId, position, velocity) => {\n      if (gameEngineRef.current && multiplayerManager.getRole() === 'host') {\n        gameEngineRef.current.syncRemotePlayerPosition(playerId, position, velocity);\n      }\n    });\n\n    const gameLoop = (time: number) => {\n      if (!gameEngineRef.current) return;\n      const deltaTime = (time - lastTime.current) / 1000;\n      lastTime.current = time;\n\n      const role = multiplayerManager.getRole();\n      \n      if (role === 'host') {\n        gameEngineRef.current.updateRemotePlayerPositions(deltaTime);\n        gameEngineRef.current.update(deltaTime);\n        \n        if (time - lastSyncTime.current > 50) {\n          const state = gameEngineRef.current.getMultiplayerState(multiplayerManager.getPeerId());\n          multiplayerManager.broadcastGameState(state);\n          lastSyncTime.current = time;\n        }\n      } else if (role === 'client') {\n        if (multiplayerManager.isWorldInitialized()) {\n          gameEngineRef.current.updateRemotePlayerPositions(deltaTime);\n          gameEngineRef.current.update(deltaTime);\n\n          const keys = Array.from(gameEngineRef.current.getKeys());\n          const mousePos = gameEngineRef.current.getMousePos();\n          const mouseDown = gameEngineRef.current.getMouseDown();\n          const state = gameEngineRef.current.getState();\n          const activeWeaponIndex = state.player.activeWeaponIndex;\n          const username = localStorage.getItem('mp_username') || 'Player';\n\n          multiplayerManager.sendPlayerInput({\n            keys,\n            mousePos,\n            mouseDown,\n            timestamp: Date.now(),\n            playerId: multiplayerManager.getPeerId(),\n            activeWeaponIndex,\n            username,\n          });\n\n          if (time - lastSyncTime.current > 50) {\n            multiplayerManager.sendPositionSync(state.player.position, state.player.velocity);\n            lastSyncTime.current = time;\n          }\n        }\n      } else {\n        gameEngineRef.current.update(deltaTime);\n      }\n\n      setGameState({ ...gameEngineRef.current.getState() });\n\n      animationFrameId.current = requestAnimationFrame(gameLoop);\n    };\n\n    animationFrameId.current = requestAnimationFrame(gameLoop);\n\n    engine.setTouchInput(touchMoveRef, touchShootRef);\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!gameEngineRef.current) return;\n      const key = e.key.toLowerCase();\n\n      if (key === 'i') {\n        setInventoryOpen(prev => !prev);\n        gameEngineRef.current.togglePause();\n        return;\n      }\n      if (key === 'c') {\n        setCraftingOpen(prev => !prev);\n        gameEngineRef.current.togglePause();\n        return;\n      }\n      if (key === ' ' || e.code === 'Space') {\n        e.preventDefault();\n        gameEngineRef.current.dash();\n      }\n      if (key >= '1' && key <= '9') {\n        gameEngineRef.current.switchWeapon(parseInt(key) - 1);\n      }\n      \n      const manualDrones = gameEngineRef.current.getState().drones.filter(drone => {\n        const def = DRONE_DEFINITIONS[drone.droneType];\n        return def.activeTrigger === 'manual' && def.activeEffect;\n      });\n      \n      if (key === 'q' && manualDrones[0]) {\n        gameEngineRef.current.manuallyActivateDroneAbility(manualDrones[0].droneType);\n      }\n      if (key === 'e' && manualDrones[1]) {\n        gameEngineRef.current.manuallyActivateDroneAbility(manualDrones[1].droneType);\n      }\n      if (key === 'r' && manualDrones[2]) {\n        gameEngineRef.current.manuallyActivateDroneAbility(manualDrones[2].droneType);\n      }\n      \n      gameEngineRef.current.setKeys(prev => new Set(prev).add(key));\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (!gameEngineRef.current) return;\n      const key = e.key.toLowerCase();\n      gameEngineRef.current.setKeys(prev => {\n        const newKeys = new Set(prev);\n        newKeys.delete(key);\n        return newKeys;\n      });\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n\n  const handleReset = () => {\n    if (!gameEngineRef.current) return;\n    \n    const role = multiplayerManager.getRole();\n    \n    if (role === 'client') {\n      const state = gameEngineRef.current.getState();\n      const hostPlayer = state.remotePlayers.find(rp => rp.id === 'host');\n      \n      if (hostPlayer) {\n        gameEngineRef.current.respawnPlayer(hostPlayer.player.position);\n      } else {\n        gameEngineRef.current.respawnPlayer();\n      }\n      \n      const newState = gameEngineRef.current.getState();\n      multiplayerManager.sendPositionSync(newState.player.position, newState.player.velocity);\n    } else if (role === 'host') {\n      const currentPos = gameEngineRef.current.getState().player.position;\n      gameEngineRef.current.respawnPlayer(currentPos);\n    } else {\n      gameEngineRef.current.reset();\n    }\n    \n    setInventoryOpen(false);\n    setCraftingOpen(false);\n  };\n\n  const handleEquip = (weaponId: string) => {\n    gameEngineRef.current?.equipWeapon(weaponId);\n  };\n\n  const handleUnequip = (weaponId: string) => {\n    gameEngineRef.current?.unequipWeapon(weaponId);\n  };\n\n  const handleDelete = (weaponId: string) => {\n    gameEngineRef.current?.deleteWeapon(weaponId);\n  };\n\n  const handleEquipDrone = (droneType: import('./types/game').DroneType) => {\n    gameEngineRef.current?.equipDrone(droneType);\n  };\n\n  const handleUnequipDrone = (droneType: import('./types/game').DroneType) => {\n    gameEngineRef.current?.unequipDrone(droneType);\n  };\n\n  const handleDeleteDrone = (droneType: import('./types/game').DroneType) => {\n    gameEngineRef.current?.deleteDrone(droneType);\n  };\n\n  const handleUseConsumable = (consumableId: string) => {\n    gameEngineRef.current?.useConsumable(consumableId);\n  };\n\n  const handleCreateGame = async () => {\n    const id = await multiplayerManager.createGame();\n    setPeerId(id);\n    setMultiplayerRole('host');\n    return id;\n  };\n\n  const handleJoinGame = async (hostId: string) => {\n    await multiplayerManager.joinGame(hostId);\n    setPeerId(multiplayerManager.getPeerId());\n    setMultiplayerRole('client');\n  };\n\n  if (!gameState || !gameEngineRef.current) {\n    return <div className=\"w-screen h-screen bg-gray-900 flex items-center justify-center text-white\">Initializing Subsystems...</div>;\n  }\n\n  const inventory = gameEngineRef.current.getInventory();\n  const allInventoryWeapons = inventory.getWeapons();\n  const equippedWeapons = gameState.player.equippedWeapons;\n  const equippedWeaponIds = new Set(equippedWeapons.map(w => w.id));\n  const stowedWeapons = allInventoryWeapons.filter(invW => !equippedWeaponIds.has(invW.weapon.id));\n  \n  const allInventoryDrones = inventory.getDrones();\n  const equippedDrones = allInventoryDrones.filter(d => d.equipped);\n  const stowedDrones = allInventoryDrones.filter(d => !d.equipped);\n  const maxEquippedDrones = inventory.getMaxEquippedDrones();\n\n  return (\n    <div className=\"relative w-screen h-screen bg-gray-900 flex items-center justify-center text-white overflow-hidden\" style={{ fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif' }}>\n      <GameCanvas\n        gameState={gameState}\n        camera={gameEngineRef.current.getCamera()}\n        obstacles={gameEngineRef.current.getObstacles()}\n        resourceNodes={gameEngineRef.current.getResourceNodes()}\n        portals={gameEngineRef.current.getPortals()}\n        extractionPoints={gameEngineRef.current.getExtractionPoints()}\n        chests={gameEngineRef.current.getChests()}\n        biomeFeatures={gameEngineRef.current.getBiomeFeatures()}\n        gameEngineRef={gameEngineRef}\n      />\n      <HUD\n        gameState={gameState}\n        interactionText={\n          gameEngineRef.current?.getActiveOminousTendril()?.canInteract\n            ? 'Press [F] to Awaken the Void Subdivider'\n            : undefined\n        }\n      />\n\n      {!gameState.isPaused && (\n        <DroneAbilities\n          drones={gameState.drones}\n          onManualActivate={(droneType) => {\n            if (gameEngineRef.current) {\n              gameEngineRef.current.manuallyActivateDroneAbility(droneType);\n            }\n          }}\n        />\n      )}\n\n      <div className=\"absolute top-4 right-4 flex flex-col items-end space-y-4 z-10\">\n        <Minimap\n          gameState={gameState}\n          chests={gameEngineRef.current.getChests()}\n          extractionPoints={gameEngineRef.current.getExtractionPoints()}\n          portals={gameEngineRef.current.getPortals()}\n        />\n        <div className=\"bg-slate-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-3 shadow-lg w-64\">\n            <h2 className=\"text-xs font-bold text-slate-300 mb-2\">SYSTEMS</h2>\n            <div className=\"flex flex-col space-y-2\">\n                <button\n                    onClick={() => {\n                        setInventoryOpen(prev => !prev);\n                        gameEngineRef.current?.togglePause();\n                    }}\n                    className=\"flex items-center justify-between w-full px-3 py-2 bg-slate-800/50 hover:bg-slate-700/70 rounded-md text-sm font-semibold transition-colors\"\n                >\n                    <div className=\"flex items-center gap-2\">\n                        <Archive className=\"w-4 h-4 text-cyan-300\" />\n                        <span>INVENTORY</span>\n                    </div>\n                    <span className=\"text-xs bg-slate-700 px-2 py-1 rounded\">I</span>\n                </button>\n                <button\n                    onClick={() => {\n                        setCraftingOpen(prev => !prev);\n                        gameEngineRef.current?.togglePause();\n                    }}\n                    className=\"flex items-center justify-between w-full px-3 py-2 bg-slate-800/50 hover:bg-slate-700/70 rounded-md text-sm font-semibold transition-colors\"\n                >\n                    <div className=\"flex items-center gap-2\">\n                        <FlaskConical className=\"w-4 h-4 text-cyan-300\" />\n                        <span>CRAFTING</span>\n                    </div>\n                    <span className=\"text-xs bg-slate-700 px-2 py-1 rounded\">C</span>\n                </button>\n                <button\n                    onClick={() => setMultiplayerOpen(prev => !prev)}\n                    className=\"flex items-center justify-between w-full px-3 py-2 bg-slate-800/50 hover:bg-slate-700/70 rounded-md text-sm font-semibold transition-colors\"\n                >\n                    <div className=\"flex items-center gap-2\">\n                        <Users className=\"w-4 h-4 text-cyan-300\" />\n                        <span>MULTIPLAYER</span>\n                    </div>\n                    {multiplayerRole !== 'none' && <span className=\"text-xs bg-green-700 px-2 py-1 rounded\">{connectionCount + 1}P</span>}\n                </button>\n                <button\n                    onClick={() => setAdminOpen(prev => !prev)}\n                    className=\"flex items-center justify-between w-full px-3 py-2 bg-slate-800/50 hover:bg-slate-700/70 rounded-md text-sm font-semibold transition-colors\"\n                >\n                    <div className=\"flex items-center gap-2\">\n                        <ShoppingCart className=\"w-4 h-4 text-cyan-300\" />\n                        <span>ADMIN</span>\n                    </div>\n                    {isAdminMode && <span className=\"text-xs bg-green-700 px-2 py-1 rounded\">ACTIVE</span>}\n                </button>\n            </div>\n        </div>\n      </div>\n\n      {gameState.isGameOver && (\n        <div className=\"absolute inset-0 bg-black/70 flex flex-col items-center justify-center z-50\">\n          <h1 className=\"text-6xl font-bold text-red-500 mb-4\">SYSTEM FAILURE</h1>\n          <p className=\"text-xl mb-8\">Final Score: {gameState.score}</p>\n          <button\n            onClick={handleReset}\n            className=\"px-6 py-3 bg-cyan-500 text-black font-bold rounded-lg shadow-lg hover:bg-cyan-400 transition-colors\"\n          >\n            REINITIALIZE\n          </button>\n        </div>\n      )}\n\n      {isInventoryOpen && (\n        <div className=\"absolute inset-0 bg-black/80 backdrop-blur-md flex flex-col items-center justify-center z-40 p-8\" style={{ fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif' }}>          <button\n              onClick={() => {\n                  setInventoryOpen(false);\n                  gameEngineRef.current?.togglePause();\n              }}\n              className=\"absolute top-6 right-6 text-slate-400 hover:text-white transition-colors z-50\"\n          >\n              <X size={28} />\n          </button>\n          <h1 className=\"text-4xl font-bold text-cyan-300 mb-6 tracking-wide\">INVENTORY</h1>\n          <div className=\"w-full max-w-6xl h-[80vh] grid grid-cols-4 gap-6\">\n            <div className=\"col-span-1 bg-slate-900/80 border border-cyan-500/30 rounded-lg p-4 overflow-y-auto\">\n              <h2 className=\"text-2xl font-semibold text-slate-300 mb-4 border-b border-slate-700 pb-2\">EQUIPPED</h2>\n              <div className=\"space-y-3\">\n                {equippedWeapons.map(w => (\n                  <WeaponCard key={w.id} weapon={w} onAction={handleUnequip} actionLabel=\"Unequip\" />\n                ))}\n                {equippedWeapons.length < inventory.getMaxEquipped() && Array.from({ length: inventory.getMaxEquipped() - equippedWeapons.length }).map((_, i) => (\n                  <div key={i} className=\"h-24 border-2 border-dashed border-slate-700 rounded-lg flex items-center justify-center text-slate-600\">\n                    EMPTY SLOT\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-6 pt-4 border-t border-slate-700\">\n                <h2 className=\"text-xl font-semibold text-slate-300 mb-3\">RESOURCES</h2>\n                <div className=\"space-y-2 text-xs\">\n                  {[\n                    { name: 'Energy', value: Math.floor(gameState.player.resources.energy), color: '#60a5fa' },\n                    { name: 'Core Dust', value: Math.floor(gameState.player.resources.coreDust), color: '#a78bfa' },\n                    { name: 'Flux', value: Math.floor(gameState.player.resources.flux), color: '#c084fc' },\n                    { name: 'Geo Shards', value: Math.floor(gameState.player.resources.geoShards), color: '#22d3ee' },\n                    { name: 'Alloy Fragments', value: Math.floor(gameState.player.resources.alloyFragments), color: '#94a3b8' },\n                    { name: 'Singularity Core', value: Math.floor(gameState.player.resources.singularityCore), color: '#fbbf24' },\n                    { name: 'Cryo Kelp', value: Math.floor(gameState.player.resources.cryoKelp), color: '#7dd3fc' },\n                    { name: 'Obsidian Heart', value: Math.floor(gameState.player.resources.obsidianHeart), color: '#fb923c' },\n                    { name: 'Gloom Root', value: Math.floor(gameState.player.resources.gloomRoot), color: '#a3e635' },\n                    { name: 'Resonant Crystal', value: Math.floor(gameState.player.resources.resonantCrystal), color: '#22d3ee' },\n                    { name: 'Void Essence', value: Math.floor(gameState.player.resources.voidEssence), color: '#c084fc' },\n                    { name: 'Bioluminescent Pearl', value: Math.floor(gameState.player.resources.bioluminescentPearl), color: '#5eead4' },\n                    { name: 'Sunpetal Bloom', value: Math.floor(gameState.player.resources.sunpetalBloom), color: '#fde047' },\n                    { name: 'Aetherium Shard', value: Math.floor(gameState.player.resources.aetheriumShard), color: '#a5b4fc' },\n                  ].filter(r => r.value > 0).map(resource => (\n                    <div key={resource.name} className=\"flex items-center justify-between\">\n                      <span className=\"text-slate-400\">{resource.name}</span>\n                      <span className=\"font-bold\" style={{ color: resource.color }}>{resource.value}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"mt-6 pt-4 border-t border-slate-700\">\n                <h2 className=\"text-xl font-semibold text-slate-300 mb-3\">DRONES</h2>\n                <div className=\"space-y-2\">\n                  <div className=\"text-xs text-slate-400 mb-2\">\n                    Equipped: <span className=\"text-cyan-400 font-bold\">{equippedDrones.length}/{maxEquippedDrones}</span>\n                  </div>\n                  {equippedDrones.map(invDrone => (\n                    <DroneCard key={invDrone.droneType} droneType={invDrone.droneType} onAction={handleUnequipDrone} actionLabel=\"Unequip\" />\n                  ))}\n                  {equippedDrones.length < maxEquippedDrones && Array.from({ length: maxEquippedDrones - equippedDrones.length }).map((_, i) => (\n                    <div key={i} className=\"h-16 border-2 border-dashed border-slate-700 rounded-lg flex items-center justify-center text-slate-600 text-xs\">\n                      EMPTY SLOT\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-3 bg-slate-900/80 border border-cyan-500/30 rounded-lg p-4 overflow-y-auto\">\n              <h2 className=\"text-2xl font-semibold text-slate-300 mb-4 border-b border-slate-700 pb-2\">STOWED</h2>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {stowedWeapons.map(invW => (\n                  <WeaponCard key={invW.weapon.id} weapon={invW.weapon} onAction={inventory.canEquipMore() ? handleEquip : handleDelete} actionLabel={inventory.canEquipMore() ? \"Equip\" : \"Delete\"} />\n                ))}\n              </div>\n              {stowedDrones.length > 0 && (\n                <>\n                  <h2 className=\"text-2xl font-semibold text-slate-300 mb-4 border-b border-slate-700 pb-2 mt-6\">STOWED DRONES</h2>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {stowedDrones.map(invDrone => (\n                      <DroneCard key={invDrone.droneType} droneType={invDrone.droneType} onAction={inventory.canEquipMoreDrones() ? handleEquipDrone : handleDeleteDrone} actionLabel={inventory.canEquipMoreDrones() ? \"Equip\" : \"Delete\"} />\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n          <p className=\"mt-4 text-slate-400 text-sm\">Press 'I' to close</p>\n        </div>\n      )}\n\n      {isAdminOpen && (\n        <div className=\"absolute inset-0 bg-black/80 backdrop-blur-md flex flex-col items-center justify-center z-40 p-8\">\n          <button\n            onClick={() => setAdminOpen(false)}\n            className=\"absolute top-6 right-6 text-slate-400 hover:text-white transition-colors z-50\"\n          >\n            <X size={28} />\n          </button>\n          <div className=\"bg-slate-900/90 border-2 border-red-500/50 rounded-lg p-8 max-w-md w-full\">\n            <h1 className=\"text-3xl font-bold text-red-400 mb-6 tracking-wide text-center\">ADMIN PANEL</h1>\n\n            {!isAdminMode ? (\n              <div>\n                <p className=\"text-slate-300 mb-4\">Enter admin password:</p>\n                <input\n                  type=\"password\"\n                  value={adminPassword}\n                  onChange={(e) => setAdminPassword(e.target.value)}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter' && adminPassword === 'Windshark88affirm!') {\n                      setAdminMode(true);\n                      setAdminPassword('');\n                    }\n                  }}\n                  className=\"w-full px-4 py-2 bg-slate-800 border border-slate-600 rounded text-white mb-4\"\n                  placeholder=\"Password\"\n                />\n                <button\n                  onClick={() => {\n                    if (adminPassword === 'Windshark88affirm!') {\n                      setAdminMode(true);\n                      setAdminPassword('');\n                    } else {\n                      alert('Incorrect password');\n                    }\n                  }}\n                  className=\"w-full px-4 py-2 bg-red-600 hover:bg-red-700 rounded font-bold text-white transition-colors\"\n                >\n                  UNLOCK\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"text-center mb-4\">\n                  <span className=\"text-green-400 font-bold\">ADMIN MODE ACTIVE</span>\n                </div>\n\n                <div>\n                  <h3 className=\"text-slate-300 font-semibold mb-2\">Spawn Enemies</h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <button\n                      onClick={() => gameEngineRef.current?.spawnAdminEnemy('grunt')}\n                      className=\"px-3 py-2 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors\"\n                    >\n                      Grunt\n                    </button>\n                    <button\n                      onClick={() => gameEngineRef.current?.spawnAdminEnemy('tank')}\n                      className=\"px-3 py-2 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors\"\n                    >\n                      Tank\n                    </button>\n                    <button\n                      onClick={() => gameEngineRef.current?.spawnAdminEnemy('speedy')}\n                      className=\"px-3 py-2 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors\"\n                    >\n                      Speedy\n                    </button>\n                    <button\n                      onClick={() => gameEngineRef.current?.spawnAdminWeapon()}\n                      className=\"px-3 py-2 bg-purple-700 hover:bg-purple-600 rounded text-sm transition-colors\"\n                    >\n                      Weapon Crate\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-slate-300 font-semibold mb-2\">Spawn Weapons</h3>\n                  <button\n                    onClick={() => gameEngineRef.current?.spawnAdminWeapon()}\n                    className=\"w-full px-3 py-2 bg-cyan-700 hover:bg-cyan-600 rounded text-sm transition-colors\"\n                  >\n                    Spawn Random Weapon Crate\n                  </button>\n                </div>\n\n                <div>\n                  <h3 className=\"text-slate-300 font-semibold mb-2\">Resource Cheats</h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <button\n                      onClick={() => gameEngineRef.current?.addAdminResources(100)}\n                      className=\"px-3 py-2 bg-yellow-700 hover:bg-yellow-600 rounded text-sm transition-colors\"\n                    >\n                      +100 Resources\n                    </button>\n                    <button\n                      onClick={() => gameEngineRef.current?.addAdminCurrency(500)}\n                      className=\"px-3 py-2 bg-green-700 hover:bg-green-600 rounded text-sm transition-colors\"\n                    >\n                      +500 Currency\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"max-h-48 overflow-y-auto\">\n                  <h3 className=\"text-slate-300 font-semibold mb-2\">Add Drones to Inventory</h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {(['assault_drone', 'shield_drone', 'repair_drone', 'scout_drone', 'plasma_drone', 'cryo_drone', 'explosive_drone', 'emp_drone', 'sniper_drone', 'laser_drone', 'swarm_drone', 'gravity_drone', 'medic_drone', 'tesla_drone', 'void_drone'] as const).map((droneType) => (\n                      <button\n                        key={droneType}\n                        onClick={() => gameEngineRef.current?.spawnAdminDrone(droneType)}\n                        className=\"px-2 py-1.5 bg-slate-700 hover:bg-slate-600 rounded text-xs transition-colors\"\n                      >\n                        {droneType.split('_').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                <button\n                  onClick={() => setAdminMode(false)}\n                  className=\"w-full px-4 py-2 bg-red-600 hover:bg-red-700 rounded font-bold text-white transition-colors\"\n                >\n                  LOCK ADMIN MODE\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <CraftingMenu\n        isOpen={isCraftingOpen}\n        onClose={() => {\n          setCraftingOpen(false);\n          gameEngineRef.current?.togglePause();\n        }}\n        player={gameState.player}\n        craftingSystem={gameEngineRef.current.getCraftingSystem()}\n        inventory={gameEngineRef.current.getInventory()}\n        onUseConsumable={handleUseConsumable}\n      />\n\n      <TouchControls\n        onMove={(x, y) => {\n          touchMoveRef.current = { x, y };\n        }}\n        onShoot={(x, y, active) => {\n          touchShootRef.current = { x, y, active };\n        }}\n        onDash={() => gameEngineRef.current?.dash()}\n        onInteract={() => {\n          if (gameEngineRef.current) {\n            gameEngineRef.current.setKeys(prev => new Set(prev).add('f'));\n            setTimeout(() => {\n              gameEngineRef.current?.setKeys(prev => {\n                const newKeys = new Set(prev);\n                newKeys.delete('f');\n                return newKeys;\n              });\n            }, 100);\n          }\n        }}\n        onWeaponSwitch={(index) => gameEngineRef.current?.switchWeapon(index)}\n        weaponCount={gameState.player.equippedWeapons.length}\n        isVisible={touchControlsVisible}\n        onToggleVisibility={() => setTouchControlsVisible(!touchControlsVisible)}\n      />\n\n      <ConnectionMenu\n        isOpen={isMultiplayerOpen}\n        onClose={() => setMultiplayerOpen(false)}\n        onCreateGame={handleCreateGame}\n        onJoinGame={handleJoinGame}\n        isConnected={multiplayerRole !== 'none'}\n        connectionCount={connectionCount}\n        peerId={peerId}\n        role={multiplayerRole}\n        remotePlayers={gameState.remotePlayers}\n        onTeleportToPlayer={(targetPeerId) => gameEngineRef.current?.teleportToPlayer(targetPeerId)}\n        onTeleportPlayerToMe={(targetPeerId) => gameEngineRef.current?.teleportRemotePlayerToMe(targetPeerId)}\n        pvpEnabled={gameState.pvpEnabled}\n        onTogglePvP={() => gameEngineRef.current?.togglePvP()}\n      />\n    </div>\n  );\n}\n\ninterface WeaponCardProps {\n  weapon: Weapon;\n  onAction: (id: string) => void;\n  actionLabel: string;\n}\n\nconst WeaponCard = ({ weapon, onAction, actionLabel }: WeaponCardProps) => {\n  const [hoveredPerk, setHoveredPerk] = useState<any>(null);\n  const [tooltipPos, setTooltipPos] = useState({ x: 0, y: 0 });\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return '#9ca3af';\n      case 'uncommon': return '#10b981';\n      case 'rare': return '#3b82f6';\n      case 'epic': return '#a855f7';\n      case 'legendary': return '#f59e0b';\n      default: return '#6b7280';\n    }\n  };\n\n  const handlePerkHover = (perk: any, e: React.MouseEvent) => {\n    setHoveredPerk(perk);\n    const rect = e.currentTarget.getBoundingClientRect();\n    setTooltipPos({ x: rect.left + rect.width / 2, y: rect.top - 10 });\n  };\n\n  return (\n    <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-3 flex flex-col justify-between relative\">\n      <div>\n        <div className=\"flex justify-between items-start\">\n          <h3 className=\"font-semibold text-base\" style={{ color: weapon.color }}>{weapon.name}</h3>\n          <span className=\"text-xs bg-slate-700 px-2 py-1 rounded font-medium\">{weapon.type}</span>\n        </div>\n        <p className=\"text-xs text-slate-400 mb-2\">{weapon.description}</p>\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-1 text-xs mb-3\">\n          <p><span className=\"text-slate-400\">Damage:</span> <span className=\"font-medium\">{weapon.damage.toFixed(1)}</span></p>\n          <p><span className=\"text-slate-400\">Fire Rate:</span> <span className=\"font-medium\">{(1 / weapon.fireRate).toFixed(2)}/s</span></p>\n          <p><span className=\"text-slate-400\">Projectiles:</span> <span className=\"font-medium\">{weapon.projectileCount}</span></p>\n          <p><span className=\"text-slate-400\">Speed:</span> <span className=\"font-medium\">{weapon.projectileSpeed.toFixed(1)}</span></p>\n        </div>\n        <div>\n          <h4 className=\"text-xs font-semibold text-slate-300 mb-1.5\">Perks:</h4>\n          <div className=\"flex flex-wrap gap-1.5\">\n            {weapon.perks && weapon.perks.length > 0 ? (\n              weapon.perks.map((perk: any, idx: number) => (\n                <span\n                  key={perk.id || idx}\n                  className=\"text-xs px-2 py-1 rounded font-medium cursor-help\"\n                  style={{\n                    backgroundColor: `${getRarityColor(perk.rarity)}20`,\n                    color: getRarityColor(perk.rarity),\n                    border: `1px solid ${getRarityColor(perk.rarity)}50`\n                  }}\n                  onMouseEnter={(e) => handlePerkHover(perk, e)}\n                  onMouseLeave={() => setHoveredPerk(null)}\n                >\n                  {perk.name}\n                </span>\n              ))\n            ) : (\n              <span className=\"text-xs text-slate-500 italic\">None</span>\n            )}\n          </div>\n        </div>\n      </div>\n      <button\n        onClick={() => onAction(weapon.id)}\n        className=\"mt-3 w-full text-center py-2 bg-slate-700 hover:bg-slate-600 rounded-md text-sm font-semibold transition-colors\"\n      >\n        {actionLabel}\n      </button>\n      {hoveredPerk && (\n        <div\n          className=\"fixed z-[100] bg-slate-900 border-2 border-cyan-500/50 rounded-lg p-3 shadow-2xl max-w-xs pointer-events-none\"\n          style={{\n            left: `${tooltipPos.x}px`,\n            top: `${tooltipPos.y}px`,\n            transform: 'translate(-50%, -100%)',\n          }}\n        >\n          <div className=\"flex items-center gap-2 mb-1\">\n            <span\n              className=\"text-sm font-bold\"\n              style={{ color: getRarityColor(hoveredPerk.rarity) }}\n            >\n              {hoveredPerk.name}\n            </span>\n            <span\n              className=\"text-xs uppercase px-2 py-0.5 rounded\"\n              style={{\n                backgroundColor: `${getRarityColor(hoveredPerk.rarity)}20`,\n                color: getRarityColor(hoveredPerk.rarity),\n              }}\n            >\n              {hoveredPerk.rarity}\n            </span>\n          </div>\n          <p className=\"text-xs text-slate-300\">{hoveredPerk.description}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface DroneCardProps {\n  droneType: import('./types/game').DroneType;\n  onAction: (droneType: import('./types/game').DroneType) => void;\n  actionLabel: string;\n}\n\nconst DroneCard = ({ droneType, onAction, actionLabel }: DroneCardProps) => {\n  const droneDef = DRONE_DEFINITIONS[droneType];\n  \n  return (\n    <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-2.5 flex flex-col justify-between relative\">\n      <div>\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <div\n              className=\"w-3 h-3 rounded-full flex-shrink-0\"\n              style={{ backgroundColor: droneDef.color, boxShadow: `0 0 10px ${droneDef.color}` }}\n            />\n            <div className=\"min-w-0 flex-1\">\n              <h4 className=\"font-semibold text-sm text-white truncate\">{droneDef.name}</h4>\n            </div>\n          </div>\n          <Cpu className=\"w-3 h-3 text-cyan-400 flex-shrink-0\" />\n        </div>\n        <p className=\"text-[10px] text-slate-400 mb-2\">{droneDef.description}</p>\n        <div className=\"grid grid-cols-2 gap-x-2 gap-y-1 text-[10px] mb-2\">\n          <p><span className=\"text-slate-500\">DMG:</span> <span className=\"font-medium text-red-400\">{droneDef.damage || 'N/A'}</span></p>\n          <p><span className=\"text-slate-500\">Range:</span> <span className=\"font-medium text-cyan-400\">{droneDef.detectionRadius}</span></p>\n          <p><span className=\"text-slate-500\">Fire:</span> <span className=\"font-medium text-yellow-400\">{droneDef.fireRate > 0 ? (1/droneDef.fireRate).toFixed(1) + '/s' : 'N/A'}</span></p>\n          <p><span className=\"text-slate-500\">Shape:</span> <span className=\"font-medium text-purple-400\">{droneDef.shape}</span></p>\n        </div>\n        {droneDef.passiveEffect && (\n          <div className=\"bg-cyan-900/20 border border-cyan-500/30 rounded px-2 py-1 mb-1.5\">\n            <p className=\"text-[9px] text-cyan-300 font-medium\">\n              <span className=\"text-slate-400\">Passive:</span> {droneDef.passiveEffect}\n            </p>\n          </div>\n        )}\n        {droneDef.activeEffect && (\n          <div className=\"bg-purple-900/20 border border-purple-500/30 rounded px-2 py-1\">\n            <p className=\"text-[9px] text-purple-300 font-medium\">\n              <span className=\"text-slate-400\">Active:</span> {droneDef.activeEffect}\n            </p>\n          </div>\n        )}\n      </div>\n      <button\n        onClick={() => onAction(droneType)}\n        className=\"mt-2 w-full text-center py-1.5 bg-slate-700 hover:bg-slate-600 rounded-md text-xs font-semibold transition-colors\"\n      >\n        {actionLabel}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","size_bytes":37081},"src/game/TradingPostSystem.ts":{"content":"import { Vector2, Weapon } from '../types/game';\nimport { generateId, vectorDistance } from './utils';\nimport { BiomeConfig } from './BiomeSystem';\nimport { CHUNK_SIZE } from './WorldGeneration';\n\nexport interface Shrine {\n  id: string;\n  position: Vector2;\n  size: number;\n  crystalBobPhase: number;\n  biomeId: string;\n  availableWeapons: WeaponRoll[];\n  rollCost: number;\n  obstacles: ShrineObstacle[];\n  crystalColor: string;\n  shrineType: 'weapon' | 'trading' | 'mixed';\n}\n\nexport interface ShrineObstacle {\n  position: Vector2;\n  size: number;\n  rotation: number;\n  shape: 'rectangle' | 'circle';\n}\n\nexport interface WeaponRoll {\n  weapon: Weapon;\n  rarity: 'common' | 'rare' | 'legendary';\n  weight: number;\n}\n\nexport class TradingPostSystem {\n  private shrines: Map<string, Shrine> = new Map();\n  private readonly spawnChance: number = 0;\n\n  generateTradingPostForChunk(chunkX: number, chunkY: number, biome: BiomeConfig, seed: number): Shrine | null {\n    return null;\n\n    const chunkWorldX = chunkX * CHUNK_SIZE;\n    const chunkWorldY = chunkY * CHUNK_SIZE;\n\n    const offsetX = (random() * 0.6 + 0.2) * CHUNK_SIZE;\n    const offsetY = (random() * 0.6 + 0.2) * CHUNK_SIZE;\n\n    const position = {\n      x: chunkWorldX + offsetX,\n      y: chunkWorldY + offsetY,\n    };\n\n    const availableWeapons = this.getWeaponsForBiome(biome);\n    const rollCost = 150;\n\n    const shrineType = random() < 0.5 ? 'weapon' : (random() < 0.7 ? 'mixed' : 'trading');\n    const crystalColors = ['#22d3ee', '#a855f7', '#fde047', '#06b6d4', '#f97316', '#10b981'];\n    const crystalColor = crystalColors[Math.floor(random() * crystalColors.length)];\n\n    const obstacles: ShrineObstacle[] = [];\n    const obstacleDistance = 60;\n    const obstacleSize = 25;\n\n    obstacles.push(\n      {\n        position: { x: position.x - obstacleDistance, y: position.y - obstacleDistance },\n        size: obstacleSize,\n        rotation: Math.PI / 4,\n        shape: 'rectangle',\n      },\n      {\n        position: { x: position.x + obstacleDistance, y: position.y - obstacleDistance },\n        size: obstacleSize,\n        rotation: Math.PI / 4,\n        shape: 'rectangle',\n      },\n      {\n        position: { x: position.x - obstacleDistance, y: position.y + obstacleDistance },\n        size: obstacleSize,\n        rotation: Math.PI / 4,\n        shape: 'rectangle',\n      },\n      {\n        position: { x: position.x + obstacleDistance, y: position.y + obstacleDistance },\n        size: obstacleSize,\n        rotation: Math.PI / 4,\n        shape: 'rectangle',\n      }\n    );\n\n    const shrine: Shrine = {\n      id: generateId(),\n      position,\n      size: 30,\n      crystalBobPhase: random() * Math.PI * 2,\n      biomeId: biome.id,\n      availableWeapons,\n      rollCost,\n      obstacles,\n      crystalColor,\n      shrineType,\n    };\n\n    this.shrines.set(shrine.id, shrine);\n    return shrine;\n  }\n\n  private getWeaponsForBiome(biome: BiomeConfig): WeaponRoll[] {\n    const rolls: WeaponRoll[] = [];\n\n    switch (biome.id) {\n      case 'volcanic-wastes':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Flamethrower',\n              type: 'flamethrower',\n              damage: 8,\n              fireRate: 0.08,\n              projectileSpeed: 10,\n              projectileSize: 8,\n              projectileCount: 3,\n              spread: 0.15,\n              color: '#ff6600',\n              cooldown: 0,\n              firingMode: 'auto',\n              piercing: false,\n              maxRange: 80,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Magma Cannon',\n              type: 'magma_cannon',\n              damage: 45,\n              fireRate: 1.2,\n              projectileSpeed: 8,\n              projectileSize: 18,\n              projectileCount: 1,\n              spread: 0,\n              color: '#ff4500',\n              cooldown: 0,\n              firingMode: 'semi',\n              explosive: true,\n              explosionRadius: 70,\n              maxRange: 440,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Ember Rifle',\n              type: 'ember_rifle',\n              damage: 18,\n              fireRate: 0.25,\n              projectileSpeed: 18,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#ff8800',\n              cooldown: 0,\n              firingMode: 'auto',\n              piercing: true,\n              maxRange: 520,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'frozen-tundra':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Cryo Launcher',\n              type: 'cryo_launcher',\n              damage: 35,\n              fireRate: 0.8,\n              projectileSpeed: 12,\n              projectileSize: 14,\n              projectileCount: 1,\n              spread: 0,\n              color: '#60a5fa',\n              cooldown: 0,\n              firingMode: 'semi',\n              explosive: true,\n              explosionRadius: 60,\n              maxRange: 440,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Frost Shards',\n              type: 'frost_shards',\n              damage: 12,\n              fireRate: 0.15,\n              projectileSpeed: 16,\n              projectileSize: 7,\n              projectileCount: 3,\n              spread: 0.1,\n              color: '#93c5fd',\n              cooldown: 0,\n              firingMode: 'auto',\n              piercing: true,\n              maxRange: 500,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Ice Pistol',\n              type: 'ice_pistol',\n              damage: 15,\n              fireRate: 0.3,\n              projectileSpeed: 14,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#bae6fd',\n              cooldown: 0,\n              firingMode: 'semi',\n              maxRange: 400,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'toxic-swamp':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Plague Spreader',\n              type: 'plague_spreader',\n              damage: 15,\n              fireRate: 0.4,\n              projectileSpeed: 10,\n              projectileSize: 10,\n              projectileCount: 5,\n              spread: 0.25,\n              color: '#a3e635',\n              cooldown: 0,\n              firingMode: 'semi',\n              explosive: true,\n              explosionRadius: 50,\n              maxRange: 400,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Toxic Sprayer',\n              type: 'toxic_sprayer',\n              damage: 10,\n              fireRate: 0.12,\n              projectileSpeed: 11,\n              projectileSize: 8,\n              projectileCount: 2,\n              spread: 0.2,\n              color: '#84cc16',\n              cooldown: 0,\n              firingMode: 'auto',\n              piercing: false,\n              maxRange: 100,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Spore Gun',\n              type: 'spore_gun',\n              damage: 14,\n              fireRate: 0.35,\n              projectileSpeed: 12,\n              projectileSize: 7,\n              projectileCount: 1,\n              spread: 0,\n              color: '#bef264',\n              cooldown: 0,\n              firingMode: 'semi',\n              maxRange: 400,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'crystal-caverns':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Prismatic Ray',\n              type: 'prismatic_ray',\n              damage: 25,\n              fireRate: 0.05,\n              projectileSpeed: 20,\n              projectileSize: 5,\n              projectileCount: 1,\n              spread: 0,\n              color: '#22d3ee',\n              cooldown: 0,\n              firingMode: 'beam',\n              beamDuration: 3,\n              beamMaxHeat: 100,\n              beamHeat: 0,\n              beamOverheated: false,\n              maxRange: 560,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Crystal Launcher',\n              type: 'crystal_launcher',\n              damage: 28,\n              fireRate: 0.6,\n              projectileSpeed: 15,\n              projectileSize: 10,\n              projectileCount: 3,\n              spread: 0.12,\n              color: '#06b6d4',\n              cooldown: 0,\n              firingMode: 'semi',\n              piercing: true,\n              maxRange: 480,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Shard Rifle',\n              type: 'shard_rifle',\n              damage: 16,\n              fireRate: 0.22,\n              projectileSpeed: 17,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#67e8f9',\n              cooldown: 0,\n              firingMode: 'auto',\n              maxRange: 500,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'void-nebula':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Void Cannon',\n              type: 'void_cannon',\n              damage: 60,\n              fireRate: 1.5,\n              projectileSpeed: 10,\n              projectileSize: 20,\n              projectileCount: 1,\n              spread: 0,\n              color: '#a855f7',\n              cooldown: 0,\n              firingMode: 'charge',\n              chargeTime: 2,\n              currentCharge: 0,\n              isCharging: false,\n              maxRange: 560,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Void Bolter',\n              type: 'void_bolter',\n              damage: 22,\n              fireRate: 0.4,\n              projectileSpeed: 14,\n              projectileSize: 9,\n              projectileCount: 1,\n              spread: 0,\n              color: '#c084fc',\n              cooldown: 0,\n              firingMode: 'semi',\n              homing: true,\n              homingStrength: 0.1,\n              maxRange: 500,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Dark Pulse',\n              type: 'dark_pulse',\n              damage: 14,\n              fireRate: 0.28,\n              projectileSpeed: 13,\n              projectileSize: 7,\n              projectileCount: 1,\n              spread: 0,\n              color: '#e9d5ff',\n              cooldown: 0,\n              firingMode: 'auto',\n              maxRange: 480,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'coral-depths':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Tidal Cannon',\n              type: 'tidal_cannon',\n              damage: 40,\n              fireRate: 1.0,\n              projectileSpeed: 12,\n              projectileSize: 16,\n              projectileCount: 1,\n              spread: 0,\n              color: '#14b8a6',\n              cooldown: 0,\n              firingMode: 'semi',\n              explosive: true,\n              explosionRadius: 65,\n              maxRange: 440,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Coral Spear',\n              type: 'coral_spear',\n              damage: 30,\n              fireRate: 0.5,\n              projectileSpeed: 18,\n              projectileSize: 8,\n              projectileCount: 1,\n              spread: 0,\n              color: '#5eead4',\n              cooldown: 0,\n              firingMode: 'semi',\n              piercing: true,\n              maxRange: 560,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Aqua Blaster',\n              type: 'aqua_blaster',\n              damage: 13,\n              fireRate: 0.18,\n              projectileSpeed: 15,\n              projectileSize: 6,\n              projectileCount: 2,\n              spread: 0.08,\n              color: '#2dd4bf',\n              cooldown: 0,\n              firingMode: 'auto',\n              maxRange: 480,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'radiant-gardens':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Solar Eruption',\n              type: 'solar_eruption',\n              damage: 50,\n              fireRate: 1.3,\n              projectileSpeed: 11,\n              projectileSize: 18,\n              projectileCount: 1,\n              spread: 0,\n              color: '#fde047',\n              cooldown: 0,\n              firingMode: 'hold',\n              holdTime: 1,\n              holdTimer: 0,\n              isHolding: false,\n              explosive: true,\n              explosionRadius: 75,\n              maxRange: 400,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Thorn Launcher',\n              type: 'thorn_launcher',\n              damage: 18,\n              fireRate: 0.35,\n              projectileSpeed: 16,\n              projectileSize: 7,\n              projectileCount: 4,\n              spread: 0.15,\n              color: '#10b981',\n              cooldown: 0,\n              firingMode: 'semi',\n              piercing: true,\n              maxRange: 480,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Bloom Rifle',\n              type: 'bloom_rifle',\n              damage: 15,\n              fireRate: 0.25,\n              projectileSpeed: 14,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#6ee7b7',\n              cooldown: 0,\n              firingMode: 'auto',\n              maxRange: 500,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      case 'shattered-expanse':\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Gravity Cannon',\n              type: 'gravity_cannon',\n              damage: 55,\n              fireRate: 1.4,\n              projectileSpeed: 9,\n              projectileSize: 19,\n              projectileCount: 1,\n              spread: 0,\n              color: '#6366f1',\n              cooldown: 0,\n              firingMode: 'semi',\n              maxRange: 480,\n            },\n            rarity: 'legendary',\n            weight: 10,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Aether Rifle',\n              type: 'aether_rifle',\n              damage: 24,\n              fireRate: 0.45,\n              projectileSpeed: 17,\n              projectileSize: 8,\n              projectileCount: 2,\n              spread: 0.1,\n              color: '#818cf8',\n              cooldown: 0,\n              firingMode: 'semi',\n              piercing: true,\n              maxRange: 520,\n            },\n            rarity: 'rare',\n            weight: 25,\n          },\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Flux Pistol',\n              type: 'flux_pistol',\n              damage: 17,\n              fireRate: 0.3,\n              projectileSpeed: 15,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#a5b4fc',\n              cooldown: 0,\n              firingMode: 'semi',\n              maxRange: 440,\n            },\n            rarity: 'common',\n            weight: 65,\n          }\n        );\n        break;\n\n      default:\n        rolls.push(\n          {\n            weapon: {\n              id: generateId(),\n              name: 'Standard Rifle',\n              type: 'rifle',\n              damage: 15,\n              fireRate: 0.2,\n              projectileSpeed: 15,\n              projectileSize: 6,\n              projectileCount: 1,\n              spread: 0,\n              color: '#888888',\n              cooldown: 0,\n              firingMode: 'auto',\n              maxRange: 480,\n            },\n            rarity: 'common',\n            weight: 100,\n          }\n        );\n    }\n\n    return rolls;\n  }\n\n  rollWeapon(shrineId: string): Weapon | null {\n    const shrine = this.shrines.get(shrineId);\n    if (!shrine) return null;\n\n    const totalWeight = shrine.availableWeapons.reduce((sum, roll) => sum + roll.weight, 0);\n    const random = Math.random() * totalWeight;\n\n    let currentWeight = 0;\n    for (const roll of shrine.availableWeapons) {\n      currentWeight += roll.weight;\n      if (random <= currentWeight) {\n        return { ...roll.weapon, id: generateId() };\n      }\n    }\n\n    return null;\n  }\n\n  getShrine(shrineId: string): Shrine | null {\n    return this.shrines.get(shrineId) || null;\n  }\n\n  getAllShrines(): Shrine[] {\n    return Array.from(this.shrines.values());\n  }\n\n  getNearbyShrine(playerPos: Vector2, maxDistance: number = 50): Shrine | null {\n    for (const shrine of this.shrines.values()) {\n      const distance = vectorDistance(playerPos, shrine.position);\n      if (distance < maxDistance) {\n        return shrine;\n      }\n    }\n    return null;\n  }\n\n  removeShrine(shrineId: string): void {\n    this.shrines.delete(shrineId);\n  }\n\n  updateShrines(dt: number): void {\n    for (const shrine of this.shrines.values()) {\n      shrine.crystalBobPhase += dt * 2;\n    }\n  }\n\n  reset(): void {\n    this.shrines.clear();\n  }\n\n  private seededRandom(seed: number): () => number {\n    let s = seed;\n    return () => {\n      s = Math.sin(s) * 10000;\n      return s - Math.floor(s);\n    };\n  }\n}\n","size_bytes":19175},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n    hmr: {\n      clientPort: 443,\n    },\n  },\n  optimizeDeps: {\n    exclude: [\"lucide-react\"],\n  },\n  build: {\n    minify: \"esbuild\",\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          \"react-vendor\": [\"react\", \"react-dom\"],\n          lucide: [\"lucide-react\"],\n        },\n      },\n    },\n  },\n});\n","size_bytes":552},"src/game/WeaponUpgrades.ts":{"content":"import { Weapon } from '../types/game';\n\nexport interface WeaponUpgradeNode {\n  id: string;\n  name: string;\n  description: string;\n  cost: number;\n  prerequisite?: string;\n  icon: string;\n  effects: {\n    property: keyof Weapon;\n    value: number;\n    operation: 'add' | 'multiply' | 'set';\n  }[];\n}\n\nexport interface WeaponUpgradeTree {\n  weaponId: string;\n  nodes: WeaponUpgradeNode[];\n}\n\nexport const WEAPON_UPGRADE_TREES: { [key: string]: WeaponUpgradeTree } = {\n  'w_rifle_01': {\n    weaponId: 'w_rifle_01',\n    nodes: [\n      {\n        id: 'rifle_dmg_1',\n        name: 'High-Caliber Rounds',\n        description: 'Increases damage by 15%.',\n        cost: 100,\n        icon: 'dmg',\n        effects: [{ property: 'damage', value: 0.15, operation: 'multiply' }],\n      },\n      {\n        id: 'rifle_firerate_1',\n        name: 'Improved Gas System',\n        description: 'Increases fire rate by 20%.',\n        cost: 120,\n        prerequisite: 'rifle_dmg_1',\n        icon: 'fire-rate',\n        effects: [{ property: 'fireRate', value: -0.20, operation: 'multiply' }],\n      },\n      {\n        id: 'rifle_pierce_1',\n        name: 'Armor Piercing',\n        description: 'Projectiles pierce one enemy.',\n        cost: 250,\n        prerequisite: 'rifle_firerate_1',\n        icon: 'pierce',\n        effects: [{ property: 'piercing', value: 1, operation: 'set' }],\n      },\n    ],\n  },\n  'w_shotgun_01': {\n    weaponId: 'w_shotgun_01',\n    nodes: [\n      {\n        id: 'shotgun_pellets_1',\n        name: 'Extra Barrel',\n        description: 'Increases projectile count by 2.',\n        cost: 150,\n        icon: 'pellets',\n        effects: [{ property: 'projectileCount', value: 2, operation: 'add' }],\n      },\n      {\n        id: 'shotgun_spread_1',\n        name: 'Choke System',\n        description: 'Reduces spread by 25%.',\n        cost: 100,\n        prerequisite: 'shotgun_pellets_1',\n        icon: 'spread',\n        effects: [{ property: 'spread', value: -0.25, operation: 'multiply' }],\n      },\n      {\n        id: 'shotgun_ricochet_1',\n        name: 'Ricochet Rounds',\n        description: 'Projectiles can bounce off walls.',\n        cost: 300,\n        prerequisite: 'shotgun_spread_1',\n        icon: 'ricochet',\n        effects: [{ property: 'ricochet', value: 1, operation: 'set' }],\n      },\n    ],\n  },\n  'w_sniper_01': {\n    weaponId: 'w_sniper_01',\n    nodes: [\n       {\n        id: 'sniper_dmg_1',\n        name: 'Magnetic Accelerator',\n        description: 'Increases damage by 30%.',\n        cost: 200,\n        icon: 'dmg',\n        effects: [{ property: 'damage', value: 0.30, operation: 'multiply' }],\n      },\n      {\n        id: 'sniper_range_1',\n        name: 'Rangefinder Scope',\n        description: 'Increases projectile range significantly.',\n        cost: 150,\n        prerequisite: 'sniper_dmg_1',\n        icon: 'range',\n        effects: [{ property: 'maxRange', value: 0.50, operation: 'multiply' }],\n      },\n    ]\n  }\n};\n","size_bytes":2946},"src/game/WeaponPerks.ts":{"content":"import { Weapon } from '../types/game';\n\nexport interface WeaponPerk {\n  id: string;\n  name: string;\n  description: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  icon: string;\n  effects: PerkEffect[];\n  weaponCategory: 'melee' | 'ranged';\n}\n\nexport interface PerkEffect {\n  property: string;\n  value: number;\n  operation: 'add' | 'multiply' | 'set';\n}\n\nexport const WEAPON_PERKS: WeaponPerk[] = [\n  {\n    id: 'heavy_rounds',\n    name: 'Heavy Rounds',\n    description: '+25% Damage',\n    rarity: 'rare',\n    icon: 'zap',\n    effects: [{ property: 'damage', value: 0.25, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'explosive_payload',\n    name: 'Explosive Payload',\n    description: 'Projectiles explode on impact',\n    rarity: 'epic',\n    icon: 'bomb',\n    effects: [\n      { property: 'explosive', value: 1, operation: 'set' },\n      { property: 'explosionRadius', value: 60, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'rapid_fire',\n    name: 'Rapid Fire',\n    description: '-30% Fire Rate',\n    rarity: 'rare',\n    icon: 'repeat',\n    effects: [{ property: 'fireRate', value: -0.3, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'velocity_boost',\n    name: 'Velocity Boost',\n    description: '+50% Projectile Speed',\n    rarity: 'common',\n    icon: 'rocket',\n    effects: [{ property: 'projectileSpeed', value: 0.5, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'piercing_shots',\n    name: 'Piercing Shots',\n    description: 'Projectiles pierce through enemies',\n    rarity: 'epic',\n    icon: 'crosshair',\n    effects: [{ property: 'piercing', value: 1, operation: 'set' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'homing_guidance',\n    name: 'Homing Guidance',\n    description: 'Projectiles track enemies',\n    rarity: 'legendary',\n    icon: 'target',\n    effects: [\n      { property: 'homing', value: 1, operation: 'set' },\n      { property: 'homingStrength', value: 0.08, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'multi_shot',\n    name: 'Multi-Shot',\n    description: '+2 Projectiles',\n    rarity: 'rare',\n    icon: 'maximize-2',\n    effects: [{ property: 'projectileCount', value: 2, operation: 'add' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'ricochet',\n    name: 'Ricochet',\n    description: 'Projectiles bounce off walls',\n    rarity: 'epic',\n    icon: 'corner-down-right',\n    effects: [{ property: 'ricochet', value: 1, operation: 'set' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'giant_rounds',\n    name: 'Giant Rounds',\n    description: '+60% Projectile Size',\n    rarity: 'rare',\n    icon: 'circle',\n    effects: [{ property: 'projectileSize', value: 0.6, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'focused_beam',\n    name: 'Focused Beam',\n    description: '-50% Spread',\n    rarity: 'common',\n    icon: 'minimize-2',\n    effects: [{ property: 'spread', value: -0.5, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'wide_spread',\n    name: 'Wide Spread',\n    description: '+80% Spread',\n    rarity: 'common',\n    icon: 'maximize',\n    effects: [{ property: 'spread', value: 0.8, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'sniper_rounds',\n    name: 'Sniper Rounds',\n    description: '+60% Damage, -40% Fire Rate',\n    rarity: 'epic',\n    icon: 'scope',\n    effects: [\n      { property: 'damage', value: 0.6, operation: 'multiply' },\n      { property: 'fireRate', value: 0.4, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'gatling_mode',\n    name: 'Gatling Mode',\n    description: '-50% Fire Rate, -20% Damage',\n    rarity: 'rare',\n    icon: 'disc',\n    effects: [\n      { property: 'fireRate', value: -0.5, operation: 'multiply' },\n      { property: 'damage', value: -0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'plasma_infusion',\n    name: 'Plasma Infusion',\n    description: '+15% Damage, +25% Speed',\n    rarity: 'rare',\n    icon: 'sparkles',\n    effects: [\n      { property: 'damage', value: 0.15, operation: 'multiply' },\n      { property: 'projectileSpeed', value: 0.25, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'critical_strike',\n    name: 'Critical Strike',\n    description: '+45% Damage',\n    rarity: 'legendary',\n    icon: 'star',\n    effects: [{ property: 'damage', value: 0.45, operation: 'multiply' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'triple_shot',\n    name: 'Triple Shot',\n    description: '+3 Projectiles',\n    rarity: 'epic',\n    icon: 'layers',\n    effects: [{ property: 'projectileCount', value: 3, operation: 'add' }],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'burst_fire',\n    name: 'Burst Fire',\n    description: '+1 Projectile, Faster Fire Rate',\n    rarity: 'common',\n    icon: 'circle-dot',\n    effects: [\n      { property: 'projectileCount', value: 1, operation: 'add' },\n      { property: 'fireRate', value: -0.15, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'extended_range',\n    name: 'Extended Range',\n    description: '+40% Projectile Speed, +20% Size',\n    rarity: 'common',\n    icon: 'arrow-right',\n    effects: [\n      { property: 'projectileSpeed', value: 0.4, operation: 'multiply' },\n      { property: 'projectileSize', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'chain_lightning',\n    name: 'Chain Lightning',\n    description: 'Chains to 3 nearby enemies with lightning arcs',\n    rarity: 'legendary',\n    icon: 'zap-off',\n    effects: [\n      { property: 'chainRange', value: 200, operation: 'set' },\n      { property: 'projectileSpeed', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'smart_tracking',\n    name: 'Smart Tracking',\n    description: 'Enhanced Homing',\n    rarity: 'legendary',\n    icon: 'radar',\n    effects: [\n      { property: 'homing', value: 1, operation: 'set' },\n      { property: 'homingStrength', value: 0.12, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'armor_piercing',\n    name: 'Armor Piercing',\n    description: '+30% Damage, Piercing',\n    rarity: 'epic',\n    icon: 'shield-off',\n    effects: [\n      { property: 'damage', value: 0.3, operation: 'multiply' },\n      { property: 'piercing', value: 1, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'compact_rounds',\n    name: 'Compact Rounds',\n    description: '-40% Fire Rate, +20% Speed',\n    rarity: 'common',\n    icon: 'minimize',\n    effects: [\n      { property: 'fireRate', value: -0.4, operation: 'multiply' },\n      { property: 'projectileSpeed', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'cluster_bomb',\n    name: 'Cluster Bomb',\n    description: 'Explosive + Multi-Shot',\n    rarity: 'legendary',\n    icon: 'hexagon',\n    effects: [\n      { property: 'explosive', value: 1, operation: 'set' },\n      { property: 'explosionRadius', value: 50, operation: 'set' },\n      { property: 'projectileCount', value: 2, operation: 'add' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'steady_aim',\n    name: 'Steady Aim',\n    description: '-70% Spread, +6% Damage',\n    rarity: 'common',\n    icon: 'crosshair',\n    effects: [\n      { property: 'spread', value: -0.7, operation: 'multiply' },\n      { property: 'damage', value: 0.06, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'overclocked',\n    name: 'Overclocked',\n    description: '+20% Everything',\n    rarity: 'legendary',\n    icon: 'cpu',\n    effects: [\n      { property: 'damage', value: 0.2, operation: 'multiply' },\n      { property: 'projectileSpeed', value: 0.2, operation: 'multiply' },\n      { property: 'fireRate', value: -0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'miniature_warhead',\n    name: 'Miniature Warhead',\n    description: 'Small Explosion',\n    rarity: 'rare',\n    icon: 'droplet',\n    effects: [\n      { property: 'explosive', value: 1, operation: 'set' },\n      { property: 'explosionRadius', value: 40, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'scatter_shot',\n    name: 'Scatter Shot',\n    description: '+4 Projectiles, +100% Spread',\n    rarity: 'epic',\n    icon: 'droplets',\n    effects: [\n      { property: 'projectileCount', value: 4, operation: 'add' },\n      { property: 'spread', value: 1.0, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'precision_optics',\n    name: 'Precision Optics',\n    description: '+35% Speed, -60% Spread',\n    rarity: 'rare',\n    icon: 'eye',\n    effects: [\n      { property: 'projectileSpeed', value: 0.35, operation: 'multiply' },\n      { property: 'spread', value: -0.6, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'unstable_core',\n    name: 'Unstable Core',\n    description: '+50% Damage, Random Spread',\n    rarity: 'epic',\n    icon: 'alert-triangle',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n      { property: 'spread', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'quantum_bounce',\n    name: 'Quantum Bounce',\n    description: 'Ricochet + Speed Boost',\n    rarity: 'legendary',\n    icon: 'git-branch',\n    effects: [\n      { property: 'ricochet', value: 1, operation: 'set' },\n      { property: 'projectileSpeed', value: 0.4, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'chain_lightning_strike',\n    name: 'Chain Lightning',\n    description: 'Projectiles chain to nearby enemies',\n    rarity: 'epic',\n    icon: 'zap',\n    effects: [\n      { property: 'chainRange', value: 150, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'split_shot',\n    name: 'Split Shot',\n    description: 'Projectiles split into multiple on impact',\n    rarity: 'epic',\n    icon: 'git-fork',\n    effects: [\n      { property: 'splitCount', value: 3, operation: 'set' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'portal_rounds',\n    name: 'Portal Rounds',\n    description: 'Creates linked portals that projectiles travel through',\n    rarity: 'legendary',\n    icon: 'circle-dot-dashed',\n    effects: [\n      { property: 'portalDuration', value: 5, operation: 'set' },\n      { property: 'projectileSpeed', value: 0.3, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'rampage',\n    name: 'Rampage',\n    description: 'Fire rate increases by 10% per kill, stacks for 3 seconds',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [\n      { property: 'damage', value: 0.1, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'berserker',\n    name: 'Berserker',\n    description: '+3% damage per 1% missing health',\n    rarity: 'rare',\n    icon: 'heart-crack',\n    effects: [\n      { property: 'damage', value: 0.05, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'vampiric',\n    name: 'Vampiric Rounds',\n    description: 'Heal for 5% of damage dealt',\n    rarity: 'legendary',\n    icon: 'heart-pulse',\n    effects: [\n      { property: 'damage', value: 0.1, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'frost_rounds',\n    name: 'Frost Rounds',\n    description: 'Slows enemies by 40% for 2 seconds',\n    rarity: 'epic',\n    icon: 'snowflake',\n    effects: [\n      { property: 'projectileSpeed', value: -0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'incendiary',\n    name: 'Incendiary Rounds',\n    description: 'Enemies burn for 50% damage over 3 seconds',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [\n      { property: 'damage', value: 0.15, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'long_barrel',\n    name: 'Long Barrel',\n    description: '+50% Max Range',\n    rarity: 'rare',\n    icon: 'arrow-up-right',\n    effects: [\n      { property: 'maxRange', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'short_range',\n    name: 'Point Blank',\n    description: '-40% Max Range, +20% Damage',\n    rarity: 'rare',\n    icon: 'arrow-down',\n    effects: [\n      { property: 'maxRange', value: -0.4, operation: 'multiply' },\n      { property: 'damage', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'extended_barrel',\n    name: 'Extended Barrel',\n    description: '+80% Max Range, +20% Speed',\n    rarity: 'epic',\n    icon: 'move-right',\n    effects: [\n      { property: 'maxRange', value: 0.8, operation: 'multiply' },\n      { property: 'projectileSpeed', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'ranged',\n  },\n  {\n    id: 'cleaving_strikes',\n    name: 'Cleaving Strikes',\n    description: '+50% swing angle, hits multiple enemies',\n    rarity: 'rare',\n    icon: 'sword',\n    effects: [{ property: 'meleeStats.swingAngle', value: 0.5, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'lethal_tempo',\n    name: 'Lethal Tempo',\n    description: '+40% attack speed',\n    rarity: 'rare',\n    icon: 'zap',\n    effects: [{ property: 'fireRate', value: -0.4, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'executioner',\n    name: 'Executioner',\n    description: '+100% damage to enemies below 30% health',\n    rarity: 'epic',\n    icon: 'skull',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'combo_master',\n    name: 'Combo Master',\n    description: 'Max combo increased to 5, +100% combo damage bonus',\n    rarity: 'legendary',\n    icon: 'layers',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 2, operation: 'add' },\n      { property: 'meleeStats.comboDamageMultiplier', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'dash_assassin',\n    name: 'Dash Assassin',\n    description: '+150% damage on dash slash',\n    rarity: 'epic',\n    icon: 'wind',\n    effects: [{ property: 'meleeStats.dashSlashBonus', value: 1.5, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'extended_reach',\n    name: 'Extended Reach',\n    description: '+60% melee range',\n    rarity: 'common',\n    icon: 'arrow-right',\n    effects: [\n      { property: 'meleeStats.range', value: 0.6, operation: 'multiply' },\n      { property: 'maxRange', value: 0.6, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'whirlwind',\n    name: 'Whirlwind',\n    description: '360 degree swing, hits all around',\n    rarity: 'legendary',\n    icon: 'rotate-cw',\n    effects: [{ property: 'meleeStats.swingAngle', value: 360, operation: 'set' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'life_steal',\n    name: 'Life Steal',\n    description: 'Heal for 15% of melee damage dealt',\n    rarity: 'epic',\n    icon: 'heart-pulse',\n    effects: [{ property: 'damage', value: 0.1, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'brutal_force',\n    name: 'Brutal Force',\n    description: '+50% damage, -20% attack speed',\n    rarity: 'rare',\n    icon: 'hammer',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n      { property: 'fireRate', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'lightning_blade',\n    name: 'Lightning Blade',\n    description: '+80% attack speed, -10% damage',\n    rarity: 'rare',\n    icon: 'zap',\n    effects: [\n      { property: 'fireRate', value: -0.8, operation: 'multiply' },\n      { property: 'damage', value: -0.1, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'void_eruption',\n    name: 'Void Eruption',\n    description: 'Every 3rd hit creates a void explosion dealing area damage',\n    rarity: 'legendary',\n    icon: 'circle-dot',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'phase_strike',\n    name: 'Phase Strike',\n    description: 'Melee attacks ignore 50% of distance, teleport slightly forward',\n    rarity: 'epic',\n    icon: 'move',\n    effects: [{ property: 'meleeStats.range', value: 0.5, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'bloodlust',\n    name: 'Bloodlust',\n    description: '+5% attack speed per kill for 5 seconds (stacks)',\n    rarity: 'rare',\n    icon: 'droplet',\n    effects: [{ property: 'damage', value: 0.15, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'sharpened_edge',\n    name: 'Sharpened Edge',\n    description: '+30% damage',\n    rarity: 'common',\n    icon: 'triangle',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'momentum_slash',\n    name: 'Momentum Slash',\n    description: 'Damage increases with movement speed',\n    rarity: 'rare',\n    icon: 'wind',\n    effects: [{ property: 'damage', value: 0.25, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'critical_edge',\n    name: 'Critical Edge',\n    description: '20% chance to deal triple damage',\n    rarity: 'legendary',\n    icon: 'star',\n    effects: [{ property: 'damage', value: 0.4, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'faster_combos',\n    name: 'Faster Combos',\n    description: 'Combo window extended by 50%',\n    rarity: 'rare',\n    icon: 'clock',\n    effects: [{ property: 'fireRate', value: -0.2, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'berserker_rage',\n    name: 'Berserker Rage',\n    description: '+2% damage per 1% missing health',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [{ property: 'damage', value: 0.1, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'projectile_deflection',\n    name: 'Projectile Deflection',\n    description: 'Melee swings deflect enemy projectiles back at them',\n    rarity: 'legendary',\n    icon: 'shield',\n    effects: [{ property: 'damage', value: 0.15, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'vampiric_blade',\n    name: 'Vampiric Blade',\n    description: 'Heal for 25% of damage dealt',\n    rarity: 'legendary',\n    icon: 'heart',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'phantom_strikes',\n    name: 'Phantom Strikes',\n    description: 'Attacks hit twice in quick succession',\n    rarity: 'legendary',\n    icon: 'ghost',\n    effects: [{ property: 'damage', value: 0.5, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'elemental_fury',\n    name: 'Elemental Fury',\n    description: 'Attacks apply burning, freezing, or shocking effects',\n    rarity: 'epic',\n    icon: 'flame',\n    effects: [{ property: 'damage', value: 0.3, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'chain_massacre',\n    name: 'Chain Massacre',\n    description: 'Killing blows chain to nearby enemies',\n    rarity: 'epic',\n    icon: 'link',\n    effects: [\n      { property: 'damage', value: 0.25, operation: 'multiply' },\n      { property: 'meleeStats.swingAngle', value: 0.3, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'perfect_parry',\n    name: 'Perfect Parry',\n    description: 'Blocking attacks during swing grants +100% damage for next strike',\n    rarity: 'legendary',\n    icon: 'shield-check',\n    effects: [{ property: 'meleeStats.dashSlashBonus', value: 0.5, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'rending_strikes',\n    name: 'Rending Strikes',\n    description: 'Attacks reduce enemy armor, stacking up to 5 times',\n    rarity: 'epic',\n    icon: 'target',\n    effects: [{ property: 'damage', value: 0.2, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'storm_cutter',\n    name: 'Storm Cutter',\n    description: 'Swings create lightning arcs that damage enemies in a line',\n    rarity: 'legendary',\n    icon: 'zap',\n    effects: [\n      { property: 'damage', value: 0.35, operation: 'multiply' },\n      { property: 'meleeStats.range', value: 0.4, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'relentless_assault',\n    name: 'Relentless Assault',\n    description: 'Each consecutive hit increases attack speed by 10%',\n    rarity: 'rare',\n    icon: 'repeat',\n    effects: [{ property: 'fireRate', value: -0.3, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'soul_reaper',\n    name: 'Soul Reaper',\n    description: 'Killing enemies grants temporary bonus damage',\n    rarity: 'epic',\n    icon: 'skull',\n    effects: [{ property: 'damage', value: 0.25, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'riposte_master',\n    name: 'Riposte Master',\n    description: 'Taking damage within 0.5s grants +200% damage on next swing',\n    rarity: 'legendary',\n    icon: 'sword',\n    effects: [{ property: 'damage', value: 0.4, operation: 'multiply' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'sweeping_fury',\n    name: 'Sweeping Fury',\n    description: '+120 degree swing angle, hits in wider arc',\n    rarity: 'epic',\n    icon: 'scan',\n    effects: [{ property: 'meleeStats.swingAngle', value: 120, operation: 'add' }],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'precision_striker',\n    name: 'Precision Striker',\n    description: '-30 degree angle, +60% damage, focused strikes',\n    rarity: 'rare',\n    icon: 'crosshair',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: -30, operation: 'add' },\n      { property: 'damage', value: 0.6, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'finishing_blow',\n    name: 'Finishing Blow',\n    description: 'Final combo strike deals +300% damage',\n    rarity: 'legendary',\n    icon: 'shield-x',\n    effects: [\n      { property: 'meleeStats.comboDamageMultiplier', value: 1.0, operation: 'multiply' },\n      { property: 'damage', value: 0.3, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'dance_of_blades',\n    name: 'Dance of Blades',\n    description: '+100% combo count, -15% damage per hit',\n    rarity: 'epic',\n    icon: 'sparkles',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 3, operation: 'add' },\n      { property: 'damage', value: -0.15, operation: 'multiply' },\n      { property: 'fireRate', value: -0.3, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'heavy_impact',\n    name: 'Heavy Impact',\n    description: 'Swings knockback enemies further, +40% damage',\n    rarity: 'rare',\n    icon: 'hammer',\n    effects: [\n      { property: 'damage', value: 0.4, operation: 'multiply' },\n      { property: 'fireRate', value: 0.15, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'whirling_dervish',\n    name: 'Whirling Dervish',\n    description: 'Continuous spinning attacks, +200% swing angle, +60% attack speed',\n    rarity: 'legendary',\n    icon: 'loader',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: 200, operation: 'add' },\n      { property: 'fireRate', value: -0.6, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'lunging_strike',\n    name: 'Lunging Strike',\n    description: 'Dash forward on each swing, +80% range',\n    rarity: 'epic',\n    icon: 'arrow-up-right',\n    effects: [\n      { property: 'meleeStats.range', value: 0.8, operation: 'multiply' },\n      { property: 'meleeStats.dashSlashBonus', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'steel_tempest',\n    name: 'Steel Tempest',\n    description: 'Creates a storm of blades, swinging hits 3 times',\n    rarity: 'legendary',\n    icon: 'wind',\n    effects: [\n      { property: 'damage', value: 0.8, operation: 'multiply' },\n      { property: 'meleeStats.swingAngle', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'feral_instinct',\n    name: 'Feral Instinct',\n    description: '+120% attack speed while below 50% health',\n    rarity: 'epic',\n    icon: 'activity',\n    effects: [\n      { property: 'fireRate', value: -0.4, operation: 'multiply' },\n      { property: 'damage', value: 0.15, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'crushing_blow',\n    name: 'Crushing Blow',\n    description: 'Every 5th hit deals 500% damage, slower swing',\n    rarity: 'legendary',\n    icon: 'anvil',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n      { property: 'fireRate', value: 0.2, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'blade_echo',\n    name: 'Blade Echo',\n    description: 'Swings leave afterimages that damage enemies',\n    rarity: 'epic',\n    icon: 'copy',\n    effects: [\n      { property: 'damage', value: 0.35, operation: 'multiply' },\n      { property: 'meleeStats.swingDuration', value: 0.15, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'masters_technique',\n    name: \"Master's Technique\",\n    description: '+2 combo count, +30% combo damage multiplier',\n    rarity: 'rare',\n    icon: 'award',\n    effects: [\n      { property: 'meleeStats.comboCount', value: 2, operation: 'add' },\n      { property: 'meleeStats.comboDamageMultiplier', value: 0.3, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'vorpal_edge',\n    name: 'Vorpal Edge',\n    description: '10% chance to instantly kill non-boss enemies below 20% HP',\n    rarity: 'legendary',\n    icon: 'zap-off',\n    effects: [\n      { property: 'damage', value: 0.5, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n  {\n    id: 'reaper_spin',\n    name: 'Reaper Spin',\n    description: '270 degree sweeping attacks, moderate damage boost',\n    rarity: 'epic',\n    icon: 'circle-slash',\n    effects: [\n      { property: 'meleeStats.swingAngle', value: 270, operation: 'set' },\n      { property: 'damage', value: 0.25, operation: 'multiply' },\n    ],\n    weaponCategory: 'melee',\n  },\n];\n\nexport function getRandomPerks(count: number, category: 'melee' | 'ranged'): WeaponPerk[] {\n  const categoryPerks = WEAPON_PERKS.filter(perk => perk.weaponCategory === category);\n  const shuffled = [...categoryPerks].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, Math.min(count, categoryPerks.length));\n}\n\nexport function applyPerkToWeapon(weapon: Weapon, perk: WeaponPerk): Weapon {\n  const modifiedWeapon = { ...weapon };\n\n  perk.effects.forEach((effect) => {\n    const keys = effect.property.split('.');\n\n    if (keys.length === 1) {\n      const currentValue = modifiedWeapon[effect.property as keyof Weapon] as number;\n\n      switch (effect.operation) {\n        case 'add':\n          (modifiedWeapon[effect.property as keyof Weapon] as number) = currentValue + effect.value;\n          break;\n        case 'multiply':\n          (modifiedWeapon[effect.property as keyof Weapon] as number) = currentValue * (1 + effect.value);\n          break;\n        case 'set':\n          (modifiedWeapon[effect.property as keyof Weapon] as any) = effect.value;\n          break;\n      }\n    } else if (keys.length === 2 && keys[0] === 'meleeStats' && modifiedWeapon.meleeStats) {\n      const currentValue = modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number;\n\n      switch (effect.operation) {\n        case 'add':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number) = currentValue + effect.value;\n          break;\n        case 'multiply':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as number) = currentValue * (1 + effect.value);\n          break;\n        case 'set':\n          (modifiedWeapon.meleeStats[keys[1] as keyof typeof modifiedWeapon.meleeStats] as any) = effect.value;\n          break;\n      }\n    }\n  });\n\n  return modifiedWeapon;\n}\n\nexport function getRarityColor(rarity: WeaponPerk['rarity']): string {\n  switch (rarity) {\n    case 'common':\n      return '#9ca3af';\n    case 'rare':\n      return '#3b82f6';\n    case 'epic':\n      return '#a855f7';\n    case 'legendary':\n      return '#f59e0b';\n  }\n}\n","size_bytes":28507},"src/game/MeleeWeaponForms.ts":{"content":"export type ComboStrike = {\n  name: string;\n  angleOffset: number;\n  damageMultiplier: number;\n  swingAngleModifier: number;\n  speedModifier: number;\n  effectType?: 'none' | 'slam' | 'thrust' | 'spin' | 'wide';\n  playerMovement?: {\n    dashForward?: number;\n    dashBackward?: number;\n    dashLeft?: number;\n    dashRight?: number;\n  };\n};\n\nexport type MeleeForm = {\n  id: string;\n  name: string;\n  description: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  comboPattern: ComboStrike[];\n  icon: string;\n};\n\nexport const MELEE_FORMS: Record<string, MeleeForm> = {\n  basic_form: {\n    id: 'basic_form',\n    name: 'Basic Form',\n    description: 'Standard swing pattern',\n    rarity: 'common',\n    icon: 'sword',\n    comboPattern: [\n      {\n        name: 'Right Slash',\n        angleOffset: 0,\n        damageMultiplier: 1.0,\n        swingAngleModifier: 1.0,\n        speedModifier: 1.0,\n        effectType: 'none',\n      },\n      {\n        name: 'Left Slash',\n        angleOffset: 0,\n        damageMultiplier: 1.0,\n        swingAngleModifier: 1.0,\n        speedModifier: 1.0,\n        effectType: 'none',\n      },\n      {\n        name: 'Overhead Slam',\n        angleOffset: -30,\n        damageMultiplier: 1.3,\n        swingAngleModifier: 0.8,\n        speedModifier: 0.9,\n        effectType: 'slam',\n      },\n    ],\n  },\n\n  rapid_form: {\n    id: 'rapid_form',\n    name: 'Rapid Form',\n    description: 'Quick consecutive strikes with increasing speed',\n    rarity: 'rare',\n    icon: 'zap',\n    comboPattern: [\n      {\n        name: 'Quick Slash',\n        angleOffset: 0,\n        damageMultiplier: 0.7,\n        swingAngleModifier: 0.8,\n        speedModifier: 1.4,\n        effectType: 'none',\n      },\n      {\n        name: 'Reverse Slash',\n        angleOffset: 0,\n        damageMultiplier: 0.75,\n        swingAngleModifier: 0.8,\n        speedModifier: 1.5,\n        effectType: 'none',\n      },\n      {\n        name: 'Rapid Flurry',\n        angleOffset: 0,\n        damageMultiplier: 0.85,\n        swingAngleModifier: 0.9,\n        speedModifier: 1.6,\n        effectType: 'none',\n      },\n    ],\n  },\n\n  heavy_form: {\n    id: 'heavy_form',\n    name: 'Heavy Form',\n    description: 'Powerful strikes: thrust, thrust, crushing slam with forward push',\n    rarity: 'rare',\n    icon: 'hammer',\n    comboPattern: [\n      {\n        name: 'Power Thrust',\n        angleOffset: 0,\n        damageMultiplier: 1.3,\n        swingAngleModifier: 0.5,\n        speedModifier: 0.8,\n        effectType: 'thrust',\n        playerMovement: { dashForward: 50 },\n      },\n      {\n        name: 'Heavy Thrust',\n        angleOffset: 0,\n        damageMultiplier: 1.5,\n        swingAngleModifier: 0.5,\n        speedModifier: 0.75,\n        effectType: 'thrust',\n        playerMovement: { dashForward: 60 },\n      },\n      {\n        name: 'Crushing Slam',\n        angleOffset: -45,\n        damageMultiplier: 2.5,\n        swingAngleModifier: 1.2,\n        speedModifier: 0.6,\n        effectType: 'slam',\n      },\n    ],\n  },\n\n  flowing_form: {\n    id: 'flowing_form',\n    name: 'Flowing Form',\n    description: 'Circular sweeping attacks with extended reach',\n    rarity: 'epic',\n    icon: 'wind',\n    comboPattern: [\n      {\n        name: 'Wide Sweep',\n        angleOffset: -45,\n        damageMultiplier: 1.0,\n        swingAngleModifier: 1.5,\n        speedModifier: 1.0,\n        effectType: 'wide',\n      },\n      {\n        name: 'Reverse Sweep',\n        angleOffset: 45,\n        damageMultiplier: 1.1,\n        swingAngleModifier: 1.5,\n        speedModifier: 1.0,\n        effectType: 'wide',\n      },\n      {\n        name: 'Full Circle',\n        angleOffset: 0,\n        damageMultiplier: 1.5,\n        swingAngleModifier: 2.5,\n        speedModifier: 0.9,\n        effectType: 'spin',\n      },\n    ],\n  },\n\n  assassin_form: {\n    id: 'assassin_form',\n    name: 'Assassin Form',\n    description: 'Precise strikes followed by a devastating finisher',\n    rarity: 'epic',\n    icon: 'crosshair',\n    comboPattern: [\n      {\n        name: 'Precision Cut',\n        angleOffset: 0,\n        damageMultiplier: 1.2,\n        swingAngleModifier: 0.6,\n        speedModifier: 1.3,\n        effectType: 'thrust',\n      },\n      {\n        name: 'Surgical Strike',\n        angleOffset: 0,\n        damageMultiplier: 1.4,\n        swingAngleModifier: 0.6,\n        speedModifier: 1.3,\n        effectType: 'thrust',\n      },\n      {\n        name: 'Execute',\n        angleOffset: 0,\n        damageMultiplier: 3.0,\n        swingAngleModifier: 0.7,\n        speedModifier: 1.2,\n        effectType: 'thrust',\n      },\n    ],\n  },\n\n  berserker_form: {\n    id: 'berserker_form',\n    name: 'Berserker Form',\n    description: 'Wild, unpredictable attacks with massive damage',\n    rarity: 'legendary',\n    icon: 'flame',\n    comboPattern: [\n      {\n        name: 'Reckless Swing',\n        angleOffset: -30,\n        damageMultiplier: 1.5,\n        swingAngleModifier: 1.3,\n        speedModifier: 1.1,\n        effectType: 'none',\n      },\n      {\n        name: 'Wild Strike',\n        angleOffset: 30,\n        damageMultiplier: 1.8,\n        swingAngleModifier: 1.3,\n        speedModifier: 1.15,\n        effectType: 'none',\n      },\n      {\n        name: 'Devastating Cleave',\n        angleOffset: 0,\n        damageMultiplier: 2.2,\n        swingAngleModifier: 1.5,\n        speedModifier: 1.0,\n        effectType: 'wide',\n      },\n      {\n        name: 'Rampage',\n        angleOffset: 0,\n        damageMultiplier: 3.5,\n        swingAngleModifier: 2.0,\n        speedModifier: 0.9,\n        effectType: 'spin',\n      },\n    ],\n  },\n\n  guardian_form: {\n    id: 'guardian_form',\n    name: 'Guardian Form',\n    description: 'Defensive strikes with knockback and protection',\n    rarity: 'legendary',\n    icon: 'shield',\n    comboPattern: [\n      {\n        name: 'Defensive Slash',\n        angleOffset: 0,\n        damageMultiplier: 1.0,\n        swingAngleModifier: 1.2,\n        speedModifier: 0.95,\n        effectType: 'wide',\n      },\n      {\n        name: 'Counter Strike',\n        angleOffset: 0,\n        damageMultiplier: 1.3,\n        swingAngleModifier: 1.0,\n        speedModifier: 1.1,\n        effectType: 'none',\n      },\n      {\n        name: 'Protective Sweep',\n        angleOffset: 0,\n        damageMultiplier: 1.8,\n        swingAngleModifier: 1.8,\n        speedModifier: 0.85,\n        effectType: 'wide',\n      },\n    ],\n  },\n\n  void_form: {\n    id: 'void_form',\n    name: 'Void Form',\n    description: 'Dimensional slashes that ignore space',\n    rarity: 'legendary',\n    icon: 'sparkles',\n    comboPattern: [\n      {\n        name: 'Void Rend',\n        angleOffset: 0,\n        damageMultiplier: 1.4,\n        swingAngleModifier: 0.9,\n        speedModifier: 1.2,\n        effectType: 'thrust',\n      },\n      {\n        name: 'Reality Slash',\n        angleOffset: 90,\n        damageMultiplier: 1.6,\n        swingAngleModifier: 1.0,\n        speedModifier: 1.2,\n        effectType: 'none',\n      },\n      {\n        name: 'Dimensional Rift',\n        angleOffset: 0,\n        damageMultiplier: 2.5,\n        swingAngleModifier: 2.0,\n        speedModifier: 1.0,\n        effectType: 'spin',\n      },\n    ],\n  },\n};\n\nexport function getRandomMeleeForm(rarity?: 'common' | 'rare' | 'epic' | 'legendary'): MeleeForm {\n  const formArray = Object.values(MELEE_FORMS);\n  \n  if (rarity) {\n    const filteredForms = formArray.filter(f => f.rarity === rarity);\n    if (filteredForms.length > 0) {\n      return filteredForms[Math.floor(Math.random() * filteredForms.length)];\n    }\n  }\n  \n  const rand = Math.random();\n  if (rand < 0.4) {\n    const commonForms = formArray.filter(f => f.rarity === 'common');\n    return commonForms[Math.floor(Math.random() * commonForms.length)] || MELEE_FORMS.basic_form;\n  } else if (rand < 0.7) {\n    const rareForms = formArray.filter(f => f.rarity === 'rare');\n    return rareForms[Math.floor(Math.random() * rareForms.length)] || MELEE_FORMS.rapid_form;\n  } else if (rand < 0.9) {\n    const epicForms = formArray.filter(f => f.rarity === 'epic');\n    return epicForms[Math.floor(Math.random() * epicForms.length)] || MELEE_FORMS.flowing_form;\n  } else {\n    const legendaryForms = formArray.filter(f => f.rarity === 'legendary');\n    return legendaryForms[Math.floor(Math.random() * legendaryForms.length)] || MELEE_FORMS.void_form;\n  }\n}\n\nexport function getFormForWeapon(weaponType: string): MeleeForm {\n  return getRandomMeleeForm();\n}\n\nexport function applyFormToMeleeStats(\n  baseMeleeStats: any,\n  form: MeleeForm,\n  comboIndex: number\n): any {\n  const strike = form.comboPattern[comboIndex % form.comboPattern.length];\n  \n  return {\n    ...baseMeleeStats,\n    swingAngle: baseMeleeStats.swingAngle * strike.swingAngleModifier,\n    comboCount: form.comboPattern.length,\n    currentStrike: strike,\n  };\n}\n","size_bytes":8765},"src/types/game.ts":{"content":"export type WeaponType =\n  | 'blaster'\n  | 'shotgun'\n  | 'laser'\n  | 'missile'\n  | 'railgun'\n  | 'flamethrower'\n  | 'arc_cannon'\n  | 'gravity_well'\n  | 'shuriken_launcher'\n  | 'beam_laser'\n  | 'charge_cannon'\n  | 'grappling_hook'\n  | 'void_blade'\n  | 'crimson_scythe'\n  | 'titan_hammer'\n  | 'flowing_glaive'\n  | 'shadow_daggers'\n  | 'berserker_axe'\n  | 'guardian_blade';\n\nexport interface Vector2 {\n  x: number;\n  y: number;\n}\n\nexport interface Entity {\n  id: string;\n  position: Vector2;\n  velocity: Vector2;\n  size: number;\n  rotation: number;\n}\n\nexport interface Player extends Entity {\n  health: number;\n  maxHealth: number;\n  shieldAbsorption?: number;\n  damageBoost?: number;\n  critChance?: number;\n  detectionRangeBoost?: number;\n  speed: number;\n  isDashing: boolean;\n  dashCooldown: number;\n  dashDuration: number;\n  currency: number;\n  equippedWeapons: Weapon[];\n  equippedDrones: DroneType[];\n  activeWeaponIndex: number;\n  portalCooldown?: number;\n  isGrappling?: boolean;\n  grappleTarget?: Vector2;\n  grappleTargetId?: string;\n  grappleTargetType?: 'enemy' | 'player' | 'obstacle';\n  grappleProgress?: number;\n  glideVelocity?: Vector2;\n  isGliding?: boolean;\n  resources: {\n    energy: number;\n    coreDust: number;\n    flux: number;\n    geoShards: number;\n    alloyFragments: number;\n    singularityCore: number;\n    // Biome-specific\n    cryoKelp: number;\n    obsidianHeart: number;\n    gloomRoot: number;\n    resonantCrystal: number;\n    voidEssence: number;\n    bioluminescentPearl: number;\n    sunpetalBloom: number;\n    aetheriumShard: number;\n    gravitonEssence: number;\n    voidCore: number;\n    // Keys\n    crateKey: number;\n  };\n  consumables: Consumable[];\n}\n\nexport type MinibossSubtype = \n  | 'angulodon'\n  | 'cryostag_vanguard'\n  | 'pyroclast_behemoth'\n  | 'mirelurker_matron'\n  | 'prism_guardian'\n  | 'null_siren'\n  | 'solstice_warden'\n  | 'rift_revenant'\n  | 'aether_leviathan'\n  | 'bloom_warden';\n\nexport type DroneType = \n  | 'assault_drone'\n  | 'shield_drone'\n  | 'repair_drone'\n  | 'scout_drone'\n  | 'plasma_drone'\n  | 'cryo_drone'\n  | 'explosive_drone'\n  | 'emp_drone'\n  | 'sniper_drone'\n  | 'laser_drone'\n  | 'swarm_drone'\n  | 'gravity_drone'\n  | 'medic_drone'\n  | 'tesla_drone'\n  | 'void_drone';\n\nexport interface Drone extends Entity {\n  droneType: DroneType;\n  ownerId: string;\n  damage: number;\n  fireRate: number;\n  attackCooldown: number;\n  orbitRadius: number;\n  orbitAngle: number;\n  orbitSpeed: number;\n  targetId?: string;\n  color: string;\n  secondaryColor: string;\n  shape: 'circle' | 'triangle' | 'square' | 'hexagon' | 'diamond' | 'cross' | 'star';\n  detectionRadius: number;\n  aiState?: 'hovering' | 'orbiting' | 'spinning';\n  aiTimer?: number;\n  hoverOffset?: Vector2;\n  activeEffectCooldown: number;\n  activeEffectTimer: number;\n  isActiveEffectActive?: boolean;\n  activeEffectRemainingTime?: number;\n}\n\nexport interface Enemy extends Entity {\n  type: 'grunt' | 'speedy' | 'tank' | 'sniper' | 'artillery' | 'burst' | 'dasher' | 'weaver' | 'laser' | 'boss' | 'miniboss' | 'orbiter' | 'fragmenter' | 'pulsar' | 'spiraler' | 'replicator' | 'vortex';\n  bossType?: 'void_subdivider';\n  minibossSubtype?: MinibossSubtype;\n  health: number;\n  maxHealth: number;\n  damage: number;\n  speed: number;\n  color: string;\n  attackCooldown: number;\n  currencyDrop: number;\n  isAggro?: boolean;\n  detectionRadius?: number;\n  isDashing?: boolean;\n  dashTimer?: number;\n  dashCooldown?: number;\n  wavePhase?: number;\n  waveAmplitude?: number;\n  wanderAngle?: number;\n  wanderTimer?: number;\n  modifiers?: string[];\n  orbitalProjectiles?: any[];\n  orbitalAngle?: number;\n  orbitalRadius?: number;\n  fragmentCount?: number;\n  pulseTimer?: number;\n  pulseRadius?: number;\n  spiralAngle?: number;\n  spiralPhase?: number;\n  replicateTimer?: number;\n  replicateCount?: number;\n  vortexPullStrength?: number;\n  vortexRadius?: number;\n  phase?: string;\n  behaviorState?: string;\n  phaseTimer?: number;\n  attackQueueTimer?: number;\n  nextAttack?: string;\n  isSubmerged?: boolean;\n  shieldActive?: boolean;\n  shieldHealth?: number;\n  cloneIds?: string[];\n  pullRadius?: number;\n  telegraphTimer?: number;\n  whirlpoolAngle?: number;\n  jaws?: { isOpen: boolean; biteTimer: number; grabbedPlayerId?: string };\n  segments?: Array<{ position: Vector2; rotation: number; size: number }>;\n}\n\nexport interface Projectile extends Entity {\n  damage: number;\n  color: string;\n  owner: 'player' | 'enemy';\n  playerId?: string;\n  lifetime: number;\n  maxLifetime?: number;\n  piercing: boolean;\n  piercingCount: number;\n  homing?: boolean;\n  homingStrength?: number;\n  explosive?: boolean;\n  explosionRadius?: number;\n  ricochet?: boolean;\n  ricochetCount?: number;\n  maxRange?: number;\n  travelDistance?: number;\n  weaponType?: string;\n  isCharged?: boolean;\n  chargeLevel?: number;\n  chainTarget?: string;\n  chainCount?: number;\n  chainedFrom?: string;\n  splitCount?: number;\n  isSplit?: boolean;\n  isPortal?: boolean;\n  portalPair?: string;\n  isOrbital?: boolean;\n  orbitRadius?: number;\n  orbitAngle?: number;\n  orbitSpeed?: number;\n  parentId?: string;\n  isBeam?: boolean;\n  beamLength?: number;\n  projectileSpeed?: number;\n  isGravityWell?: boolean;\n  gravityRadius?: number;\n  gravityStrength?: number;\n  wallPierce?: boolean;\n  isChainLightning?: boolean;\n  chainLightningTarget?: Vector2;\n  killStreak?: number;\n  killStreakTimer?: number;\n}\n\nexport interface Particle extends Entity {\n  maxLifetime: number;\n  lifetime: number;\n  color: string;\n}\n\nexport interface DamageNumber {\n  id: string;\n  position: Vector2;\n  damage: number;\n  lifetime: number;\n  maxLifetime: number;\n  velocity: Vector2;\n  color: string;\n  text: string;\n}\n\nexport interface CurrencyDrop extends Entity {\n  value: number;\n  lifetime: number;\n}\n\nexport interface ResourceDrop extends Entity {\n  resourceType: string;\n  amount: number;\n  lifetime: number;\n  bobPhase: number;\n}\n\nexport interface Chest {\n  id: string;\n  position: Vector2;\n  size: number;\n  rotation: number;\n  type: 'regular' | 'timed' | 'locked';\n  isOpen: boolean;\n  radius?: number;\n  timer?: number;\n  maxTime?: number;\n  requiresKey?: boolean;\n}\n\nexport interface Weapon {\n  id: string;\n  name: string;\n  type: string;\n  damage: number;\n  fireRate: number;\n  projectileSpeed: number;\n  projectileSize: number;\n  projectileCount: number;\n  spread: number;\n  color: string;\n  cooldown: number;\n  firingMode: 'auto' | 'semi' | 'charge' | 'hold' | 'beam' | 'manual';\n  piercing?: boolean;\n  homing?: boolean;\n  homingStrength?: number;\n  explosive?: boolean;\n  explosionRadius?: number;\n  ricochet?: boolean;\n  maxRange?: number;\n  chargeTime?: number;\n  currentCharge?: number;\n  isCharging?: boolean;\n  holdTime?: number;\n  holdTimer?: number;\n  isHolding?: boolean;\n  beamDuration?: number;\n  beamCooldown?: number;\n  beamTimer?: number;\n  isBeaming?: boolean;\n  beamHeat?: number;\n  beamMaxHeat?: number;\n  beamOverheated?: boolean;\n  chainRange?: number;\n  splitCount?: number;\n  portalDuration?: number;\n  orbitalCount?: number;\n  perks?: any[];\n  description?: string;\n  wallPierce?: boolean;\n  railgunBeamTimer?: number;\n  grapplingStats?: {\n    maxRange: number;\n    cooldown: number;\n    pullSpeed: number;\n    slamDamage: number;\n    slamRadius: number;\n    attachBonus: number;\n  };\n  meleeStats?: {\n    range: number;\n    swingDuration: number;\n    swingAngle: number;\n    comboCount: number;\n    comboDamageMultiplier: number;\n    dashSlashBonus: number;\n  };\n  isSwinging?: boolean;\n  swingTimer?: number;\n  comboCounter?: number;\n  comboResetTimer?: number;\n  meleeFormId?: string;\n}\n\nexport interface WeaponDrop extends Entity {\n  weapon: Weapon;\n  weaponPerks: any[];\n  lifetime: number;\n  bobPhase: number;\n}\n\nexport interface UpgradeEffect {\n  target: 'player' | 'weapon' | 'projectile';\n  property: string;\n  value: number;\n  operation: 'add' | 'multiply' | 'set';\n}\n\nexport interface Upgrade {\n  id: string;\n  name: string;\n  type: 'stat' | 'ability';\n  description: string;\n  cost: number;\n  icon: string;\n  level: number;\n  maxLevel: number;\n  effects: UpgradeEffect[];\n}\n\nexport interface Consumable {\n  id: string;\n  name: string;\n  description: string;\n  effect: string;\n  value: number;\n  stackable?: boolean;\n  quantity?: number;\n}\n\nexport interface CraftingRecipe {\n  id: string;\n  name: string;\n  description: string;\n  ingredients: { resource: string; amount: number }[];\n  output: {\n    type: 'consumable' | 'drone';\n    item?: Consumable;\n    droneType?: DroneType;\n  };\n  gridPattern: (string[] | null)[][];\n  patternDescription?: string;\n}\n\nexport interface RemotePlayer {\n  id: string;\n  peerId: string;\n  player: Player;\n  lastUpdate: number;\n  username?: string;\n  serverPosition?: Vector2;\n  serverVelocity?: Vector2;\n  interpolationAlpha?: number;\n}\n\nexport interface GameState {\n  player: Player;\n  remotePlayers: RemotePlayer[];\n  enemies: Enemy[];\n  drones: Drone[];\n  projectiles: Projectile[];\n  particles: Particle[];\n  currencyDrops: CurrencyDrop[];\n  resourceDrops: ResourceDrop[];\n  chests: Chest[];\n  weaponDrops: WeaponDrop[];\n  score: number;\n  isPaused: boolean;\n  isGameOver: boolean;\n  resourcesCollected: number;\n  currentBiomeName: string;\n  damageNumbers: DamageNumber[];\n  pvpEnabled: boolean;\n}\n","size_bytes":9216},"src/components/HUD.tsx":{"content":"import { Shield, Zap } from 'lucide-react';\nimport { GameState } from '../types/game';\nimport { useEffect, useState, useRef } from 'react';\n\ninterface HUDProps {\n  gameState: GameState;\n  interactionText?: string;\n}\n\nexport default function HUD({ gameState, interactionText }: HUDProps) {\n  const { player, currentBiomeName } = gameState;\n  const healthPercent = (player.health / player.maxHealth) * 100;\n  const dashPercent = Math.max(0, (1 - player.dashCooldown / 1.5) * 100);\n\n  const [notification, setNotification] = useState<{ name: string; key: number } | null>(null);\n  const prevBiomeNameRef = useRef(currentBiomeName);\n\n  useEffect(() => {\n    if (currentBiomeName && currentBiomeName !== prevBiomeNameRef.current) {\n      setNotification({ name: currentBiomeName, key: Date.now() });\n      prevBiomeNameRef.current = currentBiomeName;\n    }\n  }, [currentBiomeName]);\n\n  return (\n    <>\n      {notification && (\n        <div\n          key={notification.key}\n          className=\"absolute top-8 left-1/2 -translate-x-1/2 z-50 pointer-events-none\"\n        >\n          <div className=\"bg-slate-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg px-8 py-4 shadow-2xl shadow-cyan-500/10 text-center animate-fade-slide-down\">\n            <p className=\"text-sm text-slate-400 tracking-widest uppercase\">Entering</p>\n            <h2 className=\"text-3xl font-bold text-white tracking-wide\">{notification.name}</h2>\n          </div>\n        </div>\n      )}\n      <div className=\"absolute top-4 left-4 space-y-2 pointer-events-none select-none\">\n        <div className=\"bg-slate-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-2 shadow-lg w-52\">\n          <div className=\"flex items-center gap-2 mb-1.5\">\n            <Shield className=\"w-3.5 h-3.5 text-red-400\" />\n            <span className=\"text-[10px] font-bold text-slate-300 tracking-wide\">HULL</span>\n            <span className=\"text-[10px] text-slate-400 ml-auto\">{Math.ceil(player.health)} / {player.maxHealth}</span>\n          </div>\n          <div className=\"w-full h-2 bg-slate-800 rounded-full overflow-hidden border border-slate-700\">\n            <div\n              className=\"h-full bg-gradient-to-r from-red-500 to-green-500 transition-all duration-300\"\n              style={{ width: `${healthPercent}%` }}\n            />\n          </div>\n          \n          <div className=\"flex items-center gap-2 mb-1.5 mt-2\">\n            <Zap className=\"w-3.5 h-3.5 text-cyan-400\" />\n            <span className=\"text-[10px] font-bold text-slate-300 tracking-wide\">DASH</span>\n            <span className=\"text-[10px] text-slate-400 ml-auto\">{dashPercent === 100 ? 'READY' : 'RECHARGING'}</span>\n          </div>\n          <div className=\"w-full h-2 bg-slate-800 rounded-full overflow-hidden border border-slate-700\">\n            <div\n              className={`h-full transition-all duration-100 ${\n                dashPercent === 100\n                  ? 'bg-gradient-to-r from-cyan-400 to-cyan-300 shadow-lg shadow-cyan-400/50'\n                  : 'bg-slate-600'\n              }`}\n              style={{ width: `${dashPercent}%` }}\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-slate-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-2 shadow-lg\">\n          <div className=\"text-xs text-slate-400 mb-1\">EQUIPPED WEAPONS</div>\n          <div className=\"space-y-1\">\n            {player.equippedWeapons.map((weapon, index) => (\n              <div key={weapon.id}>\n                <div\n                  className={`text-xs px-2 py-1 rounded ${\n                    index === player.activeWeaponIndex\n                      ? 'bg-cyan-500/30 text-cyan-300 border border-cyan-500/50'\n                      : 'bg-slate-800/50 text-slate-400'\n                  }`}\n                >\n                  <span className=\"font-bold\">[{index + 1}]</span> {weapon.name}\n                  {weapon.firingMode === 'auto' && (\n                    <span className=\"ml-1 text-green-400 text-[10px]\">AUTO</span>\n                  )}\n                  {weapon.firingMode === 'beam' && (\n                    <span className=\"ml-1 text-yellow-400 text-[10px]\">BEAM</span>\n                  )}\n                  {weapon.firingMode === 'charge' && (\n                    <span className=\"ml-1 text-purple-400 text-[10px]\">CHARGE</span>\n                  )}\n                </div>\n                {index === player.activeWeaponIndex && weapon.firingMode === 'charge' && weapon.isCharging && (\n                  <div className=\"mt-1 w-full h-1.5 bg-slate-800 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-gradient-to-r from-yellow-500 to-orange-500 transition-all duration-75\"\n                      style={{ width: `${((weapon.currentCharge || 0) / (weapon.chargeTime || 2.0)) * 100}%` }}\n                    />\n                  </div>\n                )}\n                {index === player.activeWeaponIndex && weapon.firingMode === 'beam' && weapon.beamMaxHeat && (\n                  <div className=\"mt-1 space-y-0.5\">\n                    <div className=\"flex items-center justify-between text-[10px]\">\n                      <span className=\"text-slate-400\">HEAT</span>\n                      <span className={weapon.beamOverheated ? 'text-red-400 font-bold' : 'text-slate-400'}>\n                        {weapon.beamOverheated ? 'OVERHEATED!' : `${Math.round((weapon.beamHeat || 0) / weapon.beamMaxHeat * 100)}%`}\n                      </span>\n                    </div>\n                    <div className=\"w-full h-1.5 bg-slate-800 rounded-full overflow-hidden\">\n                      <div\n                        className={`h-full transition-all duration-75 ${\n                          weapon.beamOverheated\n                            ? 'bg-red-500'\n                            : (weapon.beamHeat || 0) > weapon.beamMaxHeat * 0.8\n                            ? 'bg-gradient-to-r from-orange-500 to-red-500'\n                            : 'bg-gradient-to-r from-green-500 to-yellow-500'\n                        }`}\n                        style={{ width: `${((weapon.beamHeat || 0) / weapon.beamMaxHeat) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {interactionText && (\n        <div className=\"absolute bottom-8 left-4 pointer-events-none select-none\">\n          <div className=\"bg-slate-900/60 backdrop-blur-sm border border-cyan-500/20 rounded px-3 py-1.5 shadow-lg\">\n            <p className=\"text-xs text-slate-300\">\n              {interactionText}\n            </p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":6725},"src/game/EnemyModifierSystem.ts":{"content":"import { Enemy, Vector2 } from '../types/game';\nimport { generateId, vectorFromAngle, vectorDistance, vectorNormalize, vectorSubtract, vectorAdd, vectorScale, createVector } from './utils';\n\nexport type EnemyModifier =\n  | 'shield'\n  | 'phase'\n  | 'mirror'\n  | 'absorb'\n  | 'split'\n  | 'temporal'\n  | 'reactive'\n  | 'volatile'\n  | 'anchored'\n  | 'blink'\n  | 'enrage'\n  | 'teleport'\n  | 'regenerate'\n  | 'gravity'\n  | 'magnet'\n  | 'thorns'\n  | 'barrier'\n  | 'overcharge';\n\nexport interface Shield {\n  id: string;\n  angle: number;\n  health: number;\n  maxHealth: number;\n  size: number;\n}\n\nexport interface ModifiedEnemy extends Enemy {\n  modifiers: EnemyModifier[];\n  shields?: Shield[];\n  phaseTimer?: number;\n  isPhased?: boolean;\n  mirrorCharges?: number;\n  absorbedDamage?: number;\n  absorbCooldown?: number;\n  maxAbsorbCharges?: number;\n  absorbCharges?: number;\n  splitCount?: number;\n  hasSplit?: boolean;\n  temporalStack?: number;\n  temporalCooldown?: number;\n  reactiveCounter?: number;\n  volatileThreshold?: number;\n  anchoredPosition?: Vector2;\n  anchorRadius?: number;\n  blinkCooldown?: number;\n  blinkCharges?: number;\n  enrageThreshold?: number;\n  isEnraged?: boolean;\n  teleportCooldown?: number;\n  teleportCharges?: number;\n  modifierParticleTimer?: number;\n  baseSpeed?: number;\n  baseDamage?: number;\n  regenRate?: number;\n  regenTimer?: number;\n  gravityPullRadius?: number;\n  gravityStrength?: number;\n  magnetRadius?: number;\n  magnetStrength?: number;\n  thornsDamage?: number;\n  barriersActive?: boolean;\n  barrierHealth?: number;\n  overchargeStacks?: number;\n  overchargeTimer?: number;\n}\n\nconst MODIFIER_DESCRIPTIONS: Record<EnemyModifier, string> = {\n  shield: 'Protected by rotating shields',\n  phase: 'Phases in and out, invulnerable when phased',\n  mirror: 'Reflects projectiles back',\n  absorb: 'Absorbs damage and releases explosion',\n  split: 'Splits into smaller enemies when damaged',\n  temporal: 'Rewinds time to restore health',\n  reactive: 'Becomes faster and stronger when hit',\n  volatile: 'Explodes violently when health is low',\n  anchored: 'Tethered to position, pulls players',\n  blink: 'Teleports short distances',\n  enrage: 'Becomes stronger at low health',\n  teleport: 'Teleports around the battlefield',\n  regenerate: 'Slowly regenerates health over time',\n  gravity: 'Creates gravity well that pulls projectiles',\n  magnet: 'Attracts nearby currency and items',\n  thorns: 'Damages attackers when hit',\n  barrier: 'Protected by energy barrier',\n  overcharge: 'Gains power stacks over time',\n};\n\nexport class EnemyModifierSystem {\n  private modifiedEnemies: Map<string, ModifiedEnemy> = new Map();\n  private readonly SPAWN_CHANCE = 0.15;\n\n  shouldApplyModifier(): boolean {\n    return Math.random() < this.SPAWN_CHANCE;\n  }\n\n  getRandomModifier(): EnemyModifier {\n    const modifiers: EnemyModifier[] = [\n      'shield', 'phase', 'mirror', 'absorb', 'split',\n      'temporal', 'reactive', 'volatile', 'anchored', 'blink',\n      'enrage', 'teleport', 'regenerate', 'gravity', 'magnet',\n      'thorns', 'barrier', 'overcharge'\n    ];\n    return modifiers[Math.floor(Math.random() * modifiers.length)];\n  }\n\n  getRandomModifiers(count: number = 1): EnemyModifier[] {\n    const modifiers: EnemyModifier[] = [];\n    const available: EnemyModifier[] = [\n      'shield', 'phase', 'mirror', 'absorb', 'split',\n      'temporal', 'reactive', 'volatile', 'anchored', 'blink',\n      'enrage', 'teleport', 'regenerate', 'gravity', 'magnet',\n      'thorns', 'barrier', 'overcharge'\n    ];\n\n    for (let i = 0; i < count && available.length > 0; i++) {\n      const index = Math.floor(Math.random() * available.length);\n      modifiers.push(available[index]);\n      available.splice(index, 1);\n    }\n\n    return modifiers;\n  }\n\n  applyModifiersToEnemy(enemy: Enemy, modifiers: EnemyModifier[]): ModifiedEnemy {\n    const modified: ModifiedEnemy = {\n      ...enemy,\n      modifiers,\n      modifierParticleTimer: 0,\n      baseSpeed: enemy.speed,\n      baseDamage: enemy.damage,\n    };\n\n    modified.health = Math.floor(enemy.health * (1 + modifiers.length * 0.3));\n    modified.maxHealth = modified.health;\n    modified.currencyDrop = Math.floor(enemy.currencyDrop * (1 + modifiers.length * 0.5));\n\n    modifiers.forEach(modifier => {\n      this.initializeModifier(modified, modifier);\n    });\n\n    this.modifiedEnemies.set(modified.id, modified);\n    return modified;\n  }\n\n  private initializeModifier(enemy: ModifiedEnemy, modifier: EnemyModifier): void {\n    switch (modifier) {\n      case 'shield':\n        enemy.shields = [\n          { id: generateId(), angle: 0, health: 50, maxHealth: 50, size: enemy.size * 1.5 },\n          { id: generateId(), angle: 2.094, health: 50, maxHealth: 50, size: enemy.size * 1.5 },\n          { id: generateId(), angle: 4.188, health: 50, maxHealth: 50, size: enemy.size * 1.5 },\n        ];\n        break;\n      case 'phase':\n        enemy.phaseTimer = 0;\n        enemy.isPhased = false;\n        break;\n      case 'mirror':\n        enemy.mirrorCharges = 5;\n        break;\n      case 'absorb':\n        enemy.absorbedDamage = 0;\n        enemy.absorbCooldown = 0;\n        enemy.maxAbsorbCharges = 2;\n        enemy.absorbCharges = 2;\n        break;\n      case 'split':\n        enemy.splitCount = 2;\n        enemy.hasSplit = false;\n        break;\n      case 'temporal':\n        enemy.temporalStack = 0;\n        enemy.temporalCooldown = 0;\n        break;\n      case 'reactive':\n        enemy.reactiveCounter = 0;\n        break;\n      case 'volatile':\n        enemy.volatileThreshold = enemy.maxHealth * 0.3;\n        break;\n      case 'anchored':\n        enemy.anchoredPosition = { ...enemy.position };\n        enemy.anchorRadius = 250;\n        break;\n      case 'blink':\n        enemy.blinkCooldown = 0;\n        enemy.blinkCharges = 3;\n        break;\n      case 'enrage':\n        enemy.enrageThreshold = enemy.maxHealth * 0.3;\n        enemy.isEnraged = false;\n        break;\n      case 'teleport':\n        enemy.teleportCooldown = 0;\n        enemy.teleportCharges = 3;\n        break;\n      case 'regenerate':\n        enemy.regenRate = enemy.maxHealth * 0.05;\n        enemy.regenTimer = 0;\n        break;\n      case 'gravity':\n        enemy.gravityPullRadius = 200;\n        enemy.gravityStrength = 1.5;\n        break;\n      case 'magnet':\n        enemy.magnetRadius = 150;\n        enemy.magnetStrength = 2;\n        break;\n      case 'thorns':\n        enemy.thornsDamage = enemy.damage * 0.5;\n        break;\n      case 'barrier':\n        enemy.barriersActive = true;\n        enemy.barrierHealth = 100;\n        break;\n      case 'overcharge':\n        enemy.overchargeStacks = 0;\n        enemy.overchargeTimer = 0;\n        break;\n    }\n  }\n\n  updateModifiers(\n    dt: number,\n    playerPosition: Vector2,\n    onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void,\n    onExplosion?: (position: Vector2, radius: number, damage: number) => void\n  ): void {\n    this.modifiedEnemies.forEach((enemy) => {\n      if (enemy.health <= 0) return;\n\n      enemy.modifiers.forEach(modifier => {\n        this.updateModifier(enemy, modifier, dt, playerPosition, onParticleCreate, onExplosion);\n      });\n    });\n  }\n\n  private updateModifier(\n    enemy: ModifiedEnemy,\n    modifier: EnemyModifier,\n    dt: number,\n    playerPosition: Vector2,\n    onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void,\n    onExplosion?: (position: Vector2, radius: number, damage: number) => void\n  ): void {\n    switch (modifier) {\n      case 'shield':\n        this.updateShield(enemy, dt);\n        break;\n      case 'phase':\n        this.updatePhase(enemy, dt, onParticleCreate);\n        break;\n      case 'temporal':\n        this.updateTemporal(enemy, dt, onParticleCreate);\n        break;\n      case 'reactive':\n        this.updateReactive(enemy);\n        break;\n      case 'volatile':\n        this.updateVolatile(enemy, onExplosion);\n        break;\n      case 'anchored':\n        this.updateAnchored(enemy);\n        break;\n      case 'blink':\n        this.updateBlink(enemy, dt, playerPosition, onParticleCreate);\n        break;\n      case 'enrage':\n        this.updateEnrage(enemy);\n        break;\n      case 'teleport':\n        this.updateTeleport(enemy, dt, playerPosition, onParticleCreate);\n        break;\n      case 'regenerate':\n        this.updateRegenerate(enemy, dt, onParticleCreate);\n        break;\n      case 'overcharge':\n        this.updateOvercharge(enemy, dt, onParticleCreate);\n        break;\n      case 'gravity':\n        this.updateGravity(enemy);\n        break;\n      case 'magnet':\n        this.updateMagnet(enemy);\n        break;\n    }\n  }\n\n  private updateShield(enemy: ModifiedEnemy, dt: number): void {\n    if (!enemy.shields) return;\n    enemy.shields.forEach(shield => {\n      shield.angle += dt * 1.5;\n    });\n  }\n\n  private updatePhase(enemy: ModifiedEnemy, dt: number, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    enemy.phaseTimer = (enemy.phaseTimer || 0) + dt;\n    if (enemy.phaseTimer > 2.5) {\n      enemy.isPhased = !enemy.isPhased;\n      enemy.phaseTimer = 0;\n      onParticleCreate(enemy.position, 15, enemy.isPhased ? '#a78bfa' : enemy.color, 0.5);\n    }\n  }\n\n  private updateTemporal(enemy: ModifiedEnemy, dt: number, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    if (enemy.temporalCooldown !== undefined && enemy.temporalCooldown > 0) {\n      enemy.temporalCooldown -= dt;\n    }\n\n    if ((enemy.temporalCooldown || 0) <= 0 && enemy.health < enemy.maxHealth * 0.5 && (enemy.temporalStack || 0) < 3) {\n      const healAmount = enemy.maxHealth * 0.25;\n      enemy.health = Math.min(enemy.maxHealth, enemy.health + healAmount);\n      enemy.temporalCooldown = 10;\n      enemy.temporalStack = (enemy.temporalStack || 0) + 1;\n      onParticleCreate(enemy.position, 30, '#60a5fa', 0.8);\n    }\n  }\n\n  private updateReactive(enemy: ModifiedEnemy): void {\n    if (enemy.reactiveCounter === undefined) enemy.reactiveCounter = 0;\n    const counter = Math.min(enemy.reactiveCounter, 10);\n    const baseSpeed = enemy.baseSpeed || enemy.speed;\n    const baseDamage = enemy.baseDamage || enemy.damage;\n    enemy.speed = baseSpeed * (1 + counter * 0.08);\n    enemy.damage = Math.floor(baseDamage * (1 + counter * 0.1));\n  }\n\n  private updateVolatile(enemy: ModifiedEnemy, onExplosion?: (position: Vector2, radius: number, damage: number) => void): void {\n    if (enemy.health <= (enemy.volatileThreshold || 0) && onExplosion) {\n      onExplosion(enemy.position, 100, enemy.damage * 2);\n      enemy.health = 0;\n    }\n  }\n\n  private updateAnchored(enemy: ModifiedEnemy): void {\n    if (!enemy.anchoredPosition) return;\n    const distFromAnchor = vectorDistance(enemy.position, enemy.anchoredPosition);\n    if (distFromAnchor > (enemy.anchorRadius || 250)) {\n      const pullDir = vectorNormalize(vectorSubtract(enemy.anchoredPosition, enemy.position));\n      enemy.position = vectorAdd(enemy.position, vectorScale(pullDir, 2));\n    }\n  }\n\n  private updateBlink(enemy: ModifiedEnemy, dt: number, playerPosition: Vector2, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    if (enemy.blinkCooldown !== undefined && enemy.blinkCooldown > 0) {\n      enemy.blinkCooldown -= dt;\n    }\n\n    if ((enemy.blinkCooldown || 0) <= 0 && (enemy.blinkCharges || 0) > 0) {\n      const distToPlayer = vectorDistance(enemy.position, playerPosition);\n      if (distToPlayer > 150 && distToPlayer < 400) {\n        const dirToPlayer = vectorNormalize(vectorSubtract(playerPosition, enemy.position));\n        const blinkDistance = 80;\n        const newPosition = vectorAdd(enemy.position, vectorScale(dirToPlayer, blinkDistance));\n\n        onParticleCreate(enemy.position, 15, enemy.color, 0.4);\n        enemy.position = newPosition;\n        onParticleCreate(enemy.position, 15, enemy.color, 0.4);\n\n        enemy.blinkCharges = (enemy.blinkCharges || 0) - 1;\n        enemy.blinkCooldown = 2.5;\n      }\n    }\n  }\n\n  private updateEnrage(enemy: ModifiedEnemy): void {\n    if (enemy.isEnraged === undefined) enemy.isEnraged = false;\n    if (!enemy.isEnraged && enemy.health <= (enemy.enrageThreshold || 0)) {\n      enemy.isEnraged = true;\n      const baseSpeed = enemy.baseSpeed || enemy.speed;\n      const baseDamage = enemy.baseDamage || enemy.damage;\n      enemy.speed = baseSpeed * 1.5;\n      enemy.damage = Math.floor(baseDamage * 1.5);\n      enemy.size = enemy.size * 1.1;\n    }\n  }\n\n  private updateTeleport(enemy: ModifiedEnemy, dt: number, playerPosition: Vector2, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    if (enemy.teleportCooldown !== undefined && enemy.teleportCooldown > 0) {\n      enemy.teleportCooldown -= dt;\n    }\n\n    if ((enemy.teleportCooldown || 0) <= 0) {\n      const distToPlayer = Math.sqrt(\n        Math.pow(enemy.position.x - playerPosition.x, 2) +\n        Math.pow(enemy.position.y - playerPosition.y, 2)\n      );\n\n      const shouldTeleport = Math.random() < 0.3 && distToPlayer > 100;\n\n      if (shouldTeleport) {\n        const angle = Math.random() * Math.PI * 2;\n        const distance = 100 + Math.random() * 200;\n        const newPosition = {\n          x: enemy.position.x + Math.cos(angle) * distance,\n          y: enemy.position.y + Math.sin(angle) * distance,\n        };\n\n        onParticleCreate(enemy.position, 20, enemy.color, 0.5);\n        enemy.position = newPosition;\n        onParticleCreate(enemy.position, 20, enemy.color, 0.5);\n\n        enemy.teleportCooldown = 1.5 + Math.random() * 1.5;\n      }\n    }\n  }\n\n  private updateRegenerate(enemy: ModifiedEnemy, dt: number, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    enemy.regenTimer = (enemy.regenTimer || 0) + dt;\n\n    if (enemy.regenTimer >= 0.5 && enemy.health < enemy.maxHealth) {\n      const healAmount = enemy.regenRate || (enemy.maxHealth * 0.05);\n      enemy.health = Math.min(enemy.maxHealth, enemy.health + healAmount);\n      enemy.regenTimer = 0;\n      onParticleCreate(enemy.position, 5, '#10b981', 0.5);\n    }\n  }\n\n  private updateOvercharge(enemy: ModifiedEnemy, dt: number, onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void): void {\n    enemy.overchargeTimer = (enemy.overchargeTimer || 0) + dt;\n\n    if (enemy.overchargeTimer >= 3 && (enemy.overchargeStacks || 0) < 5) {\n      enemy.overchargeStacks = (enemy.overchargeStacks || 0) + 1;\n      enemy.overchargeTimer = 0;\n\n      const baseSpeed = enemy.baseSpeed || enemy.speed;\n      const baseDamage = enemy.baseDamage || enemy.damage;\n      const stacks = enemy.overchargeStacks || 0;\n\n      enemy.speed = baseSpeed * (1 + stacks * 0.15);\n      enemy.damage = Math.floor(baseDamage * (1 + stacks * 0.2));\n\n      onParticleCreate(enemy.position, 10, '#fbbf24', 0.5);\n    }\n  }\n\n  private updateGravity(enemy: ModifiedEnemy): void {\n    if (!enemy.gravityPullRadius || !enemy.gravityStrength) return;\n  }\n\n  private updateMagnet(enemy: ModifiedEnemy): void {\n    if (!enemy.magnetRadius || !enemy.magnetStrength) return;\n  }\n\n  handleDamage(\n    enemy: ModifiedEnemy,\n    damage: number,\n    projectilePosition: Vector2,\n    projectileVelocity: Vector2,\n    onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void,\n    onProjectileFire?: (projectiles: any[]) => void,\n    onEnemySpawn?: (enemy: Enemy) => void\n  ): { shouldBlockDamage: boolean; shouldReflect: boolean; damageModifier: number } {\n    let shouldBlockDamage = false;\n    let shouldReflect = false;\n    let damageModifier = 1;\n\n    enemy.modifiers.forEach(modifier => {\n      const result = this.handleModifierDamage(\n        enemy,\n        modifier,\n        damage,\n        projectilePosition,\n        projectileVelocity,\n        onParticleCreate,\n        onProjectileFire,\n        onEnemySpawn\n      );\n\n      if (result.shouldBlockDamage) shouldBlockDamage = true;\n      if (result.shouldReflect) shouldReflect = true;\n      damageModifier *= result.damageModifier;\n    });\n\n    return { shouldBlockDamage, shouldReflect, damageModifier };\n  }\n\n  private handleModifierDamage(\n    enemy: ModifiedEnemy,\n    modifier: EnemyModifier,\n    damage: number,\n    projectilePosition: Vector2,\n    projectileVelocity: Vector2,\n    onParticleCreate: (position: Vector2, count: number, color: string, lifetime: number) => void,\n    onProjectileFire?: (projectiles: any[]) => void,\n    onEnemySpawn?: (enemy: Enemy) => void\n  ): { shouldBlockDamage: boolean; shouldReflect: boolean; damageModifier: number } {\n    let shouldBlockDamage = false;\n    let shouldReflect = false;\n    let damageModifier = 1;\n\n    switch (modifier) {\n      case 'shield':\n        if (enemy.shields && enemy.shields.length > 0) {\n          const hitShield = this.checkShieldHit(enemy, projectilePosition);\n          if (hitShield) {\n            hitShield.health -= damage;\n            onParticleCreate(projectilePosition, 10, '#60a5fa', 0.3);\n            if (hitShield.health <= 0) {\n              enemy.shields = enemy.shields.filter(s => s.id !== hitShield.id);\n              onParticleCreate(hitShield.health <= 0 ? projectilePosition : enemy.position, 20, '#ef4444', 0.5);\n            }\n            shouldBlockDamage = true;\n          }\n        }\n        break;\n\n      case 'phase':\n        if (enemy.isPhased === undefined) enemy.isPhased = false;\n        if (enemy.isPhased) {\n          shouldBlockDamage = true;\n          onParticleCreate(projectilePosition, 5, '#a78bfa', 0.2);\n        }\n        break;\n\n      case 'mirror':\n        if ((enemy.mirrorCharges || 0) > 0) {\n          shouldBlockDamage = true;\n          shouldReflect = true;\n          enemy.mirrorCharges = (enemy.mirrorCharges || 0) - 1;\n          onParticleCreate(projectilePosition, 15, '#38bdf8', 0.4);\n        }\n        break;\n\n      case 'absorb':\n        if (enemy.absorbedDamage === undefined) enemy.absorbedDamage = 0;\n        if (enemy.absorbCharges === undefined) enemy.absorbCharges = 2;\n        if (enemy.maxAbsorbCharges === undefined) enemy.maxAbsorbCharges = 2;\n\n        const currentAbsorbed = enemy.absorbedDamage;\n        const absorbLimit = 200;\n\n        if (currentAbsorbed < absorbLimit && enemy.absorbCharges > 0) {\n          const damageToAbsorb = Math.min(damage, absorbLimit - currentAbsorbed);\n          enemy.absorbedDamage = currentAbsorbed + damageToAbsorb;\n          shouldBlockDamage = true;\n          onParticleCreate(enemy.position, 5, '#fbbf24', 0.2);\n\n          if (enemy.absorbedDamage >= absorbLimit) {\n            if (onProjectileFire) {\n              const explosionProjectiles: any[] = [];\n              const burstCount = 8;\n              for (let i = 0; i < burstCount; i++) {\n                const angle = (Math.PI * 2 * i) / burstCount;\n                const velocity = {\n                  x: Math.cos(angle) * 8,\n                  y: Math.sin(angle) * 8\n                };\n\n                explosionProjectiles.push({\n                  id: `absorb-burst-${enemy.id}-${i}`,\n                  position: { ...enemy.position },\n                  velocity,\n                  damage: absorbLimit / 4,\n                  size: 8,\n                  color: '#fbbf24',\n                  owner: 'enemy',\n                  piercing: false,\n                  piercingCount: 0,\n                  lifetime: 2,\n                  rotation: 0,\n                });\n              }\n              onProjectileFire(explosionProjectiles);\n            }\n            onParticleCreate(enemy.position, 40, '#ef4444', 0.8);\n            enemy.absorbedDamage = 0;\n            enemy.absorbCharges = Math.max(0, enemy.absorbCharges - 1);\n          }\n        } else {\n          shouldBlockDamage = false;\n        }\n        break;\n\n      case 'split':\n        if (!enemy.hasSplit && enemy.health < enemy.maxHealth * 0.5 && onEnemySpawn) {\n          enemy.hasSplit = true;\n          const splitCount = enemy.splitCount || 2;\n\n          for (let i = 0; i < splitCount; i++) {\n            const angle = (Math.PI * 2 * i) / splitCount;\n            const offset = vectorFromAngle(angle, 50);\n            const spawnPos = vectorAdd(enemy.position, offset);\n\n            const splitEnemy: Enemy = {\n              id: generateId(),\n              position: spawnPos,\n              velocity: createVector(),\n              rotation: 0,\n              health: enemy.maxHealth * 0.3,\n              maxHealth: enemy.maxHealth * 0.3,\n              damage: enemy.damage * 0.6,\n              size: enemy.size * 0.6,\n              speed: enemy.speed * 1.2,\n              color: enemy.color,\n              type: 'speedy',\n              attackCooldown: 1,\n              currencyDrop: 15,\n            };\n\n            onEnemySpawn(splitEnemy);\n          }\n\n          onParticleCreate(enemy.position, 40, enemy.color, 0.8);\n        }\n        break;\n\n      case 'reactive':\n        if (enemy.reactiveCounter === undefined) enemy.reactiveCounter = 0;\n        const maxReactiveStacks = 10;\n        if (enemy.reactiveCounter < maxReactiveStacks) {\n          enemy.reactiveCounter = enemy.reactiveCounter + 1;\n          this.updateReactive(enemy);\n          onParticleCreate(enemy.position, 5, '#ef4444', 0.3);\n        }\n        break;\n\n      case 'gravity':\n        onParticleCreate(projectilePosition, 3, '#8b5cf6', 0.2);\n        break;\n\n      case 'thorns':\n        if (enemy.thornsDamage === undefined) enemy.thornsDamage = enemy.damage * 0.5;\n        onParticleCreate(enemy.position, 8, '#ef4444', 0.4);\n        damageModifier = 1;\n        break;\n\n      case 'barrier':\n        if (enemy.barrierHealth === undefined) enemy.barrierHealth = 100;\n        if (enemy.barriersActive === undefined) enemy.barriersActive = true;\n        if (enemy.barriersActive && enemy.barrierHealth > 0) {\n          enemy.barrierHealth = enemy.barrierHealth - damage;\n          onParticleCreate(projectilePosition, 12, '#3b82f6', 0.4);\n\n          if (enemy.barrierHealth <= 0) {\n            enemy.barriersActive = false;\n            onParticleCreate(enemy.position, 30, '#ef4444', 0.6);\n          }\n          shouldBlockDamage = true;\n        }\n        break;\n    }\n\n    return { shouldBlockDamage, shouldReflect, damageModifier };\n  }\n\n  private checkShieldHit(enemy: ModifiedEnemy, projectilePosition: Vector2): Shield | null {\n    if (!enemy.shields) return null;\n\n    for (const shield of enemy.shields) {\n      const shieldDistance = enemy.size * 0.8;\n      const shieldX = enemy.position.x + Math.cos(shield.angle) * shieldDistance;\n      const shieldY = enemy.position.y + Math.sin(shield.angle) * shieldDistance;\n      const shieldPos = { x: shieldX, y: shieldY };\n\n      const dist = vectorDistance(projectilePosition, shieldPos);\n      const shieldRadius = shield.size * 0.7;\n\n      if (dist < shieldRadius) {\n        return shield;\n      }\n    }\n\n    return null;\n  }\n\n  isModifiedEnemy(enemy: Enemy): enemy is ModifiedEnemy {\n    return 'modifiers' in enemy && Array.isArray((enemy as ModifiedEnemy).modifiers);\n  }\n\n  getModifiedEnemy(enemyId: string): ModifiedEnemy | undefined {\n    return this.modifiedEnemies.get(enemyId);\n  }\n\n  removeEnemy(enemyId: string): void {\n    this.modifiedEnemies.delete(enemyId);\n  }\n\n  getShields(enemy: ModifiedEnemy): Shield[] {\n    return enemy.shields || [];\n  }\n\n  getModifierDescription(modifier: EnemyModifier): string {\n    return MODIFIER_DESCRIPTIONS[modifier];\n  }\n\n  reset(): void {\n    this.modifiedEnemies.clear();\n  }\n}\n","size_bytes":23595},"README.md":{"content":"mecharyan\n","size_bytes":10},"src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":234},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/components/PatternVisualizer.tsx":{"content":"import React from 'react';\nimport ResourceIcon from './ResourceIcon';\n\ninterface PatternVisualizerProps {\n  pattern: (string[] | null)[][];\n  size?: number;\n}\n\nexport default function PatternVisualizer({ pattern, size = 48 }: PatternVisualizerProps) {\n  const cellSize = size / 3;\n\n  return (\n    <div\n      className=\"inline-grid grid-cols-3 gap-[1px] bg-gray-600 rounded\"\n      style={{ width: size, height: size }}\n    >\n      {pattern.map((row, rowIndex) =>\n        row.map((cell, colIndex) => (\n          <div\n            key={`${rowIndex}-${colIndex}`}\n            className=\"bg-gray-800 flex flex-wrap items-center justify-center p-[1px]\"\n            style={{ width: cellSize - 1, height: cellSize - 1 }}\n          >\n            {cell && cell.length > 0 && (\n              <div className=\"flex flex-wrap gap-[1px] items-center justify-center\">\n                {cell.map((resource, idx) => (\n                  <div key={idx}>\n                    <ResourceIcon\n                      resourceType={resource}\n                      size={cell.length === 1 ? cellSize * 0.7 : cellSize * 0.4}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n","size_bytes":1252},"src/game/GrapplingHookPerks.ts":{"content":"export interface GrapplingHookPerk {\n  id: string;\n  name: string;\n  description: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  icon: string;\n  effects: {\n    property: 'maxRange' | 'cooldown' | 'pullSpeed' | 'slamDamage' | 'slamRadius' | 'attachBonus';\n    value: number;\n    operation: 'add' | 'multiply' | 'set';\n  }[];\n}\n\nexport const GRAPPLING_HOOK_PERKS: GrapplingHookPerk[] = [\n  {\n    id: 'extended_cable',\n    name: 'Extended Cable',\n    description: '+40% Grapple Range',\n    rarity: 'common',\n    icon: 'move-diagonal',\n    effects: [{ property: 'maxRange', value: 0.4, operation: 'multiply' }],\n  },\n  {\n    id: 'quick_retract',\n    name: 'Quick Retract',\n    description: '-30% Cooldown',\n    rarity: 'rare',\n    icon: 'rewind',\n    effects: [{ property: 'cooldown', value: -0.3, operation: 'multiply' }],\n  },\n  {\n    id: 'rapid_pull',\n    name: 'Rapid Pull',\n    description: '+50% Pull Speed',\n    rarity: 'rare',\n    icon: 'fast-forward',\n    effects: [{ property: 'pullSpeed', value: 0.5, operation: 'multiply' }],\n  },\n  {\n    id: 'impact_slam',\n    name: 'Impact Slam',\n    description: 'Create explosion when colliding with enemies',\n    rarity: 'epic',\n    icon: 'bomb',\n    effects: [\n      { property: 'slamDamage', value: 50, operation: 'set' },\n      { property: 'slamRadius', value: 80, operation: 'set' },\n    ],\n  },\n  {\n    id: 'titanium_cable',\n    name: 'Titanium Cable',\n    description: '+80% Range, +20% Pull Speed',\n    rarity: 'epic',\n    icon: 'link',\n    effects: [\n      { property: 'maxRange', value: 0.8, operation: 'multiply' },\n      { property: 'pullSpeed', value: 0.2, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'magnetic_lock',\n    name: 'Magnetic Lock',\n    description: 'Hook attaches to more distant targets',\n    rarity: 'rare',\n    icon: 'magnet',\n    effects: [{ property: 'attachBonus', value: 100, operation: 'add' }],\n  },\n  {\n    id: 'instant_recall',\n    name: 'Instant Recall',\n    description: '-60% Cooldown',\n    rarity: 'legendary',\n    icon: 'rotate-ccw',\n    effects: [{ property: 'cooldown', value: -0.6, operation: 'multiply' }],\n  },\n  {\n    id: 'kinetic_slam',\n    name: 'Kinetic Slam',\n    description: 'Massive explosion on impact',\n    rarity: 'legendary',\n    icon: 'zap',\n    effects: [\n      { property: 'slamDamage', value: 120, operation: 'set' },\n      { property: 'slamRadius', value: 150, operation: 'set' },\n    ],\n  },\n  {\n    id: 'lightweight_hook',\n    name: 'Lightweight Hook',\n    description: '-40% Cooldown, +25% Range',\n    rarity: 'common',\n    icon: 'feather',\n    effects: [\n      { property: 'cooldown', value: -0.4, operation: 'multiply' },\n      { property: 'maxRange', value: 0.25, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'momentum_boost',\n    name: 'Momentum Boost',\n    description: '+100% Pull Speed',\n    rarity: 'epic',\n    icon: 'gauge',\n    effects: [{ property: 'pullSpeed', value: 1.0, operation: 'multiply' }],\n  },\n  {\n    id: 'precision_targeting',\n    name: 'Precision Targeting',\n    description: '+200 Attach Range',\n    rarity: 'common',\n    icon: 'crosshair',\n    effects: [{ property: 'attachBonus', value: 200, operation: 'add' }],\n  },\n  {\n    id: 'double_cable',\n    name: 'Double Cable',\n    description: '+120% Range, Slower Pull',\n    rarity: 'rare',\n    icon: 'git-pull-request',\n    effects: [\n      { property: 'maxRange', value: 1.2, operation: 'multiply' },\n      { property: 'pullSpeed', value: -0.2, operation: 'multiply' },\n    ],\n  },\n  {\n    id: 'shockwave_impact',\n    name: 'Shockwave Impact',\n    description: 'Medium explosion on collision',\n    rarity: 'rare',\n    icon: 'radio',\n    effects: [\n      { property: 'slamDamage', value: 80, operation: 'set' },\n      { property: 'slamRadius', value: 100, operation: 'set' },\n    ],\n  },\n  {\n    id: 'ultra_range',\n    name: 'Ultra Range',\n    description: '+150% Grapple Range',\n    rarity: 'legendary',\n    icon: 'maximize-2',\n    effects: [{ property: 'maxRange', value: 1.5, operation: 'multiply' }],\n  },\n  {\n    id: 'chain_grapple',\n    name: 'Chain Grapple',\n    description: 'Near-instant cooldown for chaining',\n    rarity: 'legendary',\n    icon: 'link-2',\n    effects: [{ property: 'cooldown', value: -0.8, operation: 'multiply' }],\n  },\n];\n\nexport function getRandomGrapplingPerks(count: number): GrapplingHookPerk[] {\n  const shuffled = [...GRAPPLING_HOOK_PERKS].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, Math.min(count, GRAPPLING_HOOK_PERKS.length));\n}\n\nexport function applyGrapplingPerkToWeapon(stats: GrapplingHookStats, perk: GrapplingHookPerk): GrapplingHookStats {\n  const modified = { ...stats };\n\n  perk.effects.forEach((effect) => {\n    const currentValue = modified[effect.property] as number;\n\n    switch (effect.operation) {\n      case 'add':\n        (modified[effect.property] as number) = currentValue + effect.value;\n        break;\n      case 'multiply':\n        (modified[effect.property] as number) = currentValue * (1 + effect.value);\n        break;\n      case 'set':\n        (modified[effect.property] as any) = effect.value;\n        break;\n    }\n  });\n\n  return modified;\n}\n\nexport interface GrapplingHookStats {\n  maxRange: number;\n  cooldown: number;\n  pullSpeed: number;\n  slamDamage: number;\n  slamRadius: number;\n  attachBonus: number;\n}\n\nexport const DEFAULT_GRAPPLING_STATS: GrapplingHookStats = {\n  maxRange: 400,\n  cooldown: 1.2,\n  pullSpeed: 10,\n  slamDamage: 0,\n  slamRadius: 0,\n  attachBonus: 0,\n};\n","size_bytes":5474},"src/game/BiomeFeatureInteraction.ts":{"content":"import { Player, Enemy, Projectile } from '../types/game';\nimport {\n  AnyBiomeFeature,\n  RealityTearFeature,\n  LavaPillarFeature,\n  ToxicPoolFeature,\n  GlacialSpireFeature,\n  CrystalFormationFeature,\n  CoralReefFeature,\n  BloomTreeFeature,\n  GravityAnomalyFeature,\n  VoidGapFeature\n} from './BiomeFeatures';\nimport { vectorDistance, vectorSubtract, vectorNormalize, vectorScale, vectorAdd, createVector } from './utils';\n\nexport interface FeatureEffect {\n  type: 'damage' | 'heal' | 'slow' | 'speed' | 'teleport' | 'pull' | 'push';\n  value: number;\n  duration?: number;\n}\n\nexport class BiomeFeatureInteraction {\n  private time: number = 0;\n\n  updateFeatures(features: AnyBiomeFeature[], deltaTime: number): void {\n    this.time += deltaTime;\n    features.forEach(feature => {\n      switch (feature.type) {\n        case 'lava-pillar':\n          this.updateLavaPillar(feature as LavaPillarFeature, deltaTime);\n          break;\n        case 'glacial-spire':\n          this.updateGlacialSpire(feature as GlacialSpireFeature, deltaTime);\n          break;\n        case 'crystal-formation':\n          this.updateCrystalFormation(feature as CrystalFormationFeature, deltaTime);\n          break;\n        case 'bloom-tree':\n          this.updateBloomTree(feature as BloomTreeFeature, deltaTime);\n          break;\n        case 'gravity-anomaly':\n          this.updateGravityAnomaly(feature as GravityAnomalyFeature, deltaTime);\n          break;\n        case 'void-gap':\n          this.updateVoidGap(feature as VoidGapFeature, deltaTime);\n          break;\n      }\n    });\n  }\n\n  private updateLavaPillar(feature: LavaPillarFeature, deltaTime: number): void {\n    feature.data.eruptionTimer += deltaTime;\n\n    if (feature.data.isErupting) {\n      feature.data.eruptionDuration -= deltaTime;\n\n      if (Math.random() < 0.3) {\n        const angle = Math.random() * Math.PI * 2;\n        const speed = 3 + Math.random() * 2;\n        feature.data.lavaParticles.push({\n          offset: createVector(\n            Math.cos(angle) * (feature.data.width / 2),\n            -feature.data.height / 2\n          ),\n          velocity: createVector(\n            Math.cos(angle) * speed,\n            -8 - Math.random() * 4\n          ),\n          lifetime: 1.5,\n        });\n      }\n\n      feature.data.lavaParticles = feature.data.lavaParticles\n        .map(p => ({\n          ...p,\n          offset: vectorAdd(p.offset, vectorScale(p.velocity, deltaTime * 60)),\n          velocity: vectorAdd(p.velocity, createVector(0, 9.8 * deltaTime)),\n          lifetime: p.lifetime - deltaTime,\n        }))\n        .filter(p => p.lifetime > 0);\n\n      if (feature.data.eruptionDuration <= 0) {\n        feature.data.isErupting = false;\n        feature.data.eruptionDuration = 1.5;\n        feature.data.eruptionTimer = 0;\n      }\n    } else if (feature.data.eruptionTimer >= feature.data.eruptionCooldown) {\n      feature.data.isErupting = true;\n      feature.data.eruptionTimer = 0;\n    }\n  }\n\n  private updateGlacialSpire(feature: GlacialSpireFeature, deltaTime: number): void {\n    if (feature.data.canShatter) {\n      feature.data.shatterTimer += deltaTime;\n    }\n  }\n\n  private updateCrystalFormation(feature: CrystalFormationFeature, deltaTime: number): void {\n    if (feature.data.isResonating) {\n      feature.data.resonanceTimer -= deltaTime;\n      if (feature.data.resonanceTimer <= 0) {\n        feature.data.isResonating = false;\n        feature.data.resonanceTimer = 0;\n      }\n    }\n  }\n\n  private updateBloomTree(feature: BloomTreeFeature, deltaTime: number): void {\n    feature.data.pulseTimer += deltaTime;\n  }\n\n  private updateGravityAnomaly(feature: GravityAnomalyFeature, deltaTime: number): void {\n    feature.data.orbitingDebris.forEach(debris => {\n      debris.angle += debris.speed * debris.orbitDirection * deltaTime;\n    });\n  }\n\n  private updateVoidGap(feature: VoidGapFeature, deltaTime: number): void {\n    if (feature.data.hasOminousTendril) {\n      feature.data.ominousTendrilPulse = (feature.data.ominousTendrilPulse || 0) + deltaTime;\n    }\n  }\n\n  applyFeatureEffects(\n    player: Player,\n    features: AnyBiomeFeature[],\n    deltaTime: number,\n    onTeleport?: (position: { x: number; y: number }) => void,\n    createParticles?: (position: { x: number; y: number }, count: number, color: string, lifetime: number) => void\n  ): { speedMultiplier: number } {\n    let speedMultiplier = 1.0;\n    let isInToxic = false;\n    let toxicSlow = 1.0;\n    let isInWater = false;\n\n    features.forEach(feature => {\n      const distance = vectorDistance(player.position, feature.position);\n\n      switch (feature.type) {\n        case 'reality-tear': {\n          const tear = feature as RealityTearFeature;\n          if (tear.data.isPortal && distance < feature.size / 2) {\n            const target = features.find(f =>\n              f.type === 'reality-tear' &&\n              f.id !== feature.id &&\n              (f as RealityTearFeature).data.isPortal\n            ) as RealityTearFeature | undefined;\n\n            if (target && onTeleport) {\n              onTeleport(target.position);\n              if (createParticles) {\n                createParticles(player.position, 30, '#c084fc', 0.8);\n                createParticles(target.position, 30, '#c084fc', 0.8);\n              }\n            }\n          } else if (!tear.data.isPortal && distance < feature.size * 1.5) {\n            speedMultiplier = Math.max(speedMultiplier, 1.35);\n          }\n          break;\n        }\n\n        case 'toxic-pool': {\n          const pool = feature as ToxicPoolFeature;\n          if (distance < pool.data.radius) {\n            isInToxic = true;\n            toxicSlow = Math.min(toxicSlow, pool.data.slowFactor);\n            player.health -= pool.data.damagePerSecond * deltaTime;\n            if (createParticles && Math.random() < 0.1) {\n              createParticles(player.position, 2, '#84cc16', 0.3);\n            }\n          }\n          break;\n        }\n\n        case 'lava-pillar': {\n          const pillar = feature as LavaPillarFeature;\n          if (pillar.data.isErupting && distance < pillar.data.width * 2) {\n            player.health -= 20 * deltaTime;\n            if (createParticles && Math.random() < 0.2) {\n              createParticles(player.position, 3, '#f97316', 0.4);\n            }\n          }\n          break;\n        }\n\n        case 'glacial-spire': {\n          const spire = feature as GlacialSpireFeature;\n          if (distance < spire.data.baseWidth * 1.5) {\n            speedMultiplier = Math.min(speedMultiplier, 0.75);\n          }\n          break;\n        }\n\n        case 'crystal-formation': {\n          const crystal = feature as CrystalFormationFeature;\n          if (distance < 100) {\n            if (!crystal.data.isResonating && crystal.data.resonanceTimer <= 0) {\n              crystal.data.isResonating = true;\n              crystal.data.resonanceTimer = 3;\n            }\n          }\n          break;\n        }\n\n        case 'coral-reef': {\n          const reef = feature as CoralReefFeature;\n          if (distance < reef.data.healingRadius) {\n            player.health = Math.min(player.maxHealth, player.health + reef.data.healingRate * deltaTime);\n          }\n\n          reef.data.waterPools.forEach(pool => {\n            const poolWorldX = feature.position.x + pool.offset.x;\n            const poolWorldY = feature.position.y + pool.offset.y;\n            const distToPool = Math.sqrt(\n              Math.pow(player.position.x - poolWorldX, 2) +\n              Math.pow(player.position.y - poolWorldY, 2)\n            );\n\n            if (distToPool < pool.radius) {\n              isInWater = true;\n\n              if (createParticles && Math.random() < 0.1) {\n                const angle = Math.random() * Math.PI * 2;\n                const offset = Math.random() * player.size;\n                createParticles(\n                  {\n                    x: player.position.x + Math.cos(angle) * offset,\n                    y: player.position.y + Math.sin(angle) * offset\n                  },\n                  1,\n                  '#5eead4',\n                  0.8\n                );\n              }\n            }\n          });\n          break;\n        }\n\n        case 'bloom-tree': {\n          const tree = feature as BloomTreeFeature;\n          if (distance < tree.data.energyRadius) {\n            speedMultiplier = Math.max(speedMultiplier, 1.2);\n            if (Math.random() < 0.05 && createParticles) {\n              createParticles(player.position, 1, '#fde047', 0.5);\n            }\n          }\n          break;\n        }\n\n        case 'gravity-anomaly': {\n          const anomaly = feature as GravityAnomalyFeature;\n          if (distance < anomaly.data.radius * 2) {\n            const pullDir = vectorNormalize(vectorSubtract(feature.position, player.position));\n            const pullForce = anomaly.data.pullStrength * (1 - distance / (anomaly.data.radius * 2));\n            player.position = vectorAdd(player.position, vectorScale(pullDir, pullForce * deltaTime * 60));\n\n            if (distance < anomaly.data.radius * 0.5) {\n              player.health -= anomaly.data.crushDamage * deltaTime;\n              if (createParticles && Math.random() < 0.15) {\n                createParticles(player.position, 2, '#6366f1', 0.4);\n              }\n            }\n          }\n          break;\n        }\n\n        case 'void-gap': {\n          const gap = feature as VoidGapFeature;\n          if (distance < Math.max(gap.data.width, gap.data.height) / 2) {\n            const pullDir = vectorNormalize(vectorSubtract(feature.position, player.position));\n            player.position = vectorAdd(player.position, vectorScale(pullDir, gap.data.voidPullStrength * deltaTime * 60));\n            player.health -= gap.data.voidDamage * deltaTime;\n            if (createParticles && Math.random() < 0.1) {\n              createParticles(player.position, 2, '#6d28d9', 0.3);\n            }\n          }\n          break;\n        }\n      }\n    });\n\n    if (isInToxic) {\n      speedMultiplier = Math.min(speedMultiplier, toxicSlow);\n    }\n\n    if (isInWater) {\n      speedMultiplier = Math.min(speedMultiplier, 0.7);\n    }\n\n    return { speedMultiplier };\n  }\n\n  applyProjectileEffects(\n    projectiles: Projectile[],\n    features: AnyBiomeFeature[]\n  ): void {\n    projectiles.forEach(projectile => {\n      if (projectile.owner !== 'player') return;\n\n      features.forEach(feature => {\n        if (feature.type === 'crystal-formation') {\n          const crystal = feature as CrystalFormationFeature;\n          const distance = vectorDistance(projectile.position, feature.position);\n\n          if (crystal.data.isResonating && distance < 100) {\n            projectile.damage *= crystal.data.damageAmplification;\n          }\n        }\n      });\n    });\n  }\n\n  applyEnemyEffects(\n    enemies: Enemy[],\n    features: AnyBiomeFeature[],\n    deltaTime: number,\n    createParticles?: (position: { x: number; y: number }, count: number, color: string, lifetime: number) => void\n  ): void {\n    enemies.forEach(enemy => {\n      features.forEach(feature => {\n        const distance = vectorDistance(enemy.position, feature.position);\n\n        switch (feature.type) {\n          case 'lava-pillar': {\n            const pillar = feature as LavaPillarFeature;\n            if (pillar.data.isErupting && distance < pillar.data.width * 2.5) {\n              enemy.health -= 15 * deltaTime;\n              if (createParticles && Math.random() < 0.1) {\n                createParticles(enemy.position, 2, '#f97316', 0.3);\n              }\n            }\n            break;\n          }\n\n          case 'gravity-anomaly': {\n            const anomaly = feature as GravityAnomalyFeature;\n            if (distance < anomaly.data.radius * 2) {\n              const pullDir = vectorNormalize(vectorSubtract(feature.position, enemy.position));\n              const pullForce = anomaly.data.pullStrength * 0.7;\n              enemy.position = vectorAdd(enemy.position, vectorScale(pullDir, pullForce * deltaTime * 60));\n\n              if (distance < anomaly.data.radius * 0.5) {\n                enemy.health -= anomaly.data.crushDamage * deltaTime;\n              }\n            }\n            break;\n          }\n\n          case 'void-gap': {\n            const gap = feature as VoidGapFeature;\n            if (distance < Math.max(gap.data.width, gap.data.height) / 2) {\n              const pullDir = vectorNormalize(vectorSubtract(feature.position, enemy.position));\n              enemy.position = vectorAdd(enemy.position, vectorScale(pullDir, gap.data.voidPullStrength * 0.6 * deltaTime * 60));\n              enemy.health -= gap.data.voidDamage * 0.7 * deltaTime;\n            }\n            break;\n          }\n        }\n      });\n    });\n  }\n\n  getLavaParticles(feature: LavaPillarFeature): Array<{ offset: { x: number; y: number }; velocity: { x: number; y: number }; lifetime: number }> {\n    return feature.data.lavaParticles;\n  }\n\n  collectGravitonResources(\n    player: Player,\n    features: AnyBiomeFeature[],\n    onCollect: (amount: number) => void,\n    createParticles?: (position: { x: number; y: number }, count: number, color: string, lifetime: number) => void\n  ): void {\n    features.forEach(feature => {\n      if (feature.type === 'gravity-anomaly') {\n        const anomaly = feature as GravityAnomalyFeature;\n        anomaly.data.gravitonResources = anomaly.data.gravitonResources.filter(resource => {\n          const currentAngle = resource.angle + this.time * resource.orbitSpeed;\n          const resourceWorldX = feature.position.x + Math.cos(currentAngle) * resource.distance;\n          const resourceWorldY = feature.position.y + Math.sin(currentAngle) * resource.distance;\n\n          const distToPlayer = Math.sqrt(\n            Math.pow(player.position.x - resourceWorldX, 2) +\n            Math.pow(player.position.y - resourceWorldY, 2)\n          );\n\n          if (distToPlayer < resource.size + player.size) {\n            onCollect(Math.floor(5 + Math.random() * 10));\n            if (createParticles) {\n              createParticles({ x: resourceWorldX, y: resourceWorldY }, 20, '#9333ea', 0.6);\n            }\n            return false;\n          }\n          return true;\n        });\n      }\n    });\n  }\n}\n","size_bytes":14174},"src/game/WaveSystem.ts":{"content":"import { Enemy } from '../types/game';\nimport { createVector, generateId, randomRange } from './utils';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from './constants';\n\nexport interface WaveConfig {\n  wave: number;\n  enemyCount: number;\n  enemyTypes: Array<{\n    type: Enemy['type'];\n    weight: number;\n  }>;\n  hasBoss: boolean;\n  spawnRate: number;\n}\n\nexport interface EnemyConfig {\n  health: number;\n  speed: number;\n  damage: number;\n  size: number;\n  currency: number;\n  color: string;\n}\ntype EnemyType = keyof typeof BASE_ENEMY_CONFIGS;\nexport const BASE_ENEMY_CONFIGS: Record<Enemy['type'], EnemyConfig> = {\n  grunt: {\n    health: 30,\n    speed: 2,\n    damage: 10,\n    size: 18,\n    currency: 5,\n    color: '#ef4444',\n  },\n  speedy: {\n    health: 15,\n    speed: 4.5,\n    damage: 8,\n    size: 14,\n    currency: 8,\n    color: '#22c55e',\n  },\n  tank: {\n    health: 80,\n    speed: 1,\n    damage: 20,\n    size: 28,\n    currency: 15,\n    color: '#3b82f6',\n  },\n  sniper: {\n    health: 25,\n    speed: 1.5,\n    damage: 15,\n    size: 16,\n    currency: 12,\n    color: '#a855f7',\n  },\n  artillery: {\n    health: 40,\n    speed: 0.8,\n    damage: 25,\n    size: 22,\n    currency: 18,\n    color: '#f97316',\n  },\n  burst: {\n    health: 20,\n    speed: 3,\n    damage: 12,\n    size: 16,\n    currency: 10,\n    color: '#06b6d4',\n  },\n  dasher: {\n    health: 35,\n    speed: 2.5,\n    damage: 15,\n    size: 16,\n    currency: 14,\n    color: '#facc15',\n  },\n  weaver: {\n    health: 22,\n    speed: 2,\n    damage: 10,\n    size: 15,\n    currency: 11,\n    color: '#ec4899',\n  },\n  laser: {\n    health: 30,\n    speed: 1.8,\n    damage: 18,\n    size: 18,\n    currency: 16,\n    color: '#8b5cf6',\n  },\n  boss: {\n    health: 500,\n    speed: 1.2,\n    damage: 30,\n    size: 50,\n    currency: 100,\n    color: '#dc2626',\n  },\n  orbiter: {\n    health: 55,\n    speed: 1.5,\n    damage: 14,\n    size: 20,\n    currency: 22,\n    color: '#06b6d4',\n  },\n  fragmenter: {\n    health: 45,\n    speed: 1.8,\n    damage: 16,\n    size: 22,\n    currency: 24,\n    color: '#f97316',\n  },\n  pulsar: {\n    health: 60,\n    speed: 1.2,\n    damage: 18,\n    size: 24,\n    currency: 26,\n    color: '#a855f7',\n  },\n  spiraler: {\n    health: 40,\n    speed: 2.2,\n    damage: 15,\n    size: 18,\n    currency: 23,\n    color: '#ec4899',\n  },\n  replicator: {\n    health: 50,\n    speed: 1.6,\n    damage: 12,\n    size: 19,\n    currency: 28,\n    color: '#10b981',\n  },\n  vortex: {\n    health: 70,\n    speed: 1.0,\n    damage: 20,\n    size: 26,\n    currency: 30,\n    color: '#8b5cf6',\n  },\n};\n\nfunction getScaledStats(type: EnemyType, wave: number): EnemyConfig {\n  const stats = BASE_ENEMY_CONFIGS[type];\n\n  // Wave 0 should usually use base stats, or wave 1 if no wave 0 exists.\n  // We use max(1, wave) to prevent multiplying by zero if the wave starts at 0.\n  const w = Math.max(1, wave);\n\n  // Fast Scaling for Health: Base * (1 + 15% per wave) + 5 flat health per wave\n  const scaledHealth = Math.floor(stats.health * (1 + 0.15 * w) + w * 5);\n\n  // Fast Scaling for Damage: Base * (1 + 10% per wave) + 2 flat damage per wave\n  const scaledDamage = Math.floor(stats.damage * (1 + 0.1 * w) + w * 2);\n  return {\n    ...stats,\n    health: scaledHealth,\n    damage: scaledDamage,\n  };\n}\n\nexport class WaveSystem {\n  private currentWave: number = 1;\n  private enemiesSpawned: number = 0;\n  private enemiesInWave: number = 0;\n  private spawnTimer: number = 0;\n  private waveComplete: boolean = false;\n  private modifierChance: number = 0.15;\n  private recentDeathPositions: Array<{ x: number; y: number; timestamp: number }> = [];\n  private readonly DEATH_EXCLUSION_RADIUS = 100;\n  private readonly DEATH_EXCLUSION_TIME = 3000;\n\n  getWaveConfig(wave: number): WaveConfig {\n    var hasBoss = wave % 5 === 0;\n    const baseCount = 2 + Math.floor(wave * 0.6);\n\n    let enemyTypes: Array<{ type: Enemy['type']; weight: number }>;\n    if (wave == 0) {\n      hasBoss = true;\n    }\n    if (wave <= 2) {\n      enemyTypes = [\n        { type: 'grunt', weight: 70 },\n        { type: 'speedy', weight: 30 },\n      ];\n    } else if (wave <= 5) {\n      enemyTypes = [\n        { type: 'grunt', weight: 50 },\n        { type: 'speedy', weight: 30 },\n        { type: 'sniper', weight: 20 },\n      ];\n    } else if (wave <= 10) {\n      enemyTypes = [\n        { type: 'grunt', weight: 35 },\n        { type: 'speedy', weight: 25 },\n        { type: 'tank', weight: 15 },\n        { type: 'sniper', weight: 15 },\n        { type: 'burst', weight: 10 },\n      ];\n    } else if (wave <= 20) {\n      enemyTypes = [\n        { type: 'grunt', weight: 20 },\n        { type: 'speedy', weight: 15 },\n        { type: 'tank', weight: 12 },\n        { type: 'sniper', weight: 12 },\n        { type: 'burst', weight: 12 },\n        { type: 'artillery', weight: 10 },\n        { type: 'dasher', weight: 10 },\n        { type: 'weaver', weight: 1 },\n        { type: 'laser', weight: 3 },\n      ];\n    } else {\n      enemyTypes = [\n        { type: 'grunt', weight: 10 },\n        { type: 'speedy', weight: 8 },\n        { type: 'tank', weight: 8 },\n        { type: 'sniper', weight: 8 },\n        { type: 'burst', weight: 8 },\n        { type: 'artillery', weight: 7 },\n        { type: 'dasher', weight: 7 },\n        { type: 'weaver', weight: 1 },\n        { type: 'laser', weight: 5 },\n        { type: 'orbiter', weight: 10 },\n        { type: 'fragmenter', weight: 9 },\n        { type: 'pulsar', weight: 8 },\n        { type: 'spiraler', weight: 8 },\n        { type: 'replicator', weight: 6 },\n        { type: 'vortex', weight: 7 },\n      ];\n    }\n\n    const spawnRate = Math.max(1.0, 3.0 - wave * 0.05);\n\n    return {\n      wave,\n      enemyCount: baseCount,\n      enemyTypes,\n      hasBoss,\n      spawnRate,\n    };\n  }\n\n  startWave(wave: number): void {\n    this.currentWave = wave;\n    const config = this.getWaveConfig(wave);\n    this.enemiesInWave = config.enemyCount;\n    this.enemiesSpawned = 0;\n    this.spawnTimer = 0;\n    this.waveComplete = false;\n  }\n\n  shouldSpawnEnemy(deltaTime: number): boolean {\n    var config = this.getWaveConfig(this.currentWave);\n    this.spawnTimer += deltaTime;\n\n    if (this.enemiesSpawned >= this.enemiesInWave) {\n      return false;\n    }\n\n    if (this.spawnTimer >= config.spawnRate) {\n      this.spawnTimer = 0;\n      this.enemiesSpawned++;\n      return true;\n    }\n\n    return false;\n  }\n\n  allEnemiesDestroyed(enemiesAlive: number): void {\n    if (this.enemiesSpawned == this.enemiesInWave && enemiesAlive === 0) {\n      console.log('compelete');\n      this.markWaveComplete();\n    }\n  }\n\n  shouldSpawnBoss(enemiesAlive: number): boolean {\n    const config = this.getWaveConfig(this.currentWave);\n    return (\n      config.hasBoss &&\n      enemiesAlive === 0 &&\n      this.enemiesSpawned >= this.enemiesInWave &&\n      !this.waveComplete\n    );\n  }\n\n  markWaveComplete(): void {\n    this.waveComplete = true;\n  }\n\n  recordEnemyDeath(position: { x: number; y: number }): void {\n    const now = Date.now();\n    this.recentDeathPositions = this.recentDeathPositions.filter(\n      death => now - death.timestamp < this.DEATH_EXCLUSION_TIME\n    );\n    this.recentDeathPositions.push({ ...position, timestamp: now });\n  }\n\n  private isPositionNearRecentDeath(x: number, y: number): boolean {\n    const now = Date.now();\n    return this.recentDeathPositions.some(death => {\n      if (now - death.timestamp > this.DEATH_EXCLUSION_TIME) return false;\n      const dist = Math.sqrt(Math.pow(x - death.x, 2) + Math.pow(y - death.y, 2));\n      return dist < this.DEATH_EXCLUSION_RADIUS;\n    });\n  }\n\n  createEnemy(type?: Enemy['type'], playerPosition?: { x: number; y: number }): Enemy {\n    const config = this.getWaveConfig(this.currentWave);\n\n    let enemyType: Enemy['type'];\n    if (type) {\n      enemyType = type;\n    } else {\n      const totalWeight = config.enemyTypes.reduce(\n        (sum, t) => sum + t.weight,\n        0\n      );\n      let random = Math.random() * totalWeight;\n\n      enemyType = 'grunt';\n      for (const typeConfig of config.enemyTypes) {\n        random -= typeConfig.weight;\n        if (random <= 0) {\n          enemyType = typeConfig.type;\n          break;\n        }\n      }\n    }\n\n    const scaledStats = getScaledStats(enemyType, this.currentWave);\n\n    let x = 0, y = 0;\n    let attempts = 0;\n    const maxAttempts = 10;\n\n    do {\n      const side = Math.floor(Math.random() * 4);\n\n      if (playerPosition) {\n        switch (side) {\n          case 0:\n            x = playerPosition.x + randomRange(-CANVAS_WIDTH / 2, CANVAS_WIDTH / 2);\n            y = playerPosition.y - CANVAS_HEIGHT / 2 - 30;\n            break;\n          case 1:\n            x = playerPosition.x + CANVAS_WIDTH / 2 + 30;\n            y = playerPosition.y + randomRange(-CANVAS_HEIGHT / 2, CANVAS_HEIGHT / 2);\n            break;\n          case 2:\n            x = playerPosition.x + randomRange(-CANVAS_WIDTH / 2, CANVAS_WIDTH / 2);\n            y = playerPosition.y + CANVAS_HEIGHT / 2 + 30;\n            break;\n          case 3:\n            x = playerPosition.x - CANVAS_WIDTH / 2 - 30;\n            y = playerPosition.y + randomRange(-CANVAS_HEIGHT / 2, CANVAS_HEIGHT / 2);\n            break;\n        }\n      } else {\n        switch (side) {\n          case 0:\n            x = randomRange(0, CANVAS_WIDTH);\n            y = -30;\n            break;\n          case 1:\n            x = CANVAS_WIDTH + 30;\n            y = randomRange(0, CANVAS_HEIGHT);\n            break;\n          case 2:\n            x = randomRange(0, CANVAS_WIDTH);\n            y = CANVAS_HEIGHT + 30;\n            break;\n          case 3:\n            x = -30;\n            y = randomRange(0, CANVAS_HEIGHT);\n            break;\n        }\n      }\n      attempts++;\n    } while (this.isPositionNearRecentDeath(x, y) && attempts < maxAttempts);\n\n    const enemy: Enemy = {\n      id: generateId(),\n      position: createVector(x, y),\n      velocity: createVector(), // createVector() defaults to (0, 0)\n      rotation: 0,\n\n      // Core Stats (Scaled)\n      health: scaledStats.health,\n      maxHealth: scaledStats.health, // Max health is equal to current health on spawn\n      damage: scaledStats.damage,\n\n      // Inherited Stats\n      size: scaledStats.size,\n      speed: scaledStats.speed,\n      color: scaledStats.color,\n      type: enemyType,\n\n      // Custom Game Properties\n      attackCooldown: enemyType === 'boss' ? 0.5 : 1, // Example boss check\n      currencyDrop: Math.floor(\n        scaledStats.currency * (1 + this.currentWave * 0.05) // Currency gets a slight wave-based multiplier\n      ),\n    };\n\n    if (Math.random() < this.modifierChance && enemyType !== 'boss') {\n      enemy.modifiers = [];\n    }\n\n    return enemy;\n  }\n\n  getCurrentWave(): number {\n    return this.currentWave;\n  }\n\n  isWaveComplete(): boolean {\n    return this.waveComplete;\n  }\n\n  reset(): void {\n    this.currentWave = 1;\n    this.enemiesSpawned = 0;\n    this.enemiesInWave = 0;\n    this.spawnTimer = 0;\n    this.waveComplete = false;\n  }\n}\n","size_bytes":10899},"src/components/GameOverScreen.tsx":{"content":"import { useState } from 'react';\nimport { Trophy, RotateCcw, TrendingUp } from 'lucide-react';\nimport { GameState } from '../types/game';\n\ninterface GameOverScreenProps {\n  gameState: GameState;\n  onRestart: () => void;\n}\n\nexport default function GameOverScreen({\n  gameState,\n  onRestart,\n}: GameOverScreenProps) {\n  const [playerName, setPlayerName] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = () => {\n    if (playerName.trim()) {\n      setSubmitted(true);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-md flex items-center justify-center z-50 animate-in fade-in duration-300\">\n      <div className=\"bg-gradient-to-br from-slate-900 via-red-900/20 to-slate-900 border-2 border-red-500/30 rounded-xl shadow-2xl p-8 max-w-md w-full\">\n        <div className=\"text-center mb-6\">\n          <h2 className=\"text-4xl font-bold text-red-400 mb-2 animate-pulse\">\n            SYSTEM FAILURE\n          </h2>\n          <p className=\"text-slate-400\">Your robot has been destroyed</p>\n        </div>\n\n        <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-6 mb-6 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-slate-400\">Final Score</span>\n            <span className=\"text-3xl font-bold text-cyan-300\">\n              {gameState.score}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-slate-400\">Wave Reached</span>\n            <span className=\"text-2xl font-bold text-purple-300\">\n              {gameState.wave}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-slate-400\">Enemies Defeated</span>\n            <span className=\"text-xl font-bold text-red-300\">\n              {Math.floor(gameState.score / 10)}\n            </span>\n          </div>\n        </div>\n\n        {!submitted ? (\n          <div className=\"mb-6\">\n            <label className=\"block text-sm text-slate-400 mb-2\">\n              Submit to Leaderboard\n            </label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={playerName}\n                onChange={(e) => setPlayerName(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}\n                placeholder=\"Enter your name...\"\n                maxLength={20}\n                className=\"flex-1 bg-slate-800 border border-slate-600 rounded-lg px-4 py-2 text-white placeholder-slate-500 focus:outline-none focus:border-cyan-500\"\n              />\n              <button\n                onClick={handleSubmit}\n                disabled={!playerName.trim()}\n                className=\"bg-green-500 hover:bg-green-400 disabled:bg-slate-700 disabled:text-slate-500 text-white px-6 py-2 rounded-lg font-bold transition-colors flex items-center gap-2\"\n              >\n                <Trophy className=\"w-4 h-4\" />\n                Submit\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-6 bg-green-900/20 border border-green-500/30 rounded-lg p-4 text-center\">\n            <TrendingUp className=\"w-6 h-6 text-green-400 mx-auto mb-2\" />\n            <p className=\"text-green-400 font-bold\">\n              Score submitted successfully!\n            </p>\n          </div>\n        )}\n\n        <button\n          onClick={onRestart}\n          className=\"w-full bg-cyan-500 hover:bg-cyan-400 text-slate-900 font-bold py-3 rounded-lg transition-colors flex items-center justify-center gap-2\"\n        >\n          <RotateCcw className=\"w-5 h-5\" />\n          RESTART MISSION\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3800},"src/game/MinibossLootSystem.ts":{"content":"import { Enemy, MinibossSubtype, Vector2 } from '../types/game';\nimport { MINIBOSS_DEFINITIONS } from './MinibossSystem';\nimport { randomRange } from './utils';\nimport type { ResourceType } from './WorldGeneration';\n\nexport interface LootDrop {\n  position: Vector2;\n  currency: number;\n  resources: Array<{ type: ResourceType; amount: number }>;\n  weaponDrop: boolean;\n}\n\nexport class MinibossLootSystem {\n  generateLoot(miniboss: Enemy): LootDrop | null {\n    if (!miniboss.minibossSubtype) return null;\n\n    const definition = MINIBOSS_DEFINITIONS[miniboss.minibossSubtype];\n    if (!definition) return null;\n\n    const lootTable = definition.lootTable;\n\n    const currency = Math.floor(\n      randomRange(lootTable.currencyMin, lootTable.currencyMax)\n    );\n\n    const resources: Array<{ type: ResourceType; amount: number }> = [];\n\n    resources.push({\n      type: 'singularityCore',\n      amount: lootTable.guaranteedSingularityCores\n    });\n\n    const uniqueAmount = Math.floor(\n      randomRange(lootTable.uniqueResource.minAmount, lootTable.uniqueResource.maxAmount)\n    );\n    resources.push({\n      type: lootTable.uniqueResource.type,\n      amount: uniqueAmount\n    });\n\n    for (const additionalResource of lootTable.additionalResources) {\n      if (Math.random() < additionalResource.chance) {\n        const amount = Math.floor(\n          randomRange(additionalResource.minAmount, additionalResource.maxAmount)\n        );\n        resources.push({\n          type: additionalResource.type,\n          amount\n        });\n      }\n    }\n\n    const weaponDrop = Math.random() < lootTable.weaponDropChance;\n\n    return {\n      position: { ...miniboss.position },\n      currency,\n      resources,\n      weaponDrop\n    };\n  }\n\n  spawnLootDrops(\n    loot: LootDrop,\n    spawnCurrency: (pos: Vector2, amount: number) => void,\n    spawnResource: (pos: Vector2, type: ResourceType, amount: number) => void,\n    spawnWeapon: (pos: Vector2) => void\n  ): void {\n    spawnCurrency(loot.position, loot.currency);\n\n    loot.resources.forEach((resource, index) => {\n      const angle = (Math.PI * 2 / loot.resources.length) * index;\n      const distance = 40 + Math.random() * 20;\n      const pos = {\n        x: loot.position.x + Math.cos(angle) * distance,\n        y: loot.position.y + Math.sin(angle) * distance\n      };\n      spawnResource(pos, resource.type, resource.amount);\n    });\n\n    if (loot.weaponDrop) {\n      const angle = Math.random() * Math.PI * 2;\n      const distance = 60;\n      const pos = {\n        x: loot.position.x + Math.cos(angle) * distance,\n        y: loot.position.y + Math.sin(angle) * distance\n      };\n      spawnWeapon(pos);\n    }\n  }\n\n  getMinibossDisplayName(subtype: MinibossSubtype): string {\n    const definition = MINIBOSS_DEFINITIONS[subtype];\n    return definition ? definition.name : 'Unknown Miniboss';\n  }\n\n  getMinibossDescription(subtype: MinibossSubtype): string {\n    const definition = MINIBOSS_DEFINITIONS[subtype];\n    return definition ? definition.description : '';\n  }\n}\n","size_bytes":3018},"src/game/MinibossSpawnManager.ts":{"content":"import { Enemy, MinibossSubtype, Vector2 } from '../types/game';\nimport { MinibossSystem, MINIBOSS_DEFINITIONS } from './MinibossSystem';\nimport type { AnyBiomeFeature } from './BiomeFeatures';\nimport { vectorDistance } from './utils';\n\ninterface MinibossSpawnState {\n  subtype: MinibossSubtype;\n  featureId: string;\n  lastSpawnTime: number;\n  spawnCount: number;\n}\n\nexport class MinibossSpawnManager {\n  private minibossSystem: MinibossSystem;\n  private spawnStates: Map<string, MinibossSpawnState> = new Map();\n  private readonly MIN_SPAWN_COOLDOWN = 60;\n  private readonly MIN_PLAYER_LEVEL = 3;\n  private currentBiomeId: string = '';\n\n  constructor(minibossSystem: MinibossSystem) {\n    this.minibossSystem = minibossSystem;\n  }\n\n  updateCurrentBiome(biomeId: string): void {\n    this.currentBiomeId = biomeId;\n  }\n\n  checkAndSpawnMiniboss(\n    playerPosition: Vector2,\n    biomeFeatures: AnyBiomeFeature[],\n    currentWave: number,\n    createMiniboss: (subtype: MinibossSubtype, position: Vector2) => Enemy\n  ): Enemy | null {\n    if (currentWave < this.MIN_PLAYER_LEVEL) {\n      return null;\n    }\n\n    this.minibossSystem.updateCooldowns(1/60);\n\n    const eligibleFeatures = this.findEligibleFeatures(\n      playerPosition,\n      biomeFeatures,\n      currentWave\n    );\n\n    if (eligibleFeatures.length === 0) {\n      return null;\n    }\n\n    const selectedFeature = eligibleFeatures[Math.floor(Math.random() * eligibleFeatures.length)];\n    const minibossSubtype = this.getMinibossForBiome(this.currentBiomeId, selectedFeature.type);\n\n    if (!minibossSubtype || !this.minibossSystem.canSpawn(minibossSubtype)) {\n      return null;\n    }\n\n    const spawnKey = `${minibossSubtype}-${selectedFeature.id}`;\n    const spawnState = this.spawnStates.get(spawnKey);\n    const now = Date.now();\n\n    if (spawnState && (now - spawnState.lastSpawnTime) / 1000 < this.MIN_SPAWN_COOLDOWN) {\n      return null;\n    }\n\n    const spawnChance = this.calculateSpawnChance(currentWave, spawnState?.spawnCount || 0);\n    if (Math.random() > spawnChance) {\n      return null;\n    }\n\n    const spawnPosition = this.getSpawnPosition(selectedFeature, playerPosition);\n    const miniboss = createMiniboss(minibossSubtype, spawnPosition);\n\n    this.spawnStates.set(spawnKey, {\n      subtype: minibossSubtype,\n      featureId: selectedFeature.id,\n      lastSpawnTime: now,\n      spawnCount: (spawnState?.spawnCount || 0) + 1\n    });\n\n    this.minibossSystem.setSpawnCooldown(minibossSubtype, this.MIN_SPAWN_COOLDOWN);\n\n    return miniboss;\n  }\n\n  private findEligibleFeatures(\n    playerPosition: Vector2,\n    biomeFeatures: AnyBiomeFeature[],\n    currentWave: number\n  ): AnyBiomeFeature[] {\n    const eligible: AnyBiomeFeature[] = [];\n\n    for (const feature of biomeFeatures) {\n      const minibossSubtype = this.getMinibossForBiome(this.currentBiomeId, feature.type);\n      if (!minibossSubtype) continue;\n\n      const definition = MINIBOSS_DEFINITIONS[minibossSubtype];\n      if (!definition) continue;\n\n      if (definition.requiredFeatureType && definition.requiredFeatureType !== feature.type) {\n        continue;\n      }\n\n      const distance = vectorDistance(playerPosition, feature.position);\n      const detectionRange = 400;\n\n      if (distance < detectionRange) {\n        const spawnConditionMet = definition.spawnCondition\n          ? definition.spawnCondition(feature.data, playerPosition)\n          : distance < 300;\n\n        if (spawnConditionMet) {\n          eligible.push(feature);\n        }\n      }\n    }\n\n    return eligible;\n  }\n\n  private getMinibossForBiome(biomeId: string, featureType: string): MinibossSubtype | null {\n    const mapping: Record<string, Record<string, MinibossSubtype>> = {\n      'coral-depths': {\n        'coral-reef': 'angulodon'\n      },\n      'frozen-tundra': {\n        'glacial-spire': 'cryostag_vanguard'\n      },\n      'volcanic-wastes': {\n        'lava-pillar': 'pyroclast_behemoth'\n      },\n      'toxic-swamp': {\n        'toxic-pool': 'mirelurker_matron'\n      },\n      'crystal-caverns': {\n        'crystal-formation': 'prism_guardian'\n      },\n      'void-nebula': {\n        'void-gap': 'null_siren'\n      },\n      'radiant-gardens': {\n        'bloom-tree': 'solstice_warden'\n      },\n      'shattered-expanse': {\n        'reality-tear': 'rift_revenant'\n      }\n    };\n\n    return mapping[biomeId]?.[featureType] || null;\n  }\n\n  private calculateSpawnChance(currentWave: number, previousSpawns: number): number {\n    let baseChance = 0.08;\n    \n    baseChance += Math.min(currentWave / 50, 0.15);\n    \n    baseChance *= Math.pow(0.85, previousSpawns);\n\n    return Math.min(baseChance, 0.35);\n  }\n\n  private getSpawnPosition(feature: AnyBiomeFeature, playerPosition: Vector2): Vector2 {\n    const angle = Math.random() * Math.PI * 2;\n    const distance = 100 + Math.random() * 100;\n    \n    return {\n      x: feature.position.x + Math.cos(angle) * distance,\n      y: feature.position.y + Math.sin(angle) * distance\n    };\n  }\n\n  onMinibossDefeated(minibossId: string, subtype: MinibossSubtype): void {\n    this.minibossSystem.markDefeated(minibossId);\n    \n    for (const [key, state] of this.spawnStates.entries()) {\n      if (state.subtype === subtype) {\n        state.lastSpawnTime = Date.now();\n      }\n    }\n  }\n\n  reset(): void {\n    this.spawnStates.clear();\n  }\n\n  getSpawnState(subtype: MinibossSubtype): MinibossSpawnState | undefined {\n    for (const state of this.spawnStates.values()) {\n      if (state.subtype === subtype) {\n        return state;\n      }\n    }\n    return undefined;\n  }\n}\n","size_bytes":5538},"src/game/MinibossSystem.ts":{"content":"import { Enemy, MinibossSubtype, Vector2 } from '../types/game';\nimport { createVector, generateId } from './utils';\nimport type { ResourceType } from './WorldGeneration';\n\nexport interface MinibossAttack {\n  id: string;\n  name: string;\n  damage: number;\n  cooldown: number;\n  telegraphDuration: number;\n  description: string;\n  execute: (\n    miniboss: Enemy,\n    playerPos: Vector2,\n    dt: number,\n    context: MinibossAttackContext\n  ) => void;\n}\n\nexport interface MinibossAttackContext {\n  createProjectile: (proj: any) => void;\n  createParticles: (pos: Vector2, count: number, color: string, lifetime: number) => void;\n  damagePlayer: (damage: number) => void;\n  findNearestPlayer: (pos: Vector2) => Vector2;\n  getAllPlayers: () => Array<{ position: Vector2; id: string }>;\n}\n\nexport interface MinibossLootTable {\n  guaranteedSingularityCores: number;\n  uniqueResource: {\n    type: ResourceType;\n    minAmount: number;\n    maxAmount: number;\n  };\n  currencyMin: number;\n  currencyMax: number;\n  additionalResources: Array<{\n    type: ResourceType;\n    minAmount: number;\n    maxAmount: number;\n    chance: number;\n  }>;\n  weaponDropChance: number;\n}\n\nexport interface MinibossDefinition {\n  subtype: MinibossSubtype;\n  name: string;\n  description: string;\n  biomeId: string;\n  requiredFeatureType?: string;\n  health: number;\n  damage: number;\n  speed: number;\n  size: number;\n  color: string;\n  secondaryColor: string;\n  detectionRadius: number;\n  phases: string[];\n  attacks: MinibossAttack[];\n  lootTable: MinibossLootTable;\n  spawnCondition?: (featureData: any, playerPosition: Vector2) => boolean;\n}\n\nexport const MINIBOSS_DEFINITIONS: Record<MinibossSubtype, MinibossDefinition> = {\n  angulodon: {\n    subtype: 'angulodon',\n    name: 'Angulodon',\n    description: 'A geometric shark lurking in coral reef waters',\n    biomeId: 'coral-depths',\n    requiredFeatureType: 'coral-reef',\n    health: 3500,\n    damage: 35,\n    speed: 3.5,\n    size: 45,\n    color: '#0891b2',\n    secondaryColor: '#06b6d4',\n    detectionRadius: 300,\n    phases: ['fin_patrol', 'engaged', 'enraged'],\n    attacks: [\n      {\n        id: 'dash_attack',\n        name: 'Hydroblitz Dash',\n        damage: 40,\n        cooldown: 4.0,\n        telegraphDuration: 0.8,\n        description: 'Charges forward with tremendous speed',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          if (!miniboss.isDashing) {\n            miniboss.isDashing = true;\n            miniboss.dashTimer = 0;\n            const dir = { \n              x: playerPos.x - miniboss.position.x, \n              y: playerPos.y - miniboss.position.y \n            };\n            const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n            miniboss.velocity = { x: (dir.x / len) * miniboss.speed * 5, y: (dir.y / len) * miniboss.speed * 5 };\n            ctx.createParticles(miniboss.position, 30, '#22d3ee', 0.5);\n          }\n        }\n      },\n      {\n        id: 'bite_grab',\n        name: 'Jaw Lock',\n        damage: 50,\n        cooldown: 8.0,\n        telegraphDuration: 1.2,\n        description: 'Lunges and grabs player in its jaws',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          \n          if (len < 80) {\n            if (!miniboss.jaws) {\n              miniboss.jaws = { isOpen: false, biteTimer: 0 };\n            }\n            miniboss.jaws.isOpen = true;\n            miniboss.jaws.biteTimer = 2.5;\n            miniboss.jaws.grabbedPlayerId = ctx.getAllPlayers()[0]?.id;\n            ctx.damagePlayer(50);\n            ctx.createParticles(miniboss.position, 25, '#dc2626', 0.6);\n          }\n        }\n      },\n      {\n        id: 'tail_splash',\n        name: 'Hydrosonic Wave',\n        damage: 25,\n        cooldown: 5.5,\n        telegraphDuration: 0.6,\n        description: 'Creates water projectiles with tail splash',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 8; i++) {\n            const angle = (Math.PI * 2 / 8) * i;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(angle) * 4, y: Math.sin(angle) * 4 },\n              damage: 25,\n              size: 12,\n              color: '#22d3ee',\n              owner: 'enemy' as const,\n              lifetime: 3,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 40, '#06b6d4', 0.7);\n        }\n      },\n      {\n        id: 'whirlpool',\n        name: 'Vortex Maelstrom',\n        damage: 15,\n        cooldown: 12.0,\n        telegraphDuration: 2.0,\n        description: 'Creates a pulling whirlpool',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.whirlpoolAngle = 0;\n          miniboss.pullRadius = 250;\n          ctx.createParticles(miniboss.position, 60, '#3b82f6', 1.5);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 3,\n      uniqueResource: {\n        type: 'bioluminescentPearl',\n        minAmount: 15,\n        maxAmount: 30\n      },\n      currencyMin: 250,\n      currencyMax: 500,\n      additionalResources: [\n        { type: 'energy', minAmount: 50, maxAmount: 100, chance: 1.0 },\n        { type: 'coreDust', minAmount: 20, maxAmount: 40, chance: 0.8 },\n        { type: 'flux', minAmount: 10, maxAmount: 25, chance: 0.6 }\n      ],\n      weaponDropChance: 0.4\n    },\n    spawnCondition: (featureData, playerPosition) => {\n      if (!featureData || !featureData.position) return false;\n      const dist = Math.sqrt(\n        Math.pow(playerPosition.x - featureData.position.x, 2) +\n        Math.pow(playerPosition.y - featureData.position.y, 2)\n      );\n      return dist < (featureData.size || 200);\n    }\n  },\n\n  cryostag_vanguard: {\n    subtype: 'cryostag_vanguard',\n    name: 'Cryostag Vanguard',\n    description: 'An icy sentinel with crystalline antlers guarding frozen lands',\n    biomeId: 'frozen-tundra',\n    requiredFeatureType: 'glacial-spire',\n    health: 4000,\n    damage: 38,\n    speed: 2.8,\n    size: 50,\n    color: '#60a5fa',\n    secondaryColor: '#93c5fd',\n    detectionRadius: 350,\n    phases: ['dormant', 'active', 'frostrage'],\n    attacks: [\n      {\n        id: 'ice_lance',\n        name: 'Glacial Spear',\n        damage: 45,\n        cooldown: 3.5,\n        telegraphDuration: 0.7,\n        description: 'Fires sharp ice projectiles from antlers',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          const angle = Math.atan2(dir.y, dir.x);\n          \n          for (let i = -1; i <= 1; i++) {\n            const spreadAngle = angle + (i * 0.3);\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(spreadAngle) * 6, y: Math.sin(spreadAngle) * 6 },\n              damage: 45,\n              size: 14,\n              color: '#7dd3fc',\n              owner: 'enemy' as const,\n              lifetime: 4,\n              piercing: true,\n              piercingCount: 2,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 20, '#60a5fa', 0.4);\n        }\n      },\n      {\n        id: 'blizzard_breath',\n        name: 'Frozen Gale',\n        damage: 20,\n        cooldown: 7.0,\n        telegraphDuration: 1.5,\n        description: 'Exhales a cone of freezing wind',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const baseAngle = Math.atan2(dir.y, dir.x);\n          \n          for (let i = 0; i < 12; i++) {\n            const spreadAngle = baseAngle + (Math.random() - 0.5) * Math.PI / 3;\n            const speed = 3 + Math.random() * 2;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(spreadAngle) * speed, y: Math.sin(spreadAngle) * speed },\n              damage: 20,\n              size: 8,\n              color: '#bae6fd',\n              owner: 'enemy' as const,\n              lifetime: 2,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 50, '#93c5fd', 0.8);\n        }\n      },\n      {\n        id: 'frost_prison',\n        name: 'Crystalline Cage',\n        damage: 30,\n        cooldown: 10.0,\n        telegraphDuration: 1.8,\n        description: 'Creates ice crystals that trap the player',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const angles = [0, Math.PI / 2, Math.PI, Math.PI * 1.5];\n          angles.forEach(angle => {\n            const distance = 120;\n            const pos = {\n              x: playerPos.x + Math.cos(angle) * distance,\n              y: playerPos.y + Math.sin(angle) * distance\n            };\n            ctx.createParticles(pos, 15, '#60a5fa', 1.0);\n          });\n        }\n      },\n      {\n        id: 'charge_trample',\n        name: 'Avalanche Rush',\n        damage: 55,\n        cooldown: 8.5,\n        telegraphDuration: 1.0,\n        description: 'Charges in a straight line, trampling everything',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.isDashing = true;\n          miniboss.dashTimer = 0;\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          miniboss.velocity = { x: (dir.x / len) * miniboss.speed * 6, y: (dir.y / len) * miniboss.speed * 6 };\n          ctx.createParticles(miniboss.position, 35, '#dbeafe', 0.6);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 3,\n      uniqueResource: {\n        type: 'cryoKelp',\n        minAmount: 20,\n        maxAmount: 35\n      },\n      currencyMin: 300,\n      currencyMax: 550,\n      additionalResources: [\n        { type: 'alloyFragments', minAmount: 25, maxAmount: 45, chance: 1.0 },\n        { type: 'energy', minAmount: 40, maxAmount: 80, chance: 0.9 }\n      ],\n      weaponDropChance: 0.45\n    }\n  },\n\n  pyroclast_behemoth: {\n    subtype: 'pyroclast_behemoth',\n    name: 'Pyroclast Behemoth',\n    description: 'A molten colossus of living magma and stone',\n    biomeId: 'volcanic-wastes',\n    requiredFeatureType: 'lava-pillar',\n    health: 4500,\n    damage: 42,\n    speed: 2.2,\n    size: 55,\n    color: '#f97316',\n    secondaryColor: '#fb923c',\n    detectionRadius: 320,\n    phases: ['dormant', 'erupting', 'molten_core'],\n    attacks: [\n      {\n        id: 'magma_eruption',\n        name: 'Volcanic Burst',\n        damage: 50,\n        cooldown: 5.0,\n        telegraphDuration: 1.5,\n        description: 'Causes magma to erupt from the ground',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 5; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const distance = 50 + Math.random() * 150;\n            const pos = {\n              x: playerPos.x + Math.cos(angle) * distance,\n              y: playerPos.y + Math.sin(angle) * distance\n            };\n            ctx.createParticles(pos, 25, '#f97316', 0.8);\n            \n            setTimeout(() => {\n              for (let j = 0; j < 6; j++) {\n                const eruptAngle = (Math.PI * 2 / 6) * j;\n                ctx.createProjectile({\n                  id: generateId(),\n                  position: pos,\n                  velocity: { x: Math.cos(eruptAngle) * 3.5, y: Math.sin(eruptAngle) * 3.5 },\n                  damage: 35,\n                  size: 10,\n                  color: '#fb923c',\n                  owner: 'enemy' as const,\n                  lifetime: 2.5,\n                  piercing: false,\n                  piercingCount: 0,\n                  rotation: 0\n                });\n              }\n            }, 1000);\n          }\n        }\n      },\n      {\n        id: 'lava_wave',\n        name: 'Pyroclastic Tide',\n        damage: 40,\n        cooldown: 6.5,\n        telegraphDuration: 1.0,\n        description: 'Sends waves of lava outward',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let wave = 0; wave < 3; wave++) {\n            setTimeout(() => {\n              for (let i = 0; i < 16; i++) {\n                const angle = (Math.PI * 2 / 16) * i;\n                const speed = 4 + wave * 0.5;\n                ctx.createProjectile({\n                  id: generateId(),\n                  position: { ...miniboss.position },\n                  velocity: { x: Math.cos(angle) * speed, y: Math.sin(angle) * speed },\n                  damage: 40,\n                  size: 11,\n                  color: '#f97316',\n                  owner: 'enemy' as const,\n                  lifetime: 3,\n                  piercing: false,\n                  piercingCount: 0,\n                  rotation: 0,\n                  explosive: true,\n                  explosionRadius: 40\n                });\n              }\n              ctx.createParticles(miniboss.position, 30, '#fb923c', 0.5);\n            }, wave * 500);\n          }\n        }\n      },\n      {\n        id: 'meteor_slam',\n        name: 'Cataclysm Drop',\n        damage: 70,\n        cooldown: 12.0,\n        telegraphDuration: 2.5,\n        description: 'Leaps and crashes down like a meteor',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.velocity = { x: 0, y: -15 };\n          ctx.createParticles(miniboss.position, 50, '#dc2626', 1.0);\n          \n          setTimeout(() => {\n            ctx.createParticles(miniboss.position, 80, '#f97316', 1.2);\n            for (let i = 0; i < 20; i++) {\n              const angle = (Math.PI * 2 / 20) * i;\n              ctx.createProjectile({\n                id: generateId(),\n                position: { ...miniboss.position },\n                velocity: { x: Math.cos(angle) * 5, y: Math.sin(angle) * 5 },\n                damage: 45,\n                size: 12,\n                color: '#fb923c',\n                owner: 'enemy' as const,\n                lifetime: 2,\n                piercing: false,\n                piercingCount: 0,\n                rotation: 0\n              });\n            }\n          }, 1500);\n        }\n      },\n      {\n        id: 'heat_shield',\n        name: 'Magma Barrier',\n        damage: 0,\n        cooldown: 15.0,\n        telegraphDuration: 0.5,\n        description: 'Activates a shield of molten rock',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.shieldActive = true;\n          miniboss.shieldHealth = 800;\n          ctx.createParticles(miniboss.position, 40, '#fdba74', 0.7);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 4,\n      uniqueResource: {\n        type: 'obsidianHeart',\n        minAmount: 18,\n        maxAmount: 32\n      },\n      currencyMin: 350,\n      currencyMax: 600,\n      additionalResources: [\n        { type: 'alloyFragments', minAmount: 30, maxAmount: 50, chance: 1.0 },\n        { type: 'energy', minAmount: 60, maxAmount: 100, chance: 0.85 }\n      ],\n      weaponDropChance: 0.5\n    }\n  },\n\n  mirelurker_matron: {\n    subtype: 'mirelurker_matron',\n    name: 'Mirelurker Matron',\n    description: 'Toxic mother of the swamp depths',\n    biomeId: 'toxic-swamp',\n    requiredFeatureType: 'toxic-pool',\n    health: 3800,\n    damage: 36,\n    speed: 2.6,\n    size: 48,\n    color: '#84cc16',\n    secondaryColor: '#a3e635',\n    detectionRadius: 300,\n    phases: ['lurking', 'aggressive', 'spawning'],\n    attacks: [\n      {\n        id: 'acid_spit',\n        name: 'Caustic Volley',\n        damage: 38,\n        cooldown: 4.0,\n        telegraphDuration: 0.6,\n        description: 'Spits globs of corrosive acid',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 5; i++) {\n            const dir = { \n              x: playerPos.x - miniboss.position.x, \n              y: playerPos.y - miniboss.position.y \n            };\n            const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n            const angle = Math.atan2(dir.y, dir.x) + (i - 2) * 0.2;\n            \n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(angle) * 5, y: Math.sin(angle) * 5 },\n              damage: 38,\n              size: 13,\n              color: '#a3e635',\n              owner: 'enemy' as const,\n              lifetime: 3.5,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 20, '#84cc16', 0.5);\n        }\n      },\n      {\n        id: 'spore_cloud',\n        name: 'Toxic Miasma',\n        damage: 25,\n        cooldown: 8.0,\n        telegraphDuration: 1.2,\n        description: 'Releases a cloud of poisonous spores',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 30; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const speed = 1 + Math.random() * 2;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(angle) * speed, y: Math.sin(angle) * speed },\n              damage: 15,\n              size: 6,\n              color: '#bef264',\n              owner: 'enemy' as const,\n              lifetime: 5,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 60, '#a3e635', 1.0);\n        }\n      },\n      {\n        id: 'minion_hatch',\n        name: 'Spawn Brood',\n        damage: 0,\n        cooldown: 15.0,\n        telegraphDuration: 2.0,\n        description: 'Hatches smaller toxic enemies',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          ctx.createParticles(miniboss.position, 40, '#4d7c0f', 0.8);\n        }\n      },\n      {\n        id: 'root_snare',\n        name: 'Ensnaring Vines',\n        damage: 30,\n        cooldown: 9.0,\n        telegraphDuration: 1.5,\n        description: 'Roots burst from ground to trap player',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const angles = [0, Math.PI / 3, (Math.PI * 2) / 3, Math.PI, (Math.PI * 4) / 3, (Math.PI * 5) / 3];\n          angles.forEach((angle, idx) => {\n            setTimeout(() => {\n              const pos = {\n                x: playerPos.x + Math.cos(angle) * 80,\n                y: playerPos.y + Math.sin(angle) * 80\n              };\n              ctx.createParticles(pos, 20, '#65a30d', 0.7);\n            }, idx * 150);\n          });\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 3,\n      uniqueResource: {\n        type: 'gloomRoot',\n        minAmount: 16,\n        maxAmount: 28\n      },\n      currencyMin: 280,\n      currencyMax: 520,\n      additionalResources: [\n        { type: 'coreDust', minAmount: 25, maxAmount: 40, chance: 1.0 },\n        { type: 'energy', minAmount: 45, maxAmount: 85, chance: 0.8 }\n      ],\n      weaponDropChance: 0.42\n    }\n  },\n\n  prism_guardian: {\n    subtype: 'prism_guardian',\n    name: 'Prism Guardian',\n    description: 'A crystalline sentinel that bends light itself',\n    biomeId: 'crystal-caverns',\n    requiredFeatureType: 'crystal-formation',\n    health: 3600,\n    damage: 40,\n    speed: 3.0,\n    size: 46,\n    color: '#06b6d4',\n    secondaryColor: '#22d3ee',\n    detectionRadius: 340,\n    phases: ['scanning', 'combat', 'refraction'],\n    attacks: [\n      {\n        id: 'beam_lattice',\n        name: 'Prismatic Matrix',\n        damage: 42,\n        cooldown: 5.5,\n        telegraphDuration: 1.0,\n        description: 'Creates a grid of laser beams',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 4; i++) {\n            const angle = (Math.PI / 2) * i;\n            for (let j = 0; j < 3; j++) {\n              setTimeout(() => {\n                ctx.createProjectile({\n                  id: generateId(),\n                  position: { ...miniboss.position },\n                  velocity: { x: Math.cos(angle) * 4.5, y: Math.sin(angle) * 4.5 },\n                  damage: 42,\n                  size: 10,\n                  color: '#22d3ee',\n                  owner: 'enemy' as const,\n                  lifetime: 4,\n                  piercing: true,\n                  piercingCount: 3,\n                  rotation: 0,\n                  isBeam: true,\n                  beamLength: 100\n                });\n              }, j * 300);\n            }\n          }\n          ctx.createParticles(miniboss.position, 35, '#06b6d4', 0.6);\n        }\n      },\n      {\n        id: 'clone_prism',\n        name: 'Refraction Doubles',\n        damage: 0,\n        cooldown: 14.0,\n        telegraphDuration: 1.5,\n        description: 'Creates illusory clones',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.cloneIds = [];\n          const angles = [Math.PI / 4, Math.PI * 3 / 4, Math.PI * 5 / 4, Math.PI * 7 / 4];\n          angles.forEach(angle => {\n            const distance = 120;\n            const pos = {\n              x: miniboss.position.x + Math.cos(angle) * distance,\n              y: miniboss.position.y + Math.sin(angle) * distance\n            };\n            ctx.createParticles(pos, 25, '#67e8f9', 0.8);\n          });\n        }\n      },\n      {\n        id: 'resonance_nova',\n        name: 'Crystal Shockwave',\n        damage: 55,\n        cooldown: 10.0,\n        telegraphDuration: 2.0,\n        description: 'Explodes in a resonating shockwave',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let ring = 0; ring < 3; ring++) {\n            setTimeout(() => {\n              const radius = 80 + ring * 60;\n              const count = 12 + ring * 4;\n              for (let i = 0; i < count; i++) {\n                const angle = (Math.PI * 2 / count) * i;\n                ctx.createProjectile({\n                  id: generateId(),\n                  position: { ...miniboss.position },\n                  velocity: { x: Math.cos(angle) * (3 + ring), y: Math.sin(angle) * (3 + ring) },\n                  damage: 35,\n                  size: 9,\n                  color: '#a5f3fc',\n                  owner: 'enemy' as const,\n                  lifetime: 2.5,\n                  piercing: false,\n                  piercingCount: 0,\n                  rotation: 0\n                });\n              }\n              ctx.createParticles(miniboss.position, 30, '#22d3ee', 0.5);\n            }, ring * 400);\n          }\n        }\n      },\n      {\n        id: 'shard_orbital',\n        name: 'Orbiting Shards',\n        damage: 32,\n        cooldown: 7.0,\n        telegraphDuration: 0.8,\n        description: 'Surrounds itself with rotating crystal shards',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          if (!miniboss.orbitalProjectiles) miniboss.orbitalProjectiles = [];\n          const count = 6;\n          for (let i = 0; i < count; i++) {\n            const angle = (Math.PI * 2 / count) * i;\n            miniboss.orbitalProjectiles.push({\n              angle,\n              radius: 60,\n              damage: 32,\n              size: 10,\n              color: '#67e8f9'\n            });\n          }\n          ctx.createParticles(miniboss.position, 30, '#06b6d4', 0.6);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 3,\n      uniqueResource: {\n        type: 'resonantCrystal',\n        minAmount: 18,\n        maxAmount: 30\n      },\n      currencyMin: 290,\n      currencyMax: 530,\n      additionalResources: [\n        { type: 'geoShards', minAmount: 28, maxAmount: 45, chance: 1.0 },\n        { type: 'energy', minAmount: 50, maxAmount: 90, chance: 0.85 }\n      ],\n      weaponDropChance: 0.46\n    }\n  },\n\n  null_siren: {\n    subtype: 'null_siren',\n    name: 'Null Siren',\n    description: 'A void entity that manipulates space itself',\n    biomeId: 'void-nebula',\n    requiredFeatureType: 'void-gap',\n    health: 4200,\n    damage: 44,\n    speed: 3.2,\n    size: 52,\n    color: '#8b5cf6',\n    secondaryColor: '#a78bfa',\n    detectionRadius: 360,\n    phases: ['dormant', 'warping', 'void_tear'],\n    attacks: [\n      {\n        id: 'gravity_well',\n        name: 'Singularity Pulse',\n        damage: 35,\n        cooldown: 6.0,\n        telegraphDuration: 1.2,\n        description: 'Creates gravity wells that pull players',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.pullRadius = 200;\n          ctx.createParticles(miniboss.position, 45, '#8b5cf6', 1.0);\n          \n          for (let i = 0; i < 10; i++) {\n            const angle = (Math.PI * 2 / 10) * i;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(angle) * 3.5, y: Math.sin(angle) * 3.5 },\n              damage: 30,\n              size: 11,\n              color: '#a78bfa',\n              owner: 'enemy' as const,\n              lifetime: 3,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0,\n              isGravityWell: true,\n              gravityRadius: 80,\n              gravityStrength: 1.5\n            });\n          }\n        }\n      },\n      {\n        id: 'void_scream',\n        name: 'Dimensional Shriek',\n        damage: 48,\n        cooldown: 8.5,\n        telegraphDuration: 1.8,\n        description: 'Unleashes a cone of void energy',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const baseAngle = Math.atan2(dir.y, dir.x);\n          \n          for (let i = 0; i < 15; i++) {\n            const spreadAngle = baseAngle + (Math.random() - 0.5) * Math.PI / 2.5;\n            const speed = 4 + Math.random() * 2;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(spreadAngle) * speed, y: Math.sin(spreadAngle) * speed },\n              damage: 38,\n              size: 12,\n              color: '#c4b5fd',\n              owner: 'enemy' as const,\n              lifetime: 2.5,\n              piercing: true,\n              piercingCount: 2,\n              rotation: 0\n            });\n          }\n          ctx.createParticles(miniboss.position, 55, '#8b5cf6', 0.9);\n        }\n      },\n      {\n        id: 'teleport_strike',\n        name: 'Void Step Assault',\n        damage: 52,\n        cooldown: 9.0,\n        telegraphDuration: 0.5,\n        description: 'Teleports behind player and strikes',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: miniboss.position.x - playerPos.x, \n            y: miniboss.position.y - playerPos.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          \n          miniboss.position = {\n            x: playerPos.x + (dir.x / len) * 80,\n            y: playerPos.y + (dir.y / len) * 80\n          };\n          \n          ctx.createParticles(miniboss.position, 40, '#a78bfa', 0.7);\n          ctx.damagePlayer(52);\n        }\n      },\n      {\n        id: 'phase_shift',\n        name: 'Ethereal Form',\n        damage: 0,\n        cooldown: 13.0,\n        telegraphDuration: 0.6,\n        description: 'Becomes invulnerable and intangible',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.isSubmerged = true;\n          ctx.createParticles(miniboss.position, 50, '#ddd6fe', 0.8);\n          \n          setTimeout(() => {\n            miniboss.isSubmerged = false;\n            ctx.createParticles(miniboss.position, 35, '#8b5cf6', 0.6);\n          }, 3000);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 4,\n      uniqueResource: {\n        type: 'voidEssence',\n        minAmount: 22,\n        maxAmount: 38\n      },\n      currencyMin: 340,\n      currencyMax: 580,\n      additionalResources: [\n        { type: 'flux', minAmount: 32, maxAmount: 52, chance: 1.0 },\n        { type: 'voidCore', minAmount: 2, maxAmount: 5, chance: 0.6 }\n      ],\n      weaponDropChance: 0.5\n    }\n  },\n\n  solstice_warden: {\n    subtype: 'solstice_warden',\n    name: 'Solstice Warden',\n    description: 'Guardian of radiant gardens, wielder of solar power',\n    biomeId: 'radiant-gardens',\n    requiredFeatureType: 'bloom-tree',\n    health: 3900,\n    damage: 39,\n    speed: 3.1,\n    size: 49,\n    color: '#eab308',\n    secondaryColor: '#fbbf24',\n    detectionRadius: 330,\n    phases: ['patrol', 'radiant', 'supernova'],\n    attacks: [\n      {\n        id: 'solar_flare',\n        name: 'Sunburst Lance',\n        damage: 43,\n        cooldown: 4.5,\n        telegraphDuration: 0.9,\n        description: 'Fires concentrated solar beams',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          const angle = Math.atan2(dir.y, dir.x);\n          \n          for (let i = 0; i < 3; i++) {\n            setTimeout(() => {\n              ctx.createProjectile({\n                id: generateId(),\n                position: { ...miniboss.position },\n                velocity: { x: Math.cos(angle) * 6, y: Math.sin(angle) * 6 },\n                damage: 43,\n                size: 14,\n                color: '#fbbf24',\n                owner: 'enemy' as const,\n                lifetime: 3.5,\n                piercing: true,\n                piercingCount: 4,\n                rotation: 0,\n                isBeam: true\n              });\n              ctx.createParticles(miniboss.position, 15, '#eab308', 0.4);\n            }, i * 200);\n          }\n        }\n      },\n      {\n        id: 'seed_bomb',\n        name: 'Bloom Barrage',\n        damage: 36,\n        cooldown: 7.5,\n        telegraphDuration: 1.3,\n        description: 'Launches explosive seed pods',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 6; i++) {\n            const angle = (Math.PI * 2 / 6) * i + Math.random() * 0.3;\n            const speed = 3 + Math.random() * 1.5;\n            ctx.createProjectile({\n              id: generateId(),\n              position: { ...miniboss.position },\n              velocity: { x: Math.cos(angle) * speed, y: Math.sin(angle) * speed },\n              damage: 36,\n              size: 12,\n              color: '#84cc16',\n              owner: 'enemy' as const,\n              lifetime: 2.5,\n              piercing: false,\n              piercingCount: 0,\n              rotation: 0,\n              explosive: true,\n              explosionRadius: 60\n            });\n          }\n          ctx.createParticles(miniboss.position, 30, '#a3e635', 0.6);\n        }\n      },\n      {\n        id: 'healing_sanctum',\n        name: 'Verdant Regeneration',\n        damage: 0,\n        cooldown: 16.0,\n        telegraphDuration: 2.0,\n        description: 'Creates a healing zone',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          ctx.createParticles(miniboss.position, 60, '#86efac', 1.2);\n          miniboss.health = Math.min(miniboss.maxHealth, miniboss.health + 400);\n        }\n      },\n      {\n        id: 'radiant_dash',\n        name: 'Photon Blitz',\n        damage: 50,\n        cooldown: 8.0,\n        telegraphDuration: 1.0,\n        description: 'Dashes in a trail of light',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.isDashing = true;\n          miniboss.dashTimer = 0;\n          const dir = { \n            x: playerPos.x - miniboss.position.x, \n            y: playerPos.y - miniboss.position.y \n          };\n          const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n          miniboss.velocity = { x: (dir.x / len) * miniboss.speed * 5.5, y: (dir.y / len) * miniboss.speed * 5.5 };\n          ctx.createParticles(miniboss.position, 40, '#fef08a', 0.7);\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 3,\n      uniqueResource: {\n        type: 'sunpetalBloom',\n        minAmount: 17,\n        maxAmount: 29\n      },\n      currencyMin: 310,\n      currencyMax: 540,\n      additionalResources: [\n        { type: 'geoShards', minAmount: 24, maxAmount: 42, chance: 1.0 },\n        { type: 'energy', minAmount: 55, maxAmount: 95, chance: 0.88 }\n      ],\n      weaponDropChance: 0.44\n    }\n  },\n\n  rift_revenant: {\n    subtype: 'rift_revenant',\n    name: 'Rift Revenant',\n    description: 'A temporal anomaly torn between dimensions',\n    biomeId: 'shattered-expanse',\n    requiredFeatureType: 'reality-tear',\n    health: 4100,\n    damage: 41,\n    speed: 3.4,\n    size: 51,\n    color: '#a855f7',\n    secondaryColor: '#c084fc',\n    detectionRadius: 350,\n    phases: ['stable', 'fractured', 'temporal_collapse'],\n    attacks: [\n      {\n        id: 'time_skip',\n        name: 'Temporal Echoes',\n        damage: 40,\n        cooldown: 5.0,\n        telegraphDuration: 1.0,\n        description: 'Creates afterimages that attack',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          for (let i = 0; i < 4; i++) {\n            setTimeout(() => {\n              const angle = Math.random() * Math.PI * 2;\n              const distance = 100 + Math.random() * 50;\n              const pos = {\n                x: miniboss.position.x + Math.cos(angle) * distance,\n                y: miniboss.position.y + Math.sin(angle) * distance\n              };\n              \n              const dir = { \n                x: playerPos.x - pos.x, \n                y: playerPos.y - pos.y \n              };\n              const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n              \n              ctx.createProjectile({\n                id: generateId(),\n                position: pos,\n                velocity: { x: (dir.x / len) * 5, y: (dir.y / len) * 5 },\n                damage: 35,\n                size: 10,\n                color: '#c084fc',\n                owner: 'enemy' as const,\n                lifetime: 3,\n                piercing: false,\n                piercingCount: 0,\n                rotation: 0\n              });\n              ctx.createParticles(pos, 20, '#a855f7', 0.5);\n            }, i * 300);\n          }\n        }\n      },\n      {\n        id: 'blade_vortex',\n        name: 'Dimensional Blades',\n        damage: 45,\n        cooldown: 7.0,\n        telegraphDuration: 1.2,\n        description: 'Summons spinning energy blades',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          if (!miniboss.orbitalProjectiles) miniboss.orbitalProjectiles = [];\n          const count = 8;\n          for (let i = 0; i < count; i++) {\n            const angle = (Math.PI * 2 / count) * i;\n            miniboss.orbitalProjectiles.push({\n              angle,\n              radius: 70,\n              damage: 38,\n              size: 12,\n              color: '#e9d5ff',\n              rotationSpeed: 0.15\n            });\n          }\n          ctx.createParticles(miniboss.position, 35, '#a855f7', 0.7);\n        }\n      },\n      {\n        id: 'rift_pull',\n        name: 'Void Attraction',\n        damage: 28,\n        cooldown: 9.0,\n        telegraphDuration: 1.5,\n        description: 'Pulls players toward dimensional rifts',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.pullRadius = 250;\n          for (let i = 0; i < 12; i++) {\n            const angle = (Math.PI * 2 / 12) * i;\n            const distance = 180;\n            const pos = {\n              x: miniboss.position.x + Math.cos(angle) * distance,\n              y: miniboss.position.y + Math.sin(angle) * distance\n            };\n            ctx.createParticles(pos, 18, '#ddd6fe', 0.8);\n          }\n        }\n      },\n      {\n        id: 'phase_split',\n        name: 'Reality Fracture',\n        damage: 0,\n        cooldown: 14.0,\n        telegraphDuration: 2.0,\n        description: 'Splits into multiple phase copies',\n        execute: (miniboss, playerPos, dt, ctx) => {\n          miniboss.cloneIds = [];\n          const positions = [\n            { x: miniboss.position.x + 100, y: miniboss.position.y },\n            { x: miniboss.position.x - 100, y: miniboss.position.y },\n            { x: miniboss.position.x, y: miniboss.position.y + 100 },\n            { x: miniboss.position.x, y: miniboss.position.y - 100 }\n          ];\n          \n          positions.forEach(pos => {\n            ctx.createParticles(pos, 30, '#c084fc', 0.9);\n          });\n        }\n      }\n    ],\n    lootTable: {\n      guaranteedSingularityCores: 4,\n      uniqueResource: {\n        type: 'aetheriumShard',\n        minAmount: 20,\n        maxAmount: 35\n      },\n      currencyMin: 330,\n      currencyMax: 570,\n      additionalResources: [\n        { type: 'flux', minAmount: 30, maxAmount: 50, chance: 1.0 },\n        { type: 'energy', minAmount: 58, maxAmount: 98, chance: 0.87 }\n      ],\n      weaponDropChance: 0.48\n    }\n  }\n};\n\nexport class MinibossSystem {\n  private activeMinibosses: Map<string, Enemy> = new Map();\n  private spawnCooldowns: Map<MinibossSubtype, number> = new Map();\n  private defeatedMinibosses: Set<string> = new Set();\n\n  getDefinition(subtype: MinibossSubtype): MinibossDefinition | undefined {\n    return MINIBOSS_DEFINITIONS[subtype];\n  }\n\n  createMiniboss(subtype: MinibossSubtype, position: Vector2): Enemy {\n    const def = MINIBOSS_DEFINITIONS[subtype];\n    if (!def) {\n      throw new Error(`Unknown miniboss subtype: ${subtype}`);\n    }\n\n    const segments: Array<{ position: Vector2; rotation: number; size: number }> = [];\n    if (subtype === 'angulodon') {\n      for (let i = 0; i < 8; i++) {\n        segments.push({\n          position: { ...position },\n          rotation: 0,\n          size: def.size - i * 4\n        });\n      }\n    }\n\n    const miniboss: Enemy = {\n      id: generateId(),\n      type: 'miniboss',\n      minibossSubtype: subtype,\n      position: { ...position },\n      velocity: createVector(0, 0),\n      rotation: 0,\n      size: def.size,\n      health: def.health,\n      maxHealth: def.health,\n      damage: def.damage,\n      speed: def.speed,\n      color: def.color,\n      attackCooldown: 0,\n      currencyDrop: 0,\n      detectionRadius: def.detectionRadius,\n      phase: def.phases[0],\n      behaviorState: 'idle',\n      phaseTimer: 0,\n      attackQueueTimer: 0,\n      isSubmerged: subtype === 'angulodon',\n      segments: segments.length > 0 ? segments : undefined,\n      jaws: subtype === 'angulodon' ? { isOpen: false, biteTimer: 0 } : undefined\n    };\n\n    this.activeMinibosses.set(miniboss.id, miniboss);\n    return miniboss;\n  }\n\n  isMinibossActive(subtype: MinibossSubtype): boolean {\n    for (const miniboss of this.activeMinibosses.values()) {\n      if (miniboss.minibossSubtype === subtype) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  removeMiniboss(id: string): void {\n    this.activeMinibosses.delete(id);\n  }\n\n  markDefeated(id: string): void {\n    this.defeatedMinibosses.add(id);\n    this.removeMiniboss(id);\n  }\n\n  canSpawn(subtype: MinibossSubtype): boolean {\n    const cooldown = this.spawnCooldowns.get(subtype) || 0;\n    return cooldown <= 0 && !this.isMinibossActive(subtype);\n  }\n\n  setSpawnCooldown(subtype: MinibossSubtype, duration: number): void {\n    this.spawnCooldowns.set(subtype, duration);\n  }\n\n  updateCooldowns(dt: number): void {\n    for (const [subtype, cooldown] of this.spawnCooldowns.entries()) {\n      if (cooldown > 0) {\n        this.spawnCooldowns.set(subtype, cooldown - dt);\n      }\n    }\n  }\n\n  getActiveMinibosses(): Enemy[] {\n    return Array.from(this.activeMinibosses.values());\n  }\n}\n","size_bytes":40038},"src/game/MinibossUpdateSystem.ts":{"content":"import { Enemy, Vector2, Projectile } from '../types/game';\nimport { MINIBOSS_DEFINITIONS, MinibossAttackContext } from './MinibossSystem';\nimport { vectorDistance, vectorSubtract, vectorNormalize, vectorScale, vectorAdd, createVector, generateId } from './utils';\n\nexport class MinibossUpdateSystem {\n  update(\n    miniboss: Enemy,\n    playerPos: Vector2,\n    dt: number,\n    context: MinibossAttackContext\n  ): void {\n    if (!miniboss.minibossSubtype) return;\n\n    const definition = MINIBOSS_DEFINITIONS[miniboss.minibossSubtype];\n    if (!definition) return;\n\n    this.updatePhase(miniboss, definition, dt);\n    this.updateBehavior(miniboss, playerPos, dt, context);\n    this.updateAttacks(miniboss, playerPos, dt, context, definition);\n    this.updateSpecialMechanics(miniboss, playerPos, dt, context);\n    \n    if (miniboss.segments && miniboss.minibossSubtype === 'angulodon') {\n      this.updateSegments(miniboss, dt);\n    }\n  }\n\n  private updatePhase(miniboss: Enemy, definition: any, dt: number): void {\n    miniboss.phaseTimer = (miniboss.phaseTimer || 0) + dt;\n\n    const healthPercent = miniboss.health / miniboss.maxHealth;\n\n    if (healthPercent > 0.6 && miniboss.phase !== definition.phases[0]) {\n      miniboss.phase = definition.phases[0];\n    } else if (healthPercent <= 0.6 && healthPercent > 0.3 && miniboss.phase !== definition.phases[1]) {\n      miniboss.phase = definition.phases[1];\n      miniboss.speed *= 1.2;\n    } else if (healthPercent <= 0.3 && miniboss.phase !== definition.phases[2]) {\n      miniboss.phase = definition.phases[2];\n      miniboss.speed *= 1.3;\n      miniboss.damage *= 1.2;\n    }\n  }\n\n  private updateBehavior(\n    miniboss: Enemy,\n    playerPos: Vector2,\n    dt: number,\n    context: MinibossAttackContext\n  ): void {\n    if (!miniboss.minibossSubtype) return;\n\n    const distance = vectorDistance(miniboss.position, playerPos);\n\n    if (miniboss.minibossSubtype === 'angulodon') {\n      if (miniboss.isSubmerged) {\n        if (distance < 150) {\n          miniboss.isSubmerged = false;\n          context.createParticles(miniboss.position, 50, '#22d3ee', 0.8);\n        }\n      }\n    }\n\n    if (miniboss.jaws && miniboss.jaws.isOpen) {\n      miniboss.jaws.biteTimer = Math.max(0, miniboss.jaws.biteTimer - dt);\n      if (miniboss.jaws.biteTimer <= 0) {\n        miniboss.jaws.isOpen = false;\n        miniboss.jaws.grabbedPlayerId = undefined;\n      }\n    }\n\n    if (miniboss.isDashing && miniboss.dashTimer !== undefined) {\n      miniboss.dashTimer += dt;\n      if (miniboss.dashTimer > 0.5) {\n        miniboss.isDashing = false;\n        miniboss.velocity = createVector(0, 0);\n      }\n    } else if (!miniboss.isSubmerged) {\n      miniboss.behaviorTimer = (miniboss.behaviorTimer || 0) + dt;\n      \n      const optimalRange = this.getOptimalRange(miniboss);\n      const tooCloseRange = optimalRange * 0.5;\n      const tooFarRange = optimalRange * 1.5;\n      \n      let targetVelocity: Vector2;\n      \n      if (miniboss.telegraphTimer && miniboss.telegraphTimer > 0) {\n        const slowFactor = 0.3;\n        const dir = vectorSubtract(playerPos, miniboss.position);\n        const normalized = vectorNormalize(dir);\n        targetVelocity = vectorScale(normalized, miniboss.speed * slowFactor);\n      } else if (distance < tooCloseRange) {\n        const retreatDir = vectorSubtract(miniboss.position, playerPos);\n        const normalized = vectorNormalize(retreatDir);\n        const angle = Math.atan2(normalized.y, normalized.x) + (Math.sin(miniboss.behaviorTimer * 2) * 0.5);\n        targetVelocity = {\n          x: Math.cos(angle) * miniboss.speed * 0.8,\n          y: Math.sin(angle) * miniboss.speed * 0.8\n        };\n      } else if (distance > tooFarRange) {\n        const dir = vectorSubtract(playerPos, miniboss.position);\n        const normalized = vectorNormalize(dir);\n        targetVelocity = vectorScale(normalized, miniboss.speed * 1.2);\n      } else {\n        const dir = vectorSubtract(playerPos, miniboss.position);\n        const angle = Math.atan2(dir.y, dir.x) + (Math.PI / 2) * Math.sin(miniboss.behaviorTimer);\n        const circleRadius = 0.7;\n        targetVelocity = {\n          x: (Math.cos(angle) * circleRadius + dir.x / distance * (1 - circleRadius)) * miniboss.speed,\n          y: (Math.sin(angle) * circleRadius + dir.y / distance * (1 - circleRadius)) * miniboss.speed\n        };\n      }\n      \n      miniboss.velocity = vectorAdd(\n        vectorScale(miniboss.velocity, 0.85),\n        vectorScale(targetVelocity, 0.15)\n      );\n    }\n\n    if (miniboss.shieldActive && miniboss.shieldHealth !== undefined) {\n      if (miniboss.shieldHealth <= 0) {\n        miniboss.shieldActive = false;\n        context.createParticles(miniboss.position, 40, '#fb923c', 0.6);\n      }\n    }\n\n    if (miniboss.whirlpoolAngle !== undefined) {\n      miniboss.whirlpoolAngle += dt * 3;\n      if (miniboss.whirlpoolAngle > Math.PI * 4) {\n        miniboss.whirlpoolAngle = undefined;\n        miniboss.pullRadius = undefined;\n      }\n    }\n\n    miniboss.position = vectorAdd(miniboss.position, vectorScale(miniboss.velocity, dt * 60));\n    \n    const toPlayer = vectorSubtract(playerPos, miniboss.position);\n    miniboss.rotation = Math.atan2(toPlayer.y, toPlayer.x);\n  }\n\n  private updateAttacks(\n    miniboss: Enemy,\n    playerPos: Vector2,\n    dt: number,\n    context: MinibossAttackContext,\n    definition: any\n  ): void {\n    if (miniboss.isSubmerged) return;\n\n    miniboss.attackCooldown = Math.max(0, miniboss.attackCooldown - dt);\n    miniboss.telegraphTimer = Math.max(0, (miniboss.telegraphTimer || 0) - dt);\n\n    if (miniboss.attackCooldown <= 0 && !miniboss.telegraphTimer) {\n      const availableAttacks = definition.attacks.filter((attack: any) => {\n        if (attack.id === 'heal_sanctum' && miniboss.health > miniboss.maxHealth * 0.7) {\n          return false;\n        }\n        return true;\n      });\n\n      if (availableAttacks.length > 0) {\n        const attack = availableAttacks[Math.floor(Math.random() * availableAttacks.length)];\n        \n        miniboss.nextAttack = attack.id;\n        miniboss.telegraphTimer = attack.telegraphDuration;\n        context.createParticles(miniboss.position, 15, definition.secondaryColor, 0.4);\n      }\n    }\n\n    if (miniboss.telegraphTimer && miniboss.telegraphTimer <= 0.05 && miniboss.nextAttack) {\n      const attack = definition.attacks.find((a: any) => a.id === miniboss.nextAttack);\n      if (attack && attack.execute) {\n        attack.execute(miniboss, playerPos, dt, context);\n        miniboss.attackCooldown = attack.cooldown;\n        miniboss.nextAttack = undefined;\n      }\n    }\n  }\n\n  private updateSpecialMechanics(\n    miniboss: Enemy,\n    playerPos: Vector2,\n    dt: number,\n    context: MinibossAttackContext\n  ): void {\n    if (miniboss.pullRadius) {\n      const distance = vectorDistance(miniboss.position, playerPos);\n      if (distance < miniboss.pullRadius) {\n        const pullStrength = (1 - distance / miniboss.pullRadius) * 2;\n        context.createParticles(playerPos, 2, '#8b5cf6', 0.2);\n      }\n    }\n\n    if (miniboss.orbitalProjectiles && miniboss.orbitalProjectiles.length > 0) {\n      miniboss.orbitalAngle = (miniboss.orbitalAngle || 0) + dt * 2;\n    }\n  }\n\n  private getOptimalRange(miniboss: Enemy): number {\n    if (!miniboss.minibossSubtype) return 150;\n    \n    switch (miniboss.minibossSubtype) {\n      case 'angulodon':\n        return 120;\n      case 'cryostag_vanguard':\n        return 200;\n      case 'pyroclast_behemoth':\n        return 180;\n      case 'mirelurker_matron':\n        return 220;\n      case 'prism_guardian':\n        return 250;\n      case 'null_siren':\n        return 200;\n      case 'solstice_warden':\n        return 190;\n      case 'rift_revenant':\n        return 210;\n      default:\n        return 150;\n    }\n  }\n\n  private updateSegments(miniboss: Enemy, dt: number): void {\n    if (!miniboss.segments || miniboss.segments.length === 0) return;\n\n    const headPos = miniboss.position;\n    const segmentSpacing = 35;\n\n    for (let i = 0; i < miniboss.segments.length; i++) {\n      const segment = miniboss.segments[i];\n      \n      if (i === 0) {\n        segment.position = { ...headPos };\n      } else {\n        const prevSegment = miniboss.segments[i - 1];\n        const dir = vectorSubtract(prevSegment.position, segment.position);\n        const dist = vectorDistance(prevSegment.position, segment.position);\n        \n        if (dist > segmentSpacing) {\n          const normalized = vectorNormalize(dir);\n          segment.position = vectorAdd(\n            prevSegment.position,\n            vectorScale(normalized, -segmentSpacing)\n          );\n        }\n      }\n      \n      if (i < miniboss.segments.length - 1) {\n        const nextSegment = miniboss.segments[i + 1];\n        const dir = vectorSubtract(nextSegment.position, segment.position);\n        segment.rotation = Math.atan2(dir.y, dir.x);\n      } else {\n        segment.rotation = miniboss.rotation;\n      }\n    }\n  }\n\n  applyWhirlpoolEffect(miniboss: Enemy, playerPos: Vector2, dt: number): Vector2 | null {\n    if (!miniboss.whirlpoolAngle || !miniboss.pullRadius) return null;\n\n    const distance = vectorDistance(miniboss.position, playerPos);\n    if (distance < miniboss.pullRadius) {\n      const pullDir = vectorSubtract(miniboss.position, playerPos);\n      const normalized = vectorNormalize(pullDir);\n      const pullStrength = (1 - distance / miniboss.pullRadius) * 3;\n      \n      const tangentAngle = Math.atan2(pullDir.y, pullDir.x) + Math.PI / 2;\n      const tangent = { x: Math.cos(tangentAngle), y: Math.sin(tangentAngle) };\n      \n      return vectorAdd(\n        vectorScale(normalized, pullStrength * dt * 60),\n        vectorScale(tangent, pullStrength * 0.5 * dt * 60)\n      );\n    }\n\n    return null;\n  }\n\n  damageShield(miniboss: Enemy, damage: number): boolean {\n    if (miniboss.shieldActive && miniboss.shieldHealth !== undefined) {\n      miniboss.shieldHealth -= damage;\n      return true;\n    }\n    return false;\n  }\n}\n","size_bytes":9984},"src/game/DroneSystem.ts":{"content":"import { Drone, DroneType, Vector2, Enemy, Projectile } from '../types/game';\nimport { generateId, vectorDistance, vectorNormalize, vectorSubtract, vectorScale, vectorAdd } from './utils';\n\nexport type DroneShape = 'circle' | 'triangle' | 'square' | 'hexagon' | 'diamond' | 'cross' | 'star';\n\nexport interface DroneDefinition {\n  type: DroneType;\n  name: string;\n  description: string;\n  canAttack: boolean;\n  damage: number;\n  fireRate: number;\n  orbitRadius: number;\n  orbitSpeed: number;\n  size: number;\n  shape: DroneShape;\n  color: string;\n  secondaryColor: string;\n  detectionRadius: number;\n  projectileSpeed: number;\n  projectileSize: number;\n  projectileColor: string;\n  passiveEffect?: string;\n  passiveEffectValue?: number;\n  activeEffect?: string;\n  activeTrigger?: 'shoot' | 'dash' | 'weaponSwap' | 'takeDamage' | 'manual';\n  activeEffectDuration?: number;\n  activeEffectCooldown?: number;\n}\n\nexport const DRONE_DEFINITIONS: Record<DroneType, DroneDefinition> = {\n  assault_drone: {\n    type: 'assault_drone',\n    name: 'Assault Drone',\n    description: 'Aggressive drone that fires rapid projectiles at enemies',\n    canAttack: true,\n    damage: 5,\n    fireRate: 0.5,\n    orbitRadius: 85,\n    orbitSpeed: 2.0,\n    size: 7,\n    shape: 'diamond',\n    color: '#ef4444',\n    secondaryColor: '#dc2626',\n    detectionRadius: 300,\n    projectileSpeed: 12,\n    projectileSize: 6,\n    projectileColor: '#f87171',\n    passiveEffect: '+15% damage to all player weapons',\n    passiveEffectValue: 0.15,\n    activeEffect: 'Burst fire: Drone fires 5x faster for 3 seconds',\n    activeTrigger: 'shoot',\n    activeEffectDuration: 3,\n    activeEffectCooldown: 12,\n  },\n  shield_drone: {\n    type: 'shield_drone',\n    name: 'Shield Drone',\n    description: 'Defensive drone that absorbs damage for the player',\n    canAttack: false,\n    damage: 0,\n    fireRate: 1.0,\n    orbitRadius: 80,\n    orbitSpeed: 1.5,\n    size: 8,\n    shape: 'hexagon',\n    color: '#3b82f6',\n    secondaryColor: '#2563eb',\n    detectionRadius: 250,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    projectileColor: '#60a5fa',\n    passiveEffect: 'Absorbs 20% of incoming damage',\n    passiveEffectValue: 0.20,\n    activeEffect: 'Emergency shield bubble blocks all damage for 3s',\n    activeTrigger: 'takeDamage',\n    activeEffectDuration: 3,\n    activeEffectCooldown: 20,\n  },\n  repair_drone: {\n    type: 'repair_drone',\n    name: 'Repair Drone',\n    description: 'Support drone that slowly repairs player health',\n    canAttack: false,\n    damage: 0,\n    fireRate: 0,\n    orbitRadius: 90,\n    orbitSpeed: 1.8,\n    size: 7,\n    shape: 'cross',\n    color: '#10b981',\n    secondaryColor: '#059669',\n    detectionRadius: 200,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    projectileColor: '#34d399',\n    passiveEffect: 'Regenerates 2 HP per second',\n    passiveEffectValue: 2,\n    activeEffect: 'Instant heal: Restore 30 HP immediately',\n    activeTrigger: 'dash',\n    activeEffectDuration: 0,\n    activeEffectCooldown: 15,\n  },\n  scout_drone: {\n    type: 'scout_drone',\n    name: 'Scout Drone',\n    description: 'Fast drone with extended detection range',\n    canAttack: false,\n    damage: 0,\n    fireRate: 0,\n    orbitRadius: 110,\n    orbitSpeed: 3.0,\n    size: 6,\n    shape: 'triangle',\n    color: '#f59e0b',\n    secondaryColor: '#d97706',\n    detectionRadius: 500,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    projectileColor: '#fbbf24',\n    passiveEffect: '+100 detection range, reveals hidden enemies',\n    passiveEffectValue: 100,\n    activeEffect: 'Pulse scan: Reveal all enemies for 8 seconds',\n    activeTrigger: 'manual',\n    activeEffectDuration: 8,\n    activeEffectCooldown: 18,\n  },\n  plasma_drone: {\n    type: 'plasma_drone',\n    name: 'Plasma Drone',\n    description: 'Fires superheated plasma bolts that pierce enemies',\n    canAttack: true,\n    damage: 8,\n    fireRate: 1.2,\n    orbitRadius: 95,\n    orbitSpeed: 2.2,\n    size: 7,\n    shape: 'diamond',\n    color: '#8b5cf6',\n    secondaryColor: '#7c3aed',\n    detectionRadius: 320,\n    projectileSpeed: 14,\n    projectileSize: 8,\n    projectileColor: '#a78bfa',\n    passiveEffect: 'Drone projectiles pierce through enemies',\n    passiveEffectValue: 1,\n    activeEffect: 'Overcharge: Triple damage for 4 seconds',\n    activeTrigger: 'shoot',\n    activeEffectDuration: 4,\n    activeEffectCooldown: 14,\n  },\n  cryo_drone: {\n    type: 'cryo_drone',\n    name: 'Cryo Drone',\n    description: 'Slows enemies with freezing projectiles',\n    canAttack: true,\n    damage: 4,\n    fireRate: 0.9,\n    orbitRadius: 88,\n    orbitSpeed: 1.9,\n    size: 7,\n    shape: 'hexagon',\n    color: '#06b6d4',\n    secondaryColor: '#0891b2',\n    detectionRadius: 280,\n    projectileSpeed: 11,\n    projectileSize: 7,\n    projectileColor: '#22d3ee',\n    passiveEffect: 'Drone shots slow enemies by 30% for 2 seconds',\n    passiveEffectValue: 0.30,\n    activeEffect: 'Ice Nova: Freeze all nearby enemies for 3 seconds',\n    activeTrigger: 'dash',\n    activeEffectDuration: 3,\n    activeEffectCooldown: 16,\n  },\n  explosive_drone: {\n    type: 'explosive_drone',\n    name: 'Explosive Drone',\n    description: 'Launches explosive rounds that deal area damage',\n    canAttack: true,\n    damage: 10,\n    fireRate: 1.8,\n    orbitRadius: 86,\n    orbitSpeed: 1.7,\n    size: 8,\n    shape: 'square',\n    color: '#f97316',\n    secondaryColor: '#ea580c',\n    detectionRadius: 290,\n    projectileSpeed: 9,\n    projectileSize: 9,\n    projectileColor: '#fb923c',\n    passiveEffect: 'Drone shots explode for AoE damage',\n    passiveEffectValue: 1,\n    activeEffect: 'Carpet bomb: Rapid fire for 4 seconds',\n    activeTrigger: 'shoot',\n    activeEffectDuration: 4,\n    activeEffectCooldown: 18,\n  },\n  emp_drone: {\n    type: 'emp_drone',\n    name: 'EMP Drone',\n    description: 'Disrupts enemy shields and systems',\n    canAttack: true,\n    damage: 6,\n    fireRate: 1.1,\n    orbitRadius: 92,\n    orbitSpeed: 2.1,\n    size: 7,\n    shape: 'cross',\n    color: '#eab308',\n    secondaryColor: '#ca8a04',\n    detectionRadius: 310,\n    projectileSpeed: 13,\n    projectileSize: 6,\n    projectileColor: '#fde047',\n    passiveEffect: 'Drone shots disable enemy abilities briefly',\n    passiveEffectValue: 1,\n    activeEffect: 'EMP blast: Stun all nearby enemies for 4 seconds',\n    activeTrigger: 'weaponSwap',\n    activeEffectDuration: 4,\n    activeEffectCooldown: 24,\n  },\n  sniper_drone: {\n    type: 'sniper_drone',\n    name: 'Sniper Drone',\n    description: 'Precise long-range shots with high damage',\n    canAttack: true,\n    damage: 15,\n    fireRate: 2.5,\n    orbitRadius: 115,\n    orbitSpeed: 1.4,\n    size: 6,\n    shape: 'triangle',\n    color: '#64748b',\n    secondaryColor: '#475569',\n    detectionRadius: 500,\n    projectileSpeed: 20,\n    projectileSize: 5,\n    projectileColor: '#94a3b8',\n    passiveEffect: '+30% critical hit chance for player weapons',\n    passiveEffectValue: 0.30,\n    activeEffect: 'Tactical mode: Slow move, 3x damage/range for 6s',\n    activeTrigger: 'manual',\n    activeEffectDuration: 6,\n    activeEffectCooldown: 20,\n  },\n  laser_drone: {\n    type: 'laser_drone',\n    name: 'Laser Drone',\n    description: 'Continuous laser beam that tracks enemies',\n    canAttack: true,\n    damage: 3,\n    fireRate: 0.1,\n    orbitRadius: 94,\n    orbitSpeed: 2.0,\n    size: 7,\n    shape: 'diamond',\n    color: '#ec4899',\n    secondaryColor: '#db2777',\n    detectionRadius: 300,\n    projectileSpeed: 25,\n    projectileSize: 4,\n    projectileColor: '#f472b6',\n    passiveEffect: 'Continuous beam, damage ramps over time',\n    passiveEffectValue: 1,\n    activeEffect: 'Overload: Triple damage for 5 seconds',\n    activeTrigger: 'shoot',\n    activeEffectDuration: 5,\n    activeEffectCooldown: 15,\n  },\n  swarm_drone: {\n    type: 'swarm_drone',\n    name: 'Swarm Drone',\n    description: 'Deploys mini-drones that swarm enemies',\n    canAttack: true,\n    damage: 2,\n    fireRate: 0.6,\n    orbitRadius: 84,\n    orbitSpeed: 2.5,\n    size: 6,\n    shape: 'circle',\n    color: '#14b8a6',\n    secondaryColor: '#0d9488',\n    detectionRadius: 270,\n    projectileSpeed: 10,\n    projectileSize: 3,\n    projectileColor: '#2dd4bf',\n    passiveEffect: 'Drone shots split into 3 mini-projectiles',\n    passiveEffectValue: 3,\n    activeEffect: 'Swarm deploy: 20 mini-drones attack',\n    activeTrigger: 'manual',\n    activeEffectDuration: 6,\n    activeEffectCooldown: 20,\n  },\n  gravity_drone: {\n    type: 'gravity_drone',\n    name: 'Gravity Drone',\n    description: 'Creates gravity wells that pull enemies together',\n    canAttack: false,\n    damage: 0,\n    fireRate: 0,\n    orbitRadius: 87,\n    orbitSpeed: 1.6,\n    size: 8,\n    shape: 'hexagon',\n    color: '#6366f1',\n    secondaryColor: '#4f46e5',\n    detectionRadius: 350,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    projectileColor: '#818cf8',\n    passiveEffect: 'Slows nearby enemies by 15%',\n    passiveEffectValue: 0.15,\n    activeEffect: 'Black hole: Pulls all enemies to center for 4s',\n    activeTrigger: 'manual',\n    activeEffectDuration: 4,\n    activeEffectCooldown: 25,\n  },\n  medic_drone: {\n    type: 'medic_drone',\n    name: 'Medic Drone',\n    description: 'Advanced healing with shield regeneration',\n    canAttack: false,\n    damage: 0,\n    fireRate: 0,\n    orbitRadius: 82,\n    orbitSpeed: 1.5,\n    size: 8,\n    shape: 'cross',\n    color: '#22c55e',\n    secondaryColor: '#16a34a',\n    detectionRadius: 200,\n    projectileSpeed: 0,\n    projectileSize: 0,\n    projectileColor: '#4ade80',\n    passiveEffect: 'Regenerates 4 HP/sec',\n    passiveEffectValue: 4,\n    activeEffect: 'Healing pool: Area heal for 6s',\n    activeTrigger: 'manual',\n    activeEffectDuration: 6,\n    activeEffectCooldown: 30,\n  },\n  tesla_drone: {\n    type: 'tesla_drone',\n    name: 'Tesla Drone',\n    description: 'Chains lightning between nearby enemies',\n    canAttack: true,\n    damage: 7,\n    fireRate: 1.3,\n    orbitRadius: 91,\n    orbitSpeed: 2.0,\n    size: 7,\n    shape: 'star',\n    color: '#3b82f6',\n    secondaryColor: '#2563eb',\n    detectionRadius: 300,\n    projectileSpeed: 16,\n    projectileSize: 6,\n    projectileColor: '#60a5fa',\n    passiveEffect: 'Lightning chains to 3 nearby enemies',\n    passiveEffectValue: 3,\n    activeEffect: 'Tesla storm: Continuous chain for 6 seconds',\n    activeTrigger: 'shoot',\n    activeEffectDuration: 6,\n    activeEffectCooldown: 22,\n  },\n  void_drone: {\n    type: 'void_drone',\n    name: 'Void Drone',\n    description: 'Dark energy projectiles that phase through obstacles',\n    canAttack: true,\n    damage: 9,\n    fireRate: 1.4,\n    orbitRadius: 98,\n    orbitSpeed: 1.9,\n    size: 7,\n    shape: 'diamond',\n    color: '#7c3aed',\n    secondaryColor: '#6d28d9',\n    detectionRadius: 330,\n    projectileSpeed: 12,\n    projectileSize: 8,\n    projectileColor: '#a78bfa',\n    passiveEffect: 'Projectiles ignore obstacles and terrain',\n    passiveEffectValue: 1,\n    activeEffect: 'Void Blink: Teleport in movement direction, preserving momentum. Works perfectly with grapple.',\n    activeTrigger: 'dash',\n    activeEffectDuration: 0,\n    activeEffectCooldown: 8,\n  },\n};\n\nexport class DroneSystem {\n  createDrone(droneType: DroneType, ownerId: string, ownerPosition: Vector2, startAngle: number = 0): Drone {\n    const definition = DRONE_DEFINITIONS[droneType];\n    \n    return {\n      id: generateId(),\n      droneType,\n      ownerId,\n      position: { ...ownerPosition },\n      velocity: { x: 0, y: 0 },\n      rotation: 0,\n      size: definition.size,\n      shape: definition.shape,\n      damage: definition.damage,\n      fireRate: definition.fireRate,\n      attackCooldown: 0,\n      orbitRadius: definition.orbitRadius,\n      orbitAngle: startAngle,\n      orbitSpeed: definition.orbitSpeed,\n      color: definition.color,\n      secondaryColor: definition.secondaryColor,\n      detectionRadius: definition.detectionRadius,\n      activeEffectCooldown: definition.activeEffectCooldown || 0,\n      activeEffectTimer: 0,\n      isActiveEffectActive: false,\n      activeEffectRemainingTime: 0,\n    };\n  }\n\n  updateDrones(\n    drones: Drone[],\n    ownerPosition: Vector2,\n    enemies: Enemy[],\n    dt: number,\n    createProjectile: (projectile: Projectile) => void\n  ): void {\n    drones.forEach(drone => {\n      this.updateDronePosition(drone, ownerPosition, dt);\n      this.updateDroneAttack(drone, enemies, dt, createProjectile);\n    });\n  }\n\n  private updateDronePosition(drone: Drone, ownerPosition: Vector2, dt: number): void {\n    if (!drone.aiState) {\n      drone.aiState = 'hovering';\n      drone.aiTimer = 0;\n      drone.hoverOffset = { x: (Math.random() - 0.5) * 80, y: (Math.random() - 0.5) * 80 };\n    }\n\n    drone.aiTimer = (drone.aiTimer || 0) + dt;\n\n    if (drone.aiState === 'hovering') {\n      if (drone.aiTimer > 3 + Math.random() * 2) {\n        drone.aiState = Math.random() < 0.7 ? 'orbiting' : 'spinning';\n        drone.aiTimer = 0;\n      }\n      \n      const hoverX = ownerPosition.x + (drone.hoverOffset?.x || 0);\n      const hoverY = ownerPosition.y + (drone.hoverOffset?.y || 0);\n      \n      const smoothingFactor = 0.12;\n      drone.position.x += (hoverX - drone.position.x) * smoothingFactor;\n      drone.position.y += (hoverY - drone.position.y) * smoothingFactor;\n\n      const distance = vectorDistance(drone.position, ownerPosition);\n      if (distance > drone.orbitRadius + 40) {\n        const toOwner = vectorNormalize(vectorSubtract(ownerPosition, drone.position));\n        drone.position.x += toOwner.x * 3;\n        drone.position.y += toOwner.y * 3;\n      }\n    } \n    else if (drone.aiState === 'orbiting') {\n      if (drone.aiTimer > 2 + Math.random() * 1.5) {\n        drone.aiState = 'hovering';\n        drone.aiTimer = 0;\n        drone.hoverOffset = { x: (Math.random() - 0.5) * 80, y: (Math.random() - 0.5) * 80 };\n      }\n\n      drone.orbitAngle = (drone.orbitAngle || 0) + drone.orbitSpeed * dt;\n      if (drone.orbitAngle > Math.PI * 2) {\n        drone.orbitAngle -= Math.PI * 2;\n      }\n\n      const targetX = ownerPosition.x + Math.cos(drone.orbitAngle) * drone.orbitRadius;\n      const targetY = ownerPosition.y + Math.sin(drone.orbitAngle) * drone.orbitRadius;\n\n      const smoothingFactor = 0.18;\n      drone.position.x += (targetX - drone.position.x) * smoothingFactor;\n      drone.position.y += (targetY - drone.position.y) * smoothingFactor;\n    }\n    else if (drone.aiState === 'spinning') {\n      if (drone.aiTimer > 1.5) {\n        drone.aiState = 'hovering';\n        drone.aiTimer = 0;\n        drone.hoverOffset = { x: (Math.random() - 0.5) * 80, y: (Math.random() - 0.5) * 80 };\n      }\n\n      const spinSpeed = 8;\n      drone.orbitAngle = (drone.orbitAngle || 0) + spinSpeed * dt;\n      const spinRadius = 70;\n\n      const targetX = ownerPosition.x + Math.cos(drone.orbitAngle) * spinRadius;\n      const targetY = ownerPosition.y + Math.sin(drone.orbitAngle) * spinRadius;\n\n      const smoothingFactor = 0.25;\n      drone.position.x += (targetX - drone.position.x) * smoothingFactor;\n      drone.position.y += (targetY - drone.position.y) * smoothingFactor;\n    }\n\n    const toTarget = drone.targetId \n      ? vectorSubtract(drone.position, ownerPosition)\n      : vectorSubtract({ x: ownerPosition.x, y: ownerPosition.y }, drone.position);\n    drone.rotation = Math.atan2(toTarget.y, toTarget.x);\n  }\n\n  private updateDroneAttack(\n    drone: Drone,\n    enemies: Enemy[],\n    dt: number,\n    createProjectile: (projectile: Projectile) => void\n  ): void {\n    const definition = DRONE_DEFINITIONS[drone.droneType];\n    \n    // Only attack if this drone type can attack\n    if (!definition.canAttack) {\n      drone.targetId = undefined;\n      return;\n    }\n\n    drone.attackCooldown = Math.max(0, drone.attackCooldown - dt);\n\n    if (drone.attackCooldown > 0) return;\n\n    const nearestEnemy = this.findNearestEnemy(drone, enemies);\n    \n    if (!nearestEnemy) {\n      drone.targetId = undefined;\n      return;\n    }\n\n    const distance = vectorDistance(drone.position, nearestEnemy.position);\n    if (distance > drone.detectionRadius) {\n      drone.targetId = undefined;\n      return;\n    }\n\n    drone.targetId = nearestEnemy.id;\n    this.fireDroneProjectile(drone, nearestEnemy.position, createProjectile);\n    drone.attackCooldown = drone.fireRate;\n  }\n\n  private findNearestEnemy(drone: Drone, enemies: Enemy[]): Enemy | null {\n    let nearest: Enemy | null = null;\n    let minDist = Infinity;\n\n    enemies.forEach(enemy => {\n      if (enemy.health <= 0) return;\n      \n      const dist = vectorDistance(drone.position, enemy.position);\n      if (dist < minDist && dist <= drone.detectionRadius) {\n        minDist = dist;\n        nearest = enemy;\n      }\n    });\n\n    return nearest;\n  }\n\n  private fireDroneProjectile(\n    drone: Drone,\n    targetPosition: Vector2,\n    createProjectile: (projectile: Projectile) => void\n  ): void {\n    const definition = DRONE_DEFINITIONS[drone.droneType];\n    const direction = vectorNormalize(vectorSubtract(targetPosition, drone.position));\n    const velocity = vectorScale(direction, definition.projectileSpeed);\n\n    createProjectile({\n      id: generateId(),\n      position: { ...drone.position },\n      velocity,\n      rotation: Math.atan2(velocity.y, velocity.x),\n      size: definition.projectileSize,\n      damage: drone.damage,\n      color: definition.projectileColor,\n      owner: 'player',\n      lifetime: 2.5,\n      piercing: false,\n      piercingCount: 0,\n    });\n  }\n\n  getDroneDefinition(droneType: DroneType): DroneDefinition {\n    return DRONE_DEFINITIONS[droneType];\n  }\n}\n","size_bytes":17464},"src/game/MinibossRenderer.ts":{"content":"import { Enemy, MinibossSubtype, Vector2 } from '../types/game';\nimport { Camera } from './Camera';\n\nexport function renderMiniboss(\n  ctx: CanvasRenderingContext2D,\n  miniboss: Enemy,\n  camera: Camera\n): void {\n  if (!miniboss.minibossSubtype) return;\n\n  const screenPos = camera.worldToScreen(miniboss.position);\n\n  switch (miniboss.minibossSubtype) {\n    case 'angulodon':\n      renderAngulodon(ctx, miniboss, screenPos);\n      break;\n    case 'cryostag_vanguard':\n      renderCryostagVanguard(ctx, miniboss, screenPos);\n      break;\n    case 'pyroclast_behemoth':\n      renderPyroclastBehemoth(ctx, miniboss, screenPos);\n      break;\n    case 'mirelurker_matron':\n      renderMirelurkerMatron(ctx, miniboss, screenPos);\n      break;\n    case 'prism_guardian':\n      renderPrismGuardian(ctx, miniboss, screenPos);\n      break;\n    case 'null_siren':\n      renderNullSiren(ctx, miniboss, screenPos);\n      break;\n    case 'solstice_warden':\n      renderSolsticeWarden(ctx, miniboss, screenPos);\n      break;\n    case 'aether_leviathan':\n      renderAetherLeviathan(ctx, miniboss, screenPos);\n      break;\n    case 'bloom_warden':\n      renderBloomWarden(ctx, miniboss, screenPos);\n      break;\n    case 'rift_revenant':\n      renderRiftRevenant(ctx, miniboss, screenPos);\n      break;\n    default:\n      renderDefaultMiniboss(ctx, miniboss, screenPos);\n  }\n\n  renderMinibossName(ctx, miniboss, screenPos);\n  renderMinibossHealthBar(ctx, miniboss, screenPos);\n}\n\nfunction renderAngulodon(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  if (miniboss.segments && miniboss.segments.length > 0) {\n    for (let i = miniboss.segments.length - 1; i >= 0; i--) {\n      const segment = miniboss.segments[i];\n      const alpha = 1 - (i * 0.08);\n      \n      ctx.globalAlpha = alpha;\n      const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, segment.size / 2);\n      gradient.addColorStop(0, '#22d3ee');\n      gradient.addColorStop(0.6, '#0891b2');\n      gradient.addColorStop(1, '#164e63');\n      ctx.fillStyle = gradient;\n      \n      ctx.beginPath();\n      ctx.ellipse(0, 0, segment.size / 2, segment.size / 2.5, 0, 0, Math.PI * 2);\n      ctx.fill();\n      \n      ctx.strokeStyle = '#06b6d4';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n  }\n\n  const headGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  headGradient.addColorStop(0, '#67e8f9');\n  headGradient.addColorStop(0.5, '#06b6d4');\n  headGradient.addColorStop(1, '#0891b2');\n  ctx.fillStyle = headGradient;\n  ctx.beginPath();\n  ctx.ellipse(0, 0, miniboss.size / 2, miniboss.size / 3, 0, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.fillStyle = '#164e63';\n  ctx.beginPath();\n  ctx.moveTo(miniboss.size / 2, 0);\n  ctx.lineTo(miniboss.size / 2 + 15, -8);\n  ctx.lineTo(miniboss.size / 2 + 15, 8);\n  ctx.closePath();\n  ctx.fill();\n\n  ctx.fillStyle = '#fff';\n  ctx.beginPath();\n  ctx.arc(-miniboss.size / 4, -miniboss.size / 8, 3, 0, Math.PI * 2);\n  ctx.fill();\n\n  const jawOpen = miniboss.jaws?.isOpen ? 0.3 : 0;\n  ctx.strokeStyle = '#e0f2fe';\n  ctx.lineWidth = 3;\n  ctx.beginPath();\n  ctx.moveTo(miniboss.size / 3, -miniboss.size / 6 - jawOpen * 10);\n  ctx.lineTo(miniboss.size / 2 + 10, -jawOpen * 15);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(miniboss.size / 3, miniboss.size / 6 + jawOpen * 10);\n  ctx.lineTo(miniboss.size / 2 + 10, jawOpen * 15);\n  ctx.stroke();\n\n  ctx.restore();\n}\n\nfunction renderCryostagVanguard(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  const bodyGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  bodyGradient.addColorStop(0, '#bae6fd');\n  bodyGradient.addColorStop(0.5, '#60a5fa');\n  bodyGradient.addColorStop(1, '#1e3a8a');\n  ctx.fillStyle = bodyGradient;\n  ctx.beginPath();\n  ctx.ellipse(0, 0, miniboss.size / 2, miniboss.size / 2.5, 0, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.strokeStyle = '#93c5fd';\n  ctx.lineWidth = 2;\n  ctx.stroke();\n\n  ctx.fillStyle = '#dbeafe';\n  ctx.beginPath();\n  ctx.arc(-miniboss.size / 4, -miniboss.size / 6, 4, 0, Math.PI * 2);\n  ctx.fill();\n\n  const antlerCount = 6;\n  for (let i = 0; i < antlerCount; i++) {\n    const side = i < antlerCount / 2 ? -1 : 1;\n    const angleOffset = (i % (antlerCount / 2)) * 0.4 - 0.4;\n    const angle = -Math.PI / 2 * side + angleOffset;\n    const length = miniboss.size * (0.4 + (i % (antlerCount / 2)) * 0.15);\n    \n    ctx.save();\n    ctx.rotate(angle);\n    \n    const gradient = ctx.createLinearGradient(0, -miniboss.size / 3, 0, -miniboss.size / 3 - length);\n    gradient.addColorStop(0, '#60a5fa');\n    gradient.addColorStop(0.5, '#93c5fd');\n    gradient.addColorStop(1, '#e0f2fe');\n    \n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 4 - i * 0.3;\n    ctx.beginPath();\n    ctx.moveTo(0, -miniboss.size / 3);\n    ctx.lineTo(0, -miniboss.size / 3 - length);\n    ctx.stroke();\n    \n    const branches = 2;\n    for (let j = 0; j < branches; j++) {\n      const branchY = -miniboss.size / 3 - length * (0.4 + j * 0.3);\n      const branchLength = length * 0.3;\n      ctx.beginPath();\n      ctx.moveTo(0, branchY);\n      ctx.lineTo(-branchLength * 0.7, branchY - branchLength * 0.5);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(0, branchY);\n      ctx.lineTo(branchLength * 0.7, branchY - branchLength * 0.5);\n      ctx.stroke();\n    }\n    \n    ctx.restore();\n  }\n\n  ctx.fillStyle = '#1e3a8a';\n  const legOffsets = [-miniboss.size / 3, -miniboss.size / 6, miniboss.size / 6, miniboss.size / 3];\n  legOffsets.forEach(offset => {\n    ctx.beginPath();\n    ctx.ellipse(offset, miniboss.size / 3, 6, 14, 0, 0, Math.PI * 2);\n    ctx.fill();\n  });\n\n  ctx.restore();\n}\n\nfunction renderPyroclastBehemoth(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  ctx.shadowBlur = 25;\n  ctx.shadowColor = '#f97316';\n\n  const bodyGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  bodyGradient.addColorStop(0, '#fbbf24');\n  bodyGradient.addColorStop(0.3, '#f97316');\n  bodyGradient.addColorStop(0.7, '#b45309');\n  bodyGradient.addColorStop(1, '#451a03');\n  ctx.fillStyle = bodyGradient;\n  ctx.beginPath();\n  ctx.arc(0, 0, miniboss.size / 2, 0, Math.PI * 2);\n  ctx.fill();\n\n  const crackCount = 8;\n  for (let i = 0; i < crackCount; i++) {\n    const angle = (i / crackCount) * Math.PI * 2;\n    const startRadius = miniboss.size * 0.15;\n    const endRadius = miniboss.size * 0.45;\n    \n    const gradient = ctx.createLinearGradient(\n      Math.cos(angle) * startRadius,\n      Math.sin(angle) * startRadius,\n      Math.cos(angle) * endRadius,\n      Math.sin(angle) * endRadius\n    );\n    gradient.addColorStop(0, '#fbbf24');\n    gradient.addColorStop(1, '#f97316');\n    \n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.moveTo(Math.cos(angle) * startRadius, Math.sin(angle) * startRadius);\n    ctx.lineTo(Math.cos(angle) * endRadius, Math.sin(angle) * endRadius);\n    ctx.stroke();\n  }\n\n  const lavaPoolCount = 5;\n  for (let i = 0; i < lavaPoolCount; i++) {\n    const angle = (i / lavaPoolCount) * Math.PI * 2 + Date.now() * 0.001;\n    const radius = miniboss.size * 0.2;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    \n    const poolGradient = ctx.createRadialGradient(x, y, 0, x, y, 8);\n    poolGradient.addColorStop(0, '#fef08a');\n    poolGradient.addColorStop(0.5, '#fb923c');\n    poolGradient.addColorStop(1, 'rgba(251, 146, 60, 0)');\n    ctx.fillStyle = poolGradient;\n    ctx.beginPath();\n    ctx.arc(x, y, 8, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  if (miniboss.shieldActive && miniboss.shieldHealth) {\n    ctx.strokeStyle = '#fdba74';\n    ctx.lineWidth = 4;\n    ctx.globalAlpha = 0.7;\n    ctx.beginPath();\n    ctx.arc(0, 0, miniboss.size / 2 + 10, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n  }\n\n  ctx.restore();\n}\n\nfunction renderMirelurkerMatron(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  const shellGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  shellGradient.addColorStop(0, '#a3e635');\n  shellGradient.addColorStop(0.5, '#84cc16');\n  shellGradient.addColorStop(1, '#4d7c0f');\n  ctx.fillStyle = shellGradient;\n  ctx.beginPath();\n  ctx.ellipse(0, 0, miniboss.size / 2, miniboss.size / 2.2, 0, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.strokeStyle = '#65a30d';\n  ctx.lineWidth = 3;\n  const ridgeCount = 5;\n  for (let i = 0; i < ridgeCount; i++) {\n    const radiusRatio = 0.3 + (i / ridgeCount) * 0.6;\n    ctx.beginPath();\n    ctx.ellipse(0, 0, miniboss.size / 2 * radiusRatio, miniboss.size / 2.2 * radiusRatio, 0, 0, Math.PI * 2);\n    ctx.stroke();\n  }\n\n  ctx.fillStyle = '#22c55e';\n  ctx.beginPath();\n  ctx.arc(-miniboss.size / 4, -miniboss.size / 6, 5, 0, Math.PI * 2);\n  ctx.fill();\n\n  const tentacleCount = 6;\n  for (let i = 0; i < tentacleCount; i++) {\n    const angle = (i / tentacleCount) * Math.PI * 2;\n    const waveOffset = Math.sin(Date.now() * 0.003 + i) * 0.3;\n    \n    ctx.save();\n    ctx.rotate(angle);\n    \n    const gradient = ctx.createLinearGradient(0, miniboss.size / 2, 0, miniboss.size / 2 + 30);\n    gradient.addColorStop(0, '#84cc16');\n    gradient.addColorStop(1, '#65a30d');\n    \n    ctx.strokeStyle = gradient;\n    ctx.lineWidth = 8;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(0, miniboss.size / 2);\n    ctx.quadraticCurveTo(\n      waveOffset * 15, miniboss.size / 2 + 15,\n      -waveOffset * 10, miniboss.size / 2 + 30\n    );\n    ctx.stroke();\n    \n    ctx.restore();\n  }\n\n  ctx.fillStyle = '#a3e635';\n  ctx.globalAlpha = 0.6;\n  for (let i = 0; i < 8; i++) {\n    const angle = (i / 8) * Math.PI * 2;\n    const radius = miniboss.size / 3;\n    const size = 4 + Math.random() * 3;\n    ctx.beginPath();\n    ctx.arc(Math.cos(angle) * radius, Math.sin(angle) * radius, size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n  ctx.globalAlpha = 1;\n\n  ctx.restore();\n}\n\nfunction renderPrismGuardian(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation + Date.now() * 0.0005);\n\n  ctx.shadowBlur = 20;\n  ctx.shadowColor = '#22d3ee';\n\n  const facetCount = 8;\n  for (let i = 0; i < facetCount; i++) {\n    const angle = (i / facetCount) * Math.PI * 2;\n    const nextAngle = ((i + 1) / facetCount) * Math.PI * 2;\n    \n    const colors = ['#06b6d4', '#22d3ee', '#67e8f9', '#0891b2'];\n    const colorIndex = i % colors.length;\n    \n    const gradient = ctx.createLinearGradient(0, 0, Math.cos(angle) * miniboss.size / 2, Math.sin(angle) * miniboss.size / 2);\n    gradient.addColorStop(0, colors[colorIndex]);\n    gradient.addColorStop(1, colors[(colorIndex + 1) % colors.length]);\n    \n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(Math.cos(angle) * miniboss.size / 2, Math.sin(angle) * miniboss.size / 2);\n    ctx.lineTo(Math.cos(nextAngle) * miniboss.size / 2, Math.sin(nextAngle) * miniboss.size / 2);\n    ctx.closePath();\n    ctx.fill();\n    \n    ctx.strokeStyle = '#e0f2fe';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n\n  ctx.fillStyle = '#06b6d4';\n  ctx.globalAlpha = 0.8;\n  ctx.beginPath();\n  ctx.arc(0, 0, miniboss.size / 4, 0, Math.PI * 2);\n  ctx.fill();\n  ctx.globalAlpha = 1;\n\n  const orbitCount = 3;\n  for (let i = 0; i < orbitCount; i++) {\n    const angle = (Date.now() * 0.002 + i * (Math.PI * 2 / orbitCount));\n    const radius = miniboss.size * 0.6;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    \n    const orbGradient = ctx.createRadialGradient(x, y, 0, x, y, 6);\n    orbGradient.addColorStop(0, '#e0f2fe');\n    orbGradient.addColorStop(0.5, '#22d3ee');\n    orbGradient.addColorStop(1, 'rgba(34, 211, 238, 0)');\n    ctx.fillStyle = orbGradient;\n    ctx.beginPath();\n    ctx.arc(x, y, 6, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  ctx.restore();\n}\n\nfunction renderNullSiren(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  ctx.shadowBlur = 25;\n  ctx.shadowColor = '#581c87';\n\n  const coreGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 3);\n  coreGradient.addColorStop(0, '#1e1b4b');\n  coreGradient.addColorStop(0.5, '#4c1d95');\n  coreGradient.addColorStop(1, '#7e22ce');\n  ctx.fillStyle = coreGradient;\n  ctx.beginPath();\n  ctx.arc(0, 0, miniboss.size / 3, 0, Math.PI * 2);\n  ctx.fill();\n\n  const fragmentCount = 5;\n  for (let i = 0; i < fragmentCount; i++) {\n    const angle = (Date.now() * 0.001 + i * (Math.PI * 2 / fragmentCount));\n    const radius = miniboss.size * 0.5;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    \n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle + Math.PI / 2);\n    \n    const fragGradient = ctx.createLinearGradient(-10, 0, 10, 0);\n    fragGradient.addColorStop(0, 'rgba(124, 58, 237, 0)');\n    fragGradient.addColorStop(0.5, '#7c3aed');\n    fragGradient.addColorStop(1, 'rgba(124, 58, 237, 0)');\n    ctx.fillStyle = fragGradient;\n    \n    ctx.beginPath();\n    ctx.moveTo(0, -15);\n    ctx.lineTo(8, -5);\n    ctx.lineTo(6, 15);\n    ctx.lineTo(-6, 15);\n    ctx.lineTo(-8, -5);\n    ctx.closePath();\n    ctx.fill();\n    \n    ctx.strokeStyle = '#a78bfa';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    \n    ctx.restore();\n  }\n\n  const waveCount = 3;\n  for (let i = 0; i < waveCount; i++) {\n    const phase = (Date.now() * 0.002 + i * 0.7) % 1;\n    const radius = miniboss.size / 3 + phase * miniboss.size * 0.5;\n    \n    ctx.strokeStyle = `rgba(168, 85, 247, ${0.8 - phase * 0.8})`;\n    ctx.lineWidth = 4 - phase * 3;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, Math.PI * 2);\n    ctx.stroke();\n  }\n\n  ctx.fillStyle = '#e0e7ff';\n  ctx.shadowBlur = 15;\n  ctx.shadowColor = '#7c3aed';\n  for (let i = 0; i < 3; i++) {\n    const angle = (i / 3) * Math.PI * 2 + Date.now() * 0.0015;\n    const x = Math.cos(angle) * (miniboss.size / 5);\n    const y = Math.sin(angle) * (miniboss.size / 5);\n    ctx.beginPath();\n    ctx.arc(x, y, 4, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  ctx.restore();\n}\n\nfunction renderSolsticeWarden(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  const rotationSpeed = Date.now() * 0.001;\n  ctx.rotate(rotationSpeed);\n\n  ctx.shadowBlur = 20;\n  ctx.shadowColor = '#f59e0b';\n\n  const segmentCount = 8;\n  for (let i = 0; i < segmentCount; i++) {\n    const angle = (i / segmentCount) * Math.PI * 2;\n    const nextAngle = ((i + 1) / segmentCount) * Math.PI * 2;\n    \n    const isDark = i % 2 === 0;\n    const gradient = ctx.createLinearGradient(0, 0, Math.cos(angle) * miniboss.size / 2, Math.sin(angle) * miniboss.size / 2);\n    \n    if (isDark) {\n      gradient.addColorStop(0, '#1e3a8a');\n      gradient.addColorStop(1, '#3b82f6');\n    } else {\n      gradient.addColorStop(0, '#f59e0b');\n      gradient.addColorStop(1, '#fbbf24');\n    }\n    \n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(Math.cos(angle) * miniboss.size / 2, Math.sin(angle) * miniboss.size / 2);\n    ctx.lineTo(Math.cos(nextAngle) * miniboss.size / 2, Math.sin(nextAngle) * miniboss.size / 2);\n    ctx.closePath();\n    ctx.fill();\n    \n    ctx.strokeStyle = isDark ? '#60a5fa' : '#fde047';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n  }\n\n  const centerGradient = ctx.createRadialGradient(-miniboss.size / 4, 0, 0, -miniboss.size / 4, 0, miniboss.size / 4);\n  centerGradient.addColorStop(0, '#fef3c7');\n  centerGradient.addColorStop(1, '#f59e0b');\n  ctx.fillStyle = centerGradient;\n  ctx.beginPath();\n  ctx.arc(-miniboss.size / 4, 0, miniboss.size / 4, 0, Math.PI * 2);\n  ctx.fill();\n\n  const moonGradient = ctx.createRadialGradient(miniboss.size / 4, 0, 0, miniboss.size / 4, 0, miniboss.size / 4);\n  moonGradient.addColorStop(0, '#dbeafe');\n  moonGradient.addColorStop(1, '#3b82f6');\n  ctx.fillStyle = moonGradient;\n  ctx.beginPath();\n  ctx.arc(miniboss.size / 4, 0, miniboss.size / 4, 0, Math.PI * 2);\n  ctx.fill();\n\n  const rayCount = 12;\n  for (let i = 0; i < rayCount; i++) {\n    const angle = (i / rayCount) * Math.PI * 2 - rotationSpeed * 0.5;\n    const length = miniboss.size * 0.4;\n    const startRadius = miniboss.size * 0.5;\n    \n    const isDarkSide = i < rayCount / 2;\n    ctx.strokeStyle = isDarkSide ? 'rgba(96, 165, 250, 0.6)' : 'rgba(251, 191, 36, 0.6)';\n    ctx.lineWidth = 3;\n    ctx.lineCap = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(Math.cos(angle) * startRadius, Math.sin(angle) * startRadius);\n    ctx.lineTo(Math.cos(angle) * (startRadius + length), Math.sin(angle) * (startRadius + length));\n    ctx.stroke();\n  }\n\n  ctx.restore();\n}\n\nfunction renderAetherLeviathan(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  ctx.shadowBlur = 18;\n  ctx.shadowColor = '#8b5cf6';\n\n  const bodyGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  bodyGradient.addColorStop(0, '#c4b5fd');\n  bodyGradient.addColorStop(0.4, '#8b5cf6');\n  bodyGradient.addColorStop(0.8, '#6d28d9');\n  bodyGradient.addColorStop(1, '#4c1d95');\n  ctx.fillStyle = bodyGradient;\n  ctx.beginPath();\n  ctx.ellipse(0, 0, miniboss.size / 2, miniboss.size / 2.3, 0, 0, Math.PI * 2);\n  ctx.fill();\n\n  const wingCount = 4;\n  for (let i = 0; i < wingCount; i++) {\n    const side = i < wingCount / 2 ? -1 : 1;\n    const index = i % (wingCount / 2);\n    const yOffset = (index - 0.5) * miniboss.size / 3;\n    const pulse = Math.sin(Date.now() * 0.003 + i) * 0.2 + 1;\n    \n    ctx.save();\n    ctx.translate(0, yOffset);\n    \n    const wingGradient = ctx.createLinearGradient(0, 0, side * miniboss.size * 0.7 * pulse, 0);\n    wingGradient.addColorStop(0, '#8b5cf6');\n    wingGradient.addColorStop(0.6, '#a78bfa');\n    wingGradient.addColorStop(1, 'rgba(167, 139, 250, 0.2)');\n    \n    ctx.fillStyle = wingGradient;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.quadraticCurveTo(\n      side * miniboss.size * 0.4 * pulse, -miniboss.size / 6,\n      side * miniboss.size * 0.7 * pulse, 0\n    );\n    ctx.quadraticCurveTo(\n      side * miniboss.size * 0.4 * pulse, miniboss.size / 6,\n      0, 0\n    );\n    ctx.fill();\n    \n    ctx.strokeStyle = '#c4b5fd';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n    \n    ctx.restore();\n  }\n\n  ctx.fillStyle = '#fef3c7';\n  ctx.beginPath();\n  ctx.arc(-miniboss.size / 5, -miniboss.size / 8, 4, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.fillStyle = '#c4b5fd';\n  for (let i = 0; i < 12; i++) {\n    const angle = (i / 12) * Math.PI * 2;\n    const radius = miniboss.size / 3;\n    const pulseRadius = Math.sin(Date.now() * 0.004 + i * 0.5) * 2 + 3;\n    ctx.globalAlpha = 0.7;\n    ctx.beginPath();\n    ctx.arc(Math.cos(angle) * radius, Math.sin(angle) * radius, pulseRadius, 0, Math.PI * 2);\n    ctx.fill();\n  }\n  ctx.globalAlpha = 1;\n\n  ctx.restore();\n}\n\nfunction renderBloomWarden(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  \n  ctx.shadowBlur = 15;\n  ctx.shadowColor = '#fde047';\n\n  const rotation = Date.now() * 0.001;\n\n  const petalCount = 12;\n  for (let i = 0; i < petalCount; i++) {\n    const angle = (i / petalCount) * Math.PI * 2 + rotation;\n    const petalLength = miniboss.size * 0.6;\n    const petalWidth = miniboss.size * 0.25;\n    \n    ctx.save();\n    ctx.rotate(angle);\n    \n    const petalGradient = ctx.createLinearGradient(0, 0, 0, petalLength);\n    petalGradient.addColorStop(0, '#fef08a');\n    petalGradient.addColorStop(0.5, '#fde047');\n    petalGradient.addColorStop(1, '#facc15');\n    \n    ctx.fillStyle = petalGradient;\n    ctx.beginPath();\n    ctx.ellipse(0, petalLength / 2, petalWidth / 2, petalLength / 2, 0, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.strokeStyle = '#eab308';\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n    \n    ctx.restore();\n  }\n\n  const centerGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 3);\n  centerGradient.addColorStop(0, '#fbbf24');\n  centerGradient.addColorStop(0.6, '#f59e0b');\n  centerGradient.addColorStop(1, '#d97706');\n  ctx.fillStyle = centerGradient;\n  ctx.beginPath();\n  ctx.arc(0, 0, miniboss.size / 3, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.fillStyle = '#fed7aa';\n  for (let i = 0; i < 20; i++) {\n    const angle = (i / 20) * Math.PI * 2 + rotation * 0.5;\n    const radius = miniboss.size / 5 + Math.sin(i * 2) * 5;\n    const size = 2 + Math.sin(i * 3) * 1;\n    ctx.beginPath();\n    ctx.arc(Math.cos(angle) * radius, Math.sin(angle) * radius, size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  ctx.restore();\n}\n\nfunction renderRiftRevenant(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  \n  ctx.shadowBlur = 22;\n  ctx.shadowColor = '#a855f7';\n\n  const phase = Math.sin(Date.now() * 0.003) * 0.5 + 0.5;\n  const glitchOffset = Math.random() * 2 - 1;\n\n  ctx.globalAlpha = 0.9 + phase * 0.1;\n  \n  const bodyGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  bodyGradient.addColorStop(0, '#e9d5ff');\n  bodyGradient.addColorStop(0.3, '#c084fc');\n  bodyGradient.addColorStop(0.7, '#a855f7');\n  bodyGradient.addColorStop(1, '#7e22ce');\n  ctx.fillStyle = bodyGradient;\n  \n  ctx.beginPath();\n  for (let i = 0; i < 6; i++) {\n    const angle = (i / 6) * Math.PI * 2;\n    const radius = miniboss.size / 2 + (i % 2 === 0 ? 10 : 0);\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  }\n  ctx.closePath();\n  ctx.fill();\n\n  ctx.strokeStyle = '#ddd6fe';\n  ctx.lineWidth = 2;\n  ctx.stroke();\n\n  if (Math.random() > 0.9) {\n    ctx.save();\n    ctx.globalAlpha = 0.5;\n    ctx.translate(glitchOffset * 5, glitchOffset * 3);\n    ctx.strokeStyle = '#c084fc';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  const runeCount = 4;\n  for (let i = 0; i < runeCount; i++) {\n    const angle = (i / runeCount) * Math.PI * 2 + Date.now() * 0.002;\n    const radius = miniboss.size * 0.35;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    \n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle);\n    \n    ctx.strokeStyle = '#e9d5ff';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(-5, -5);\n    ctx.lineTo(5, 5);\n    ctx.moveTo(-5, 5);\n    ctx.lineTo(5, -5);\n    ctx.stroke();\n    \n    ctx.restore();\n  }\n\n  ctx.globalAlpha = 1;\n  ctx.restore();\n}\n\nfunction renderDefaultMiniboss(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  ctx.save();\n  ctx.translate(screenPos.x, screenPos.y);\n  ctx.rotate(miniboss.rotation);\n\n  const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, miniboss.size / 2);\n  gradient.addColorStop(0, miniboss.color);\n  gradient.addColorStop(0.7, miniboss.secondaryColor || miniboss.color);\n  gradient.addColorStop(1, '#000');\n  \n  ctx.fillStyle = gradient;\n  ctx.shadowBlur = 15;\n  ctx.shadowColor = miniboss.color;\n  \n  ctx.beginPath();\n  ctx.arc(0, 0, miniboss.size / 2, 0, Math.PI * 2);\n  ctx.fill();\n\n  ctx.restore();\n}\n\nfunction renderMinibossName(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  if (!miniboss.minibossSubtype) return;\n\n  const names: Record<MinibossSubtype, string> = {\n    angulodon: 'ANGULODON',\n    cryostag_vanguard: 'CRYOSTAG VANGUARD',\n    pyroclast_behemoth: 'PYROCLAST BEHEMOTH',\n    mirelurker_matron: 'MIRELURKER MATRON',\n    prism_guardian: 'PRISM GUARDIAN',\n    null_siren: 'NULL SIREN',\n    solstice_warden: 'SOLSTICE WARDEN',\n    aether_leviathan: 'AETHER LEVIATHAN',\n    bloom_warden: 'BLOOM WARDEN',\n    rift_revenant: 'RIFT REVENANT',\n  };\n\n  ctx.save();\n  ctx.fillStyle = '#ffffff';\n  ctx.strokeStyle = '#000000';\n  ctx.lineWidth = 3;\n  ctx.font = 'bold 12px monospace';\n  ctx.textAlign = 'center';\n  ctx.shadowBlur = 6;\n  ctx.shadowColor = miniboss.color;\n  \n  const name = names[miniboss.minibossSubtype] || 'MINIBOSS';\n  const yOffset = -miniboss.size / 2 - 25;\n  \n  ctx.strokeText(name, screenPos.x, screenPos.y + yOffset);\n  ctx.fillText(name, screenPos.x, screenPos.y + yOffset);\n  \n  ctx.restore();\n}\n\nfunction renderMinibossHealthBar(ctx: CanvasRenderingContext2D, miniboss: Enemy, screenPos: Vector2): void {\n  const barWidth = miniboss.size * 1.2;\n  const barHeight = 8;\n  const yOffset = -miniboss.size / 2 - 40;\n  \n  ctx.save();\n  \n  ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n  ctx.fillRect(screenPos.x - barWidth / 2, screenPos.y + yOffset, barWidth, barHeight);\n  \n  const healthPercent = Math.max(0, miniboss.health / miniboss.maxHealth);\n  const healthBarWidth = barWidth * healthPercent;\n  \n  const gradient = ctx.createLinearGradient(\n    screenPos.x - barWidth / 2,\n    0,\n    screenPos.x - barWidth / 2 + barWidth,\n    0\n  );\n  gradient.addColorStop(0, '#ef4444');\n  gradient.addColorStop(0.5, '#f59e0b');\n  gradient.addColorStop(1, '#10b981');\n  \n  ctx.fillStyle = gradient;\n  ctx.fillRect(screenPos.x - barWidth / 2, screenPos.y + yOffset, healthBarWidth, barHeight);\n  \n  ctx.strokeStyle = miniboss.color;\n  ctx.lineWidth = 2;\n  ctx.strokeRect(screenPos.x - barWidth / 2, screenPos.y + yOffset, barWidth, barHeight);\n  \n  ctx.restore();\n}\n","size_bytes":25662},"src/game/DroneRenderer.ts":{"content":"import { Drone } from '../types/game';\nimport { Camera } from './Camera';\n\nexport class DroneRenderer {\n  renderDrone(\n    ctx: CanvasRenderingContext2D,\n    drone: Drone,\n    camera: Camera\n  ): void {\n    const screenPos = camera.worldToScreen(drone.position);\n    \n    ctx.save();\n    ctx.translate(screenPos.x, screenPos.y);\n    ctx.rotate(drone.rotation);\n\n    // Draw glow effect\n    const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, drone.size * 1.5);\n    gradient.addColorStop(0, drone.color + '80');\n    gradient.addColorStop(0.5, drone.color + '40');\n    gradient.addColorStop(1, drone.color + '00');\n    \n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(0, 0, drone.size * 1.5, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw shape based on drone type\n    switch (drone.shape) {\n      case 'circle':\n        this.renderCircle(ctx, drone);\n        break;\n      case 'triangle':\n        this.renderTriangle(ctx, drone);\n        break;\n      case 'square':\n        this.renderSquare(ctx, drone);\n        break;\n      case 'hexagon':\n        this.renderHexagon(ctx, drone);\n        break;\n      case 'diamond':\n        this.renderDiamond(ctx, drone);\n        break;\n      case 'cross':\n        this.renderCross(ctx, drone);\n        break;\n      case 'star':\n        this.renderStar(ctx, drone);\n        break;\n    }\n\n    ctx.restore();\n  }\n\n  private renderCircle(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    \n    // Outer ring\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(0, 0, size, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Mid ring with pattern\n    ctx.strokeStyle = drone.secondaryColor;\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n    ctx.arc(0, 0, size * 0.7, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Inner circle\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, size * 0.5, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Rotating segments\n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2;\n      ctx.fillStyle = drone.color;\n      ctx.beginPath();\n      ctx.arc(Math.cos(angle) * size * 0.5, Math.sin(angle) * size * 0.5, size * 0.15, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Center core\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    ctx.arc(0, 0, size * 0.25, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  private renderTriangle(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    \n    // Main triangle\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(size, 0);\n    ctx.lineTo(-size * 0.7, -size * 0.8);\n    ctx.lineTo(-size * 0.7, size * 0.8);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Inner triangle\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    ctx.moveTo(size * 0.5, 0);\n    ctx.lineTo(-size * 0.4, -size * 0.5);\n    ctx.lineTo(-size * 0.4, size * 0.5);\n    ctx.closePath();\n    ctx.fill();\n\n    // Side accents\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.beginPath();\n    ctx.arc(size * 0.3, 0, size * 0.2, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Energy lines\n    ctx.strokeStyle = drone.color + '80';\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n    ctx.moveTo(size * 0.6, 0);\n    ctx.lineTo(-size * 0.5, -size * 0.4);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(size * 0.6, 0);\n    ctx.lineTo(-size * 0.5, size * 0.4);\n    ctx.stroke();\n  }\n\n  private renderSquare(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size * 0.9;\n    \n    // Outer square rotated\n    ctx.save();\n    ctx.rotate(Math.PI / 4);\n    ctx.fillStyle = drone.color + '40';\n    ctx.fillRect(-size * 0.9, -size * 0.9, size * 1.8, size * 1.8);\n    ctx.restore();\n\n    // Main square\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    ctx.strokeRect(-size, -size, size * 2, size * 2);\n    ctx.fillRect(-size, -size, size * 2, size * 2);\n\n    // Inner square\n    ctx.fillStyle = drone.color;\n    ctx.fillRect(-size * 0.5, -size * 0.5, size, size);\n\n    // Corner accents\n    const cornerSize = size * 0.3;\n    ctx.fillStyle = drone.secondaryColor;\n    [[-size, -size], [size - cornerSize, -size], [-size, size - cornerSize], [size - cornerSize, size - cornerSize]].forEach(([x, y]) => {\n      ctx.fillRect(x, y, cornerSize, cornerSize);\n    });\n  }\n\n  private renderHexagon(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    const sides = 6;\n    \n    // Outer hexagon\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    \n    ctx.beginPath();\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * Math.PI * 2 - Math.PI / 2;\n      const x = Math.cos(angle) * size;\n      const y = Math.sin(angle) * size;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Mid hexagon\n    ctx.fillStyle = drone.color + '60';\n    ctx.beginPath();\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * Math.PI * 2 - Math.PI / 2;\n      const x = Math.cos(angle) * size * 0.7;\n      const y = Math.sin(angle) * size * 0.7;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n\n    // Inner hexagon\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * Math.PI * 2 - Math.PI / 2;\n      const x = Math.cos(angle) * size * 0.4;\n      const y = Math.sin(angle) * size * 0.4;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n\n    // Corner dots\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * Math.PI * 2 - Math.PI / 2;\n      const x = Math.cos(angle) * size * 0.85;\n      const y = Math.sin(angle) * size * 0.85;\n      ctx.fillStyle = drone.secondaryColor;\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.12, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  private renderDiamond(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    \n    // Outer diamond glow\n    ctx.fillStyle = drone.color + '30';\n    ctx.beginPath();\n    ctx.moveTo(size * 1.2, 0);\n    ctx.lineTo(0, -size * 1.2);\n    ctx.lineTo(-size * 1.2, 0);\n    ctx.lineTo(0, size * 1.2);\n    ctx.closePath();\n    ctx.fill();\n\n    // Main diamond\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(size, 0);\n    ctx.lineTo(0, -size);\n    ctx.lineTo(-size, 0);\n    ctx.lineTo(0, size);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Mid diamond\n    ctx.fillStyle = drone.color + '80';\n    ctx.beginPath();\n    ctx.moveTo(size * 0.6, 0);\n    ctx.lineTo(0, -size * 0.6);\n    ctx.lineTo(-size * 0.6, 0);\n    ctx.lineTo(0, size * 0.6);\n    ctx.closePath();\n    ctx.fill();\n\n    // Inner diamond\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    ctx.moveTo(size * 0.35, 0);\n    ctx.lineTo(0, -size * 0.35);\n    ctx.lineTo(-size * 0.35, 0);\n    ctx.lineTo(0, size * 0.35);\n    ctx.closePath();\n    ctx.fill();\n\n    // Edge accents\n    ctx.fillStyle = drone.secondaryColor;\n    [[size * 0.7, 0], [0, -size * 0.7], [-size * 0.7, 0], [0, size * 0.7]].forEach(([x, y]) => {\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.15, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  }\n\n  private renderCross(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    const thickness = size * 0.35;\n    \n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    \n    // Vertical bar\n    ctx.beginPath();\n    ctx.rect(-thickness / 2, -size, thickness, size * 2);\n    ctx.fill();\n    ctx.stroke();\n    \n    // Horizontal bar\n    ctx.beginPath();\n    ctx.rect(-size, -thickness / 2, size * 2, thickness);\n    ctx.fill();\n    ctx.stroke();\n\n    // Center circle outer\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    ctx.arc(0, 0, thickness * 0.8, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Center circle inner\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, thickness * 0.45, 0, Math.PI * 2);\n    ctx.fill();\n\n    // End caps\n    ctx.fillStyle = drone.color;\n    [[0, -size], [size, 0], [0, size], [-size, 0]].forEach(([x, y]) => {\n      ctx.beginPath();\n      ctx.arc(x, y, thickness * 0.35, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  }\n\n  private renderStar(ctx: CanvasRenderingContext2D, drone: Drone): void {\n    const size = drone.size;\n    const points = 5;\n    const outerRadius = size;\n    const innerRadius = size * 0.4;\n    \n    // Background star (slightly larger)\n    ctx.fillStyle = drone.secondaryColor + '40';\n    ctx.beginPath();\n    for (let i = 0; i < points * 2; i++) {\n      const angle = (i / (points * 2)) * Math.PI * 2 - Math.PI / 2;\n      const radius = i % 2 === 0 ? outerRadius * 1.1 : innerRadius * 1.1;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n\n    // Main star\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.strokeStyle = drone.color;\n    ctx.lineWidth = 2;\n    \n    ctx.beginPath();\n    for (let i = 0; i < points * 2; i++) {\n      const angle = (i / (points * 2)) * Math.PI * 2 - Math.PI / 2;\n      const radius = i % 2 === 0 ? outerRadius : innerRadius;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Inner star\n    ctx.fillStyle = drone.color;\n    ctx.beginPath();\n    for (let i = 0; i < points * 2; i++) {\n      const angle = (i / (points * 2)) * Math.PI * 2 - Math.PI / 2;\n      const radius = i % 2 === 0 ? outerRadius * 0.5 : innerRadius * 0.6;\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n    ctx.fill();\n\n    // Center core\n    ctx.fillStyle = drone.secondaryColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, size * 0.2, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n","size_bytes":10640},"src/components/DroneAbilities.tsx":{"content":"import React from 'react';\nimport { Drone, DroneType } from '../types/game';\nimport { DRONE_DEFINITIONS } from '../game/DroneSystem';\n\ninterface DroneAbilitiesProps {\n  drones: Drone[];\n  onManualActivate: (droneType: DroneType) => void;\n}\n\nconst MANUAL_KEYS = ['Q', 'E', 'R'] as const;\n\nexport const DroneAbilities: React.FC<DroneAbilitiesProps> = ({ drones, onManualActivate }) => {\n  const manualDrones = drones.filter(drone => {\n    const def = DRONE_DEFINITIONS[drone.droneType];\n    return def.activeTrigger === 'manual' && def.activeEffect;\n  });\n\n  const autoDrones = drones.filter(drone => {\n    const def = DRONE_DEFINITIONS[drone.droneType];\n    return def.activeTrigger !== 'manual' && def.activeEffect;\n  });\n\n  const getTriggerDisplay = (trigger?: string) => {\n    switch (trigger) {\n      case 'shoot': return 'On Shoot';\n      case 'dash': return 'On Dash';\n      case 'weaponSwap': return 'On Swap';\n      case 'takeDamage': return 'On Damage';\n      default: return '';\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    return seconds > 0 ? seconds.toFixed(1) + 's' : 'Ready';\n  };\n\n  return (\n    <div className=\"fixed left-4 top-1/2 -translate-y-1/2 space-y-2 pointer-events-none\">\n      {manualDrones.map((drone, index) => {\n        const def = DRONE_DEFINITIONS[drone.droneType];\n        const key = MANUAL_KEYS[index] || '?';\n        const onCooldown = drone.activeEffectTimer > 0;\n        const isActive = drone.isActiveEffectActive;\n        \n        return (\n          <div\n            key={drone.id}\n            className={`\n              bg-gray-900/90 border-2 rounded-lg p-3 min-w-[200px]\n              ${isActive ? 'border-green-400 shadow-lg shadow-green-400/50' : \n                onCooldown ? 'border-gray-600' : 'border-cyan-400 shadow-md shadow-cyan-400/30'}\n              transition-all duration-200\n            `}\n          >\n            <div className=\"flex items-center justify-between mb-1\">\n              <div className=\"flex items-center gap-2\">\n                <div \n                  className={`\n                    w-8 h-8 rounded flex items-center justify-center font-bold text-sm\n                    ${onCooldown ? 'bg-gray-700 text-gray-400' : 'bg-cyan-500 text-black'}\n                  `}\n                >\n                  {key}\n                </div>\n                <span className=\"text-white font-semibold text-sm\">{def.name}</span>\n              </div>\n            </div>\n            \n            <div className=\"text-xs text-gray-300 mb-1\">{def.activeEffect}</div>\n            \n            <div className=\"flex items-center justify-between text-xs\">\n              {isActive && drone.activeEffectRemainingTime ? (\n                <span className=\"text-green-400 font-bold\">\n                  Active: {formatTime(drone.activeEffectRemainingTime)}\n                </span>\n              ) : onCooldown ? (\n                <span className=\"text-orange-400\">\n                  CD: {formatTime(drone.activeEffectTimer)}\n                </span>\n              ) : (\n                <span className=\"text-cyan-400 font-bold\">READY</span>\n              )}\n            </div>\n          </div>\n        );\n      })}\n\n      {autoDrones.length > 0 && (\n        <div className=\"border-t-2 border-gray-700 pt-2 mt-2\">\n          {autoDrones.map((drone) => {\n            const def = DRONE_DEFINITIONS[drone.droneType];\n            const onCooldown = drone.activeEffectTimer > 0;\n            const isActive = drone.isActiveEffectActive;\n            \n            return (\n              <div\n                key={drone.id}\n                className={`\n                  bg-gray-900/80 border rounded-lg p-2 mb-2 min-w-[200px]\n                  ${isActive ? 'border-green-400' : onCooldown ? 'border-gray-700' : 'border-blue-400'}\n                `}\n              >\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-white font-semibold text-xs\">{def.name}</span>\n                  <span className=\"text-blue-300 text-[10px] px-1.5 py-0.5 bg-blue-900/50 rounded\">\n                    {getTriggerDisplay(def.activeTrigger)}\n                  </span>\n                </div>\n                \n                <div className=\"text-[10px] text-gray-400 mb-1\">{def.activeEffect}</div>\n                \n                {isActive && drone.activeEffectRemainingTime ? (\n                  <span className=\"text-green-400 font-bold text-[10px]\">\n                    Active: {formatTime(drone.activeEffectRemainingTime)}\n                  </span>\n                ) : onCooldown ? (\n                  <span className=\"text-orange-400 text-[10px]\">\n                    CD: {formatTime(drone.activeEffectTimer)}\n                  </span>\n                ) : (\n                  <span className=\"text-blue-400 text-[10px]\">Ready</span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n","size_bytes":4938}},"version":2}